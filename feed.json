{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2025/07/14/Open3D/2025-7-14-geomet/",
            "url": "https://zhang3399.github.io/2025/07/14/Open3D/2025-7-14-geomet/",
            "title": "3D点云曲率计算",
            "date_published": "2025-07-14T02:00:00.000Z",
            "content_html": "<h1 id=\"曲率\"><a class=\"markdownIt-Anchor\" href=\"#曲率\">#</a> 曲率</h1>\n<blockquote>\n<p>曲率（curvature）就是针对曲线上某个点的切线方向角对弧长的转动率，通过微分来定义，表明曲线偏离直线的程度。数学上表明曲线在某一点的弯曲程度的数值。</p>\n</blockquote>\n<p><img loading=\"lazy\" src=\"/images/%E6%9B%B2%E7%8E%87.svg\" alt=\"曲率\"></p>\n<h2 id=\"参数曲线的曲率公式\"><a class=\"markdownIt-Anchor\" href=\"#参数曲线的曲率公式\">#</a> 参数曲线的曲率公式</h2>\n<blockquote>\n<p>曲线的切线方向角：曲线在点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> 处的切线与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 轴正向的夹角<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></p>\n</blockquote>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mi>α</mi><mi mathvariant=\"normal\">∣</mi></mrow><mrow><mi>d</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">∣</mi><msup><mi>y</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mi mathvariant=\"normal\">∣</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>y</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup><msup><mo stretchy=\"false\">)</mo><mrow><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">k=\\frac{|d\\alpha|}{ds}=\\frac{|y&#x27;&#x27;|}{(1+y&#x27;^2)^{3/2}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">s</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\">∣</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3829em;vertical-align:-0.954em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4289em;\"><span style=\"top:-2.296em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.814em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3/2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>适用于<strong>连续</strong>、<strong>可导</strong>的函数曲线</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 为弧长；</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span></span></span></span> 分别为函数的一阶导数和二阶导数。</li>\n</ul>\n<p><strong>局限性</strong>：需要函数的解析表达式 (如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">y=x²</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>), 但点云数据（如 3D 扫描得到的离散点）没有显式的函数形式，无法直接计算导数。</p>\n<h2 id=\"点云曲率计算\"><a class=\"markdownIt-Anchor\" href=\"#点云曲率计算\">#</a> 点云曲率计算</h2>\n<ol>\n<li>邻域协方差矩阵（Covariance Matrix），构建协方差矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">cov</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>.</li>\n<li>特征值分解：计算协方差矩阵的特征值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>0</mn></msub><mo>≤</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">λ_0≤λ_1≤λ_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和特征向量。</li>\n<li>曲率定义：曲率<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><msub><mi>λ</mi><mn>0</mn></msub><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>+</mo><msub><mi>λ</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k=λ_0 / (λ_0+λ_1+λ_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ol>\n<p><strong>协方差矩阵</strong></p>\n<ul>\n<li><strong>协方差矩阵</strong>：描述点云局部几何特征，反映邻域点在法向方向上的离散程度。</li>\n<li><strong>协方差矩阵计算</strong>：计算邻域点坐标的均值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">mean</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">an</span></span></span></span>，然后计算邻域点坐标减去均值后的协方差矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">cov</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>。</li>\n</ul>\n<p>协方差矩阵：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>v</mi><mo>=</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mo stretchy=\"false\">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo>−</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo>−</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">cov = \\frac{1}{k}\\sum_{i=1}^{k}(p_i-mean)(p_i-mean)^T\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1138em;vertical-align:-1.2777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8361em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">an</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1413em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">an</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为邻域点坐标；</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">mean</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">an</span></span></span></span> 为邻域点坐标的均值；</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 为邻域点的数量。</li>\n</ul>\n<h3 id=\"特征值分解\"><a class=\"markdownIt-Anchor\" href=\"#特征值分解\">#</a> 特征值分解</h3>\n<ul>\n<li>\n<p>特征向量：代表邻域点分布的 “主方向”（即数据最分散的方向）。例如，若邻域点近似在一个平面上，特征向量会包括平面内的两个正交方向（主方向）和垂直于平面的方向。</p>\n</li>\n<li>\n<p>特征值：代表邻域点在对应主方向上的 “离散程度”（可理解为 “伸展幅度”）。特征值越大，说明数据在该方向上越分散。</p>\n<ul>\n<li>最小特征值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">λ_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：对应数据最 “紧凑” 的方向（离散程度最小）；</li>\n<li>最大特征值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">λ_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：对应数据最 “伸展” 的方向（离散程度最大）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"曲率定义\"><a class=\"markdownIt-Anchor\" href=\"#曲率定义\">#</a> 曲率定义</h3>\n<p><strong>几何意义</strong>：</p>\n<ul>\n<li>当邻域点近似分布在平面上时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>0</mn></msub><mo>≈</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">λ_0≈0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>（法向方向无离散），曲率<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>≈</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">k≈0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>；</li>\n<li>当邻域点位于边缘或尖点时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">λ_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 增大，曲率<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 较大。</li>\n</ul>\n<p><strong>实例：</strong></p>\n<blockquote>\n<p>基于曲率计算 T 型面的焊点</p>\n</blockquote>\n<p><img loading=\"lazy\" src=\"/images/T%E9%9D%A2.png\" alt=\"T型面\"></p>\n<p>&quot;9i65wsa</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>weld_pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"2.ply\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># T 型平面点云数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pcd_tree <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>KDTreeFlann<span class=\"token punctuation\">(</span>weld_pcd<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 构建 KD 树</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>curvatures <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>weld_pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始化曲率数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>weld_pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pcd_tree<span class=\"token punctuation\">.</span>search_knn_vector_3d<span class=\"token punctuation\">(</span>weld_pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 搜索邻域点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    points <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>weld_pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 获取邻域点坐标</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算邻域点均值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    points_centered <span class=\"token operator\">=</span> points <span class=\"token operator\">-</span> mean <span class=\"token comment\"># 中心化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cov <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>points_centered<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> points_centered<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> k <span class=\"token comment\"># 计算协方差矩阵</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    eigenvalues<span class=\"token punctuation\">,</span> eigenvectors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>eigh<span class=\"token punctuation\">(</span>cov<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算特征值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    curvatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> eigenvalues<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>eigenvalues<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e-10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算曲率</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>threshold <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>curvatures<span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算曲率阈值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>is_weld_point <span class=\"token operator\">=</span> curvatures <span class=\"token operator\">></span> threshold <span class=\"token comment\"># 判断是否为焊点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>weld_points <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>weld_pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>is_weld_point<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 获取焊点坐标</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>dot_radius <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span> <span class=\"token comment\"># 圆点半径，根据实际场景调整</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>dot_clouds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> point <span class=\"token keyword\">in</span> weld_points<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    sphere <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>TriangleMesh<span class=\"token punctuation\">.</span>create_sphere<span class=\"token punctuation\">(</span>radius<span class=\"token operator\">=</span>dot_radius<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 创建球体</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    sphere<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    sphere<span class=\"token punctuation\">.</span>paint_uniform_color<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 黄色圆点，可调整颜色</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    dot_clouds<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sphere<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>weld_pcd<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dot_clouds<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/T%E9%9D%A2points.png\" alt=\"焊点\"></p>\n<p><strong>两种方法的联系</strong><br>\n虽然公式形式不同，但两者的核心思想一致：曲率反映曲线 / 曲面的弯曲程度。</p>\n<ul>\n<li>参数曲线公式通过导数直接计算切线方向的变化率；</li>\n<li>点云方法通过邻域几何分析（协方差矩阵和特征值）间接估计弯曲程度。</li>\n</ul>\n<h2 id=\"其他点云曲率计算方法\"><a class=\"markdownIt-Anchor\" href=\"#其他点云曲率计算方法\">#</a> 其他点云曲率计算方法</h2>\n<ul>\n<li><strong>拟合局部曲面</strong>：对邻域点拟合二次曲面（如抛物面），然后计算曲面的曲率。</li>\n<li><strong>法线变化率</strong>：通过相邻点的法线方向差异估计曲率。</li>\n<li><strong>高斯映射</strong>：将点云投影到单位球面上，分析投影点的分布密度。</li>\n</ul>\n",
            "tags": [
                "曲率"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/07/12/Open3D/2025-7-12-Open3D/",
            "url": "https://zhang3399.github.io/2025/07/12/Open3D/2025-7-12-Open3D/",
            "title": "Open3D",
            "date_published": "2025-07-12T02:00:00.000Z",
            "content_html": "<h1 id=\"3d文件\"><a class=\"markdownIt-Anchor\" href=\"#3d文件\">#</a> 3D 文件</h1>\n<h2 id=\"点云文件\"><a class=\"markdownIt-Anchor\" href=\"#点云文件\">#</a> 点云文件</h2>\n<blockquote>\n<p>点云文件是一种用于存储点云数据的文件格式。通常包括点云的坐标、颜色等信息。</p>\n</blockquote>\n<p>默认情况下，Open3D 支持以下点云文件格式：</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>xyz</code></td>\n<td>纯文本格式，每行包含一个点的坐标（x, y, z）</td>\n</tr>\n<tr>\n<td><code>xyzn</code></td>\n<td>纯文本格式，每行包含一个点的坐标（x, y, z）和法线（nx, ny, nz）</td>\n</tr>\n<tr>\n<td><code>xyzrgb</code></td>\n<td>纯文本格式，每行包含一个点的坐标（x, y, z）和颜色（r, g, b）</td>\n</tr>\n<tr>\n<td><code>pcd</code></td>\n<td>PCD 文件格式，由 PCL（Point Cloud Library）定义</td>\n</tr>\n<tr>\n<td><code>ply</code></td>\n<td>PLY 文件格式，由 PLY（Polygon File Format）定义</td>\n</tr>\n<tr>\n<td><code>obj</code></td>\n<td>OBJ 文件格式，由 3D 建模软件定义</td>\n</tr>\n</tbody>\n</table>\n<p><code>o3d.io.read_point_cloud(pcd,format)</code>  函数未指定 <code>format</code>  参数时，Open3D 会根据文件扩展名自动推断文件格式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 读取点云文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"path_to_point_cloud_file.pcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 显示点云</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pcd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>代码直接构造点云数据</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 定义点坐标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vertices <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 点 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 点 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 点 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 点 3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 创建点云对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>PointCloud<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pcd<span class=\"token punctuation\">.</span>points <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pcd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> window_name<span class=\"token operator\">=</span><span class=\"token string\">\"直接构造的点云\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"网格文件\"><a class=\"markdownIt-Anchor\" href=\"#网格文件\">#</a> 网格文件</h2>\n<blockquote>\n<p>网格文件是一种用于存储三维网格数据的文件格式。通常包含多边形、顶点、法线、纹理等信息。</p>\n</blockquote>\n<p>默认情况下，Open3D 支持以下网格文件格式：</p>\n<table>\n<thead>\n<tr>\n<th>文件后缀</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ply</code></td>\n<td>PLY 文件格式，由 PLY（Polygon File Format）定义</td>\n</tr>\n<tr>\n<td><code>obj</code></td>\n<td>OBJ 文件格式，由 3D 建模软件定义</td>\n</tr>\n<tr>\n<td><code>stl</code></td>\n<td>STL 文件格式，由 STL（Stereolithography）定义</td>\n</tr>\n<tr>\n<td><code>off</code></td>\n<td>OFF 文件格式，由 OFF（Object File Format）定义</td>\n</tr>\n</tbody>\n</table>\n<p><code>o3d.io.read_triangle_mesh(mesh,format)</code>  函数未指定 <code>format</code>  参数时，Open3D 会根据文件扩展名自动推断文件格式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 读取网格文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mesh <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_triangle_mesh<span class=\"token punctuation\">(</span><span class=\"token string\">\"path_to_mesh_file.ply\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 显示网格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>mesh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>代码直接构造点网格数据</strong><br>\n注意： 网络数据定义面时，（右手定则）大拇指为面的法线方向，即可视化所展示的面。</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 定义顶点坐标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vertices <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 点 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 点 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 点 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 点 3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 创建点云对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 定义面（每个面由 3 个顶点索引组成）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>triangles <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 面 0: 点 0-2-1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 面 1: 点 0-1-3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 面 2: 点 0-3-2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 面 3: 点 1-2-3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 创建网格对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>mesh <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>TriangleMesh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 设置顶点坐标和面索引</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>mesh<span class=\"token punctuation\">.</span>vertices <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>mesh<span class=\"token punctuation\">.</span>triangles <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3iVector<span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 可选：计算法线并可视化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>mesh<span class=\"token punctuation\">.</span>compute_vertex_normals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>mesh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> window_name<span class=\"token operator\">=</span><span class=\"token string\">\"直接构造的网格\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/mesh.png\" alt=\"create mesh\"></p>\n<h2 id=\"文件内容\"><a class=\"markdownIt-Anchor\" href=\"#文件内容\">#</a> 文件内容</h2>\n<h3 id=\"pcd\"><a class=\"markdownIt-Anchor\" href=\"#pcd\">#</a> PCD</h3>\n<blockquote>\n<p>PCD 文件是一种常用的点云文件格式，由 PCL（Point Cloud Library）定义。PCD 文件可以包含点云的坐标、颜色、法线等信息。</p>\n</blockquote>\n<p>PCD 文件头的具体内容如下：<br>\n<strong>VERSION</strong><br>\n 指定 PCD 文件的版本，目前支持 PCD_V0.7 和 PCD_V0.7_BINARY 两种版本。<br>\n<strong>FIELDS</strong><br>\n 指定点云数据中包含的字段，每个字段用空格分隔。<br>\n示例：</p>\n<table>\n<thead>\n<tr>\n<th>字段内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>FIELDS x y z</code></td>\n<td><code>x</code> 、 <code>y</code> 、 <code>z</code>  三个坐标字段</td>\n</tr>\n<tr>\n<td><code>FIELDS x y z rgb</code></td>\n<td><code>x</code> 、 <code>y</code> 、 <code>z</code>  三个坐标字段 +  <code>rgb</code>  颜色字段（深度相机）</td>\n</tr>\n<tr>\n<td><code>FIELDS x y z normal_x normal_y normal_z</code></td>\n<td><code>x</code> 、 <code>y</code> 、 <code>z</code>  三个坐标字段 +  <code>normal_x</code> 、 <code>normal_y</code> 、 <code>normal_z</code>  三个法线字段</td>\n</tr>\n<tr>\n<td><code>FIELDS j1 j2 j3</code></td>\n<td><code>j1</code> 、 <code>j2</code> 、 <code>j3</code>  三个字段（例如激光雷达）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>SIZE</strong><br>\n 指定每个维度的大小<br>\n示例：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SIZE 4 4 4</code></td>\n<td>每个字段大小为 4 字节</td>\n</tr>\n<tr>\n<td><code>SIZE 4 4 4 4</code></td>\n<td>每个字段大小为 4 字节</td>\n</tr>\n</tbody>\n</table>\n<p><strong>TYPE</strong><br>\n 指定每个字段的类型，每个字段用空格分隔。<br>\n示例：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TYPE F F F</code></td>\n<td>每个字段类型为浮点型</td>\n</tr>\n<tr>\n<td><code>TYPE U U U</code></td>\n<td>每个字段类型为无符号整型</td>\n</tr>\n<tr>\n<td><code>TYPE I I I</code></td>\n<td>每个字段类型为有符号整型</td>\n</tr>\n</tbody>\n</table>\n<p><strong>COUNT</strong><br>\n 指定每个维度的元素数量，每个字段用空格分隔。例如，x 数据通常有 1 个元素，但像 VFH 这样的特征描述符有 308 个元素。<br>\n<strong>WIDTH</strong><br>\n 指定点云数据的宽度，有序有结构表示行数，无需无结构等价 <code>POINTS</code> 。<br>\n<strong>HEIGHT</strong><br>\n 指定点云数据的高度，表示点云数据行数（无序无结构为 1）。<br>\n<strong>VIEWPOINT</strong><br>\n 为数据集中的点指定采集视点。这可能会在以后用于构建不同坐标系之间的变换，或用于帮助处理需要一致方向的特征，如曲面法线。<br>\n它由平移（tx-ty-tz）加上旋转四元数（qw-qx-qy-qz）组成。默认值为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VIEWPOINT <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p><strong>POINTS</strong><br>\n 指定点云数据中点的数量。<br>\n<strong>DATA</strong><br>\n 指定点云数据的存储方式自版本 0.7 起，支持三种数据类型： <code>ascii</code> 、 <code>binary</code>  和 <code>binary_compressed</code> 。</p>\n<ul>\n<li><code>ascii</code>  每一行代表一个点的属性，由于是 <code>ascii</code>  码因此可以直接阅读，缺点就是占用空间大，空的点用 <code>NaN</code>  表示</li>\n<li><code>binary</code>  其中数据是 <code>pcl::PointCloud.points</code>  数组 / 向量的完整内存副本。在 Linux 系统上，我们使用 <code>mmap/munmap</code>  操作对数据进行最快的读 / 写访问。</li>\n<li><code>binary_compressed</code>  该文件（头部之后的所有内容）以一个 32 位无符号二进制数开始，该二进制数指定以压缩形式存在的数据的字节大小。接下来是另一个 32 位无符号二进制数，该二进制数指定未压缩数据的字节大小。然后是压缩后的数据。压缩和解压缩都使用 <code>Marc Lehmann</code>  的 <code>LZF</code>  算法。该算法在压缩率方面表现一般，但是速度非常快。对于典型的点云，压缩后的数据大小为原始大小的 30% 到 60%。在压缩之前，数据会被重新排序以改善压缩效果，从标准的结构数组布局变为数组结构布局。例如，一个包含三个点和 <code>x</code> 、 <code>y</code> 、 <code>z</code>  字段的云将从 <code>xyzxyzxyz</code>  重新排序为 <code>xxxyyyzzz</code> 。</li>\n</ul>\n<p>完整实例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># PCD 文件头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VERSION .7</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FIELDS x y z</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SIZE <span class=\"token number\">4</span> <span class=\"token number\">4</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TYPE F F F</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>COUNT <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>WIDTH <span class=\"token number\">27895</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HEIGHT <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>VIEWPOINT <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>POINTS <span class=\"token number\">27895</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>DATA ascii</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">4.5875902</span> <span class=\"token number\">37.243198</span> <span class=\"token number\">46.776299</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3.7279501</span> <span class=\"token number\">37.171902</span> <span class=\"token number\">46.5345</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">2.84834</span> <span class=\"token number\">37.056301</span> <span class=\"token number\">46.309101</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h3 id=\"ply\"><a class=\"markdownIt-Anchor\" href=\"#ply\">#</a> PLY</h3>\n<blockquote>\n<p>PLY 文件是一种常用的多边形文件格式，由 PLY（Polygon File Format）定义。PLY 文件可以包含多边形、顶点、法线、颜色等信息。</p>\n</blockquote>\n<p><strong>文件头</strong><br>\n PLY 文件头包含以下信息：</p>\n<ul>\n<li>文件格式： <code>format ascii 1.0</code>  或  <code>format binary_little_endian 1.0</code>  或  <code>format binary_big_endian 1.0</code></li>\n<li>元素类型： <code>element vertex 1000</code>  或  <code>element face 1000</code></li>\n<li>属性： <code>property float x</code>  或  <code>property float y</code>  或  <code>property float z</code>  或  <code>property uchar red</code>  或  <code>property uchar green</code>  或  <code>property uchar blue</code></li>\n<li>结束： <code>end_header</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ply</code></td>\n<td>表示文件格式为 PLY。</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>指定文件格式，可以是  <code>ascii</code> 、 <code>binary_little_endian</code>  或  <code>binary_big_endian</code> 。</td>\n</tr>\n<tr>\n<td><code>comment</code></td>\n<td>表示注释，可以包含任何文本。</td>\n</tr>\n<tr>\n<td><code>element</code></td>\n<td>指定元素类型，可以是  <code>vertex</code>  或  <code>face</code> 。</td>\n</tr>\n<tr>\n<td><code>property</code></td>\n<td>指定属性，可以是  <code>float</code> 、 <code>int</code> 、 <code>uchar</code>  等。</td>\n</tr>\n<tr>\n<td><code>end_header</code></td>\n<td>表示文件头结束。</td>\n</tr>\n</tbody>\n</table>\n<p>完整实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ply</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">format</span> binary_little_endian <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>comment VCGLIB generated</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>element vertex <span class=\"token number\">15934</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>property double x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>property double y</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>property double z</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>property uchar red</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>property uchar green</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>property uchar blue</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>property uchar alpha</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>element face <span class=\"token number\">31390</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>property list uchar int vertex_indices</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>end_header</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># vertex</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token parameter variable\">-0.015828</span> <span class=\"token number\">0.011844</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">255</span> <span class=\"token number\">255</span> <span class=\"token number\">255</span> <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token parameter variable\">-0.015828</span> <span class=\"token number\">0.011844</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">255</span> <span class=\"token number\">255</span> <span class=\"token number\">255</span> <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># face (首位表示此面所有点的数量，此处是三个点索引构成的面)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">15631</span> <span class=\"token number\">15632</span> <span class=\"token number\">15633</span></pre></td></tr></table></figure><h1 id=\"open3d\"><a class=\"markdownIt-Anchor\" href=\"#open3d\">#</a> Open3D</h1>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> open3d</pre></td></tr></table></figure><h2 id=\"读取点云\"><a class=\"markdownIt-Anchor\" href=\"#读取点云\">#</a> 读取点云</h2>\n<p><code>o3d.io.read_point_cloud</code>  函数可以读取点云文件，并返回一个  <code>open3d.geometry.PointCloud</code>  对象。<br>\n函数定义如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">read_point_cloud</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> remove_nan_points<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> remove_infinite_points<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> print_progress<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Returns:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        open3d.cpu.pybind.geometry.PointCloud</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>filename</code></td>\n<td>点云文件的路径。</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>点云文件的格式，默认为  <code>auto</code> ，表示自动检测文件格式，支持 <code>pcd</code> 、 <code>ply</code> 、 <code>xyz</code>  等格式。</td>\n</tr>\n<tr>\n<td><code>remove_nan_points</code></td>\n<td>是否移除包含  <code>NaN</code>  值的点，默认为  <code>False</code> 。</td>\n</tr>\n<tr>\n<td><code>remove_infinite_points</code></td>\n<td>是否移除包含  <code>Inf</code>  值的点，默认为  <code>False</code> 。</td>\n</tr>\n<tr>\n<td><code>print_progress</code></td>\n<td>是否打印读取进度，默认为  <code>False</code> 。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.pcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"写入点云\"><a class=\"markdownIt-Anchor\" href=\"#写入点云\">#</a> 写入点云</h2>\n<p><code>o3d.io.write_point_cloud</code>  函数可以写入点云文件，并返回一个  <code>open3d.geometry.PointCloud</code>  对象。<br>\n函数定义如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">write_point_cloud</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> pointcloud<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> write_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> compressed<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> print_progress<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Returns:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        bool</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>filename</code></td>\n<td>点云文件的路径。</td>\n</tr>\n<tr>\n<td><code>pointcloud</code></td>\n<td>要写入的点云对象。</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>点云文件的格式，默认为  <code>auto</code> ，表示自动检测文件格式。</td>\n</tr>\n<tr>\n<td><code>write_ascii</code></td>\n<td>是否以 ASCII 格式写入，默认为  <code>False</code> 。</td>\n</tr>\n<tr>\n<td><code>compressed</code></td>\n<td>是否以压缩格式写入，默认为  <code>False</code> 。</td>\n</tr>\n<tr>\n<td><code>print_progress</code></td>\n<td>是否打印写入进度，默认为  <code>False</code> 。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>write_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.pcd\"</span><span class=\"token punctuation\">,</span> pcd<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"显示点云\"><a class=\"markdownIt-Anchor\" href=\"#显示点云\">#</a> 显示点云</h2>\n<p><code>o3d.visualization.draw_geometries</code>  函数可以显示点云。</p>\n<p>函数定义如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">draw_geometries</span><span class=\"token punctuation\">(</span>geometry_list<span class=\"token punctuation\">,</span> open3d_cpu_pybind_geometry_Geometry<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geometry_list</code></td>\n<td>要显示的几何对象列表。</td>\n</tr>\n<tr>\n<td><code>window_name</code></td>\n<td>窗口标题，默认为 “Open3D”。</td>\n</tr>\n<tr>\n<td><code>width</code></td>\n<td>窗口宽度，默认为 1920。</td>\n</tr>\n<tr>\n<td><code>height</code></td>\n<td>窗口高度，默认为 1080。</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td>窗口左边界，默认为 50。</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>窗口上边界，默认为 50。</td>\n</tr>\n<tr>\n<td><code>point_show_normal</code></td>\n<td>是否显示点法线，默认为 False, 如果为 True，需要事先计算点云法线</td>\n</tr>\n<tr>\n<td><code>mesh_show_wireframe</code></td>\n<td>是否显示网格线框，默认为 False。</td>\n</tr>\n<tr>\n<td><code>mesh_show_back_face</code></td>\n<td>是否显示网格背面，默认为 False。</td>\n</tr>\n<tr>\n<td><code>lookat</code></td>\n<td>相机观察点，默认为 None。</td>\n</tr>\n<tr>\n<td><code>up</code></td>\n<td>相机上方向，默认为 None。</td>\n</tr>\n<tr>\n<td><code>front</code></td>\n<td>相机前方向，默认为 None。</td>\n</tr>\n<tr>\n<td><code>zoom</code></td>\n<td>相机缩放比例，默认为 None。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.pcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pcd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> window_name<span class=\"token operator\">=</span><span class=\"token string\">\"Open3D\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"kdtree\"><a class=\"markdownIt-Anchor\" href=\"#kdtree\">#</a> KDTree</h2>\n<p><code>o3d.geometry.KDTreeFlann</code>  是 Open3D 中用于实现 k-d 树的类。k-d 树是一种用于多维空间中快速搜索最近邻点的数据结构。</p>\n<ul>\n<li><code>o3d.geometry.KDTreeFlann</code> : k-d 树类，用于实现 k-d 树。</li>\n<li><code>search_knn_vector_3d</code> ：在点云中搜索指定点的 k 个最近邻点。</li>\n<li><code>search_radius_vector_3d</code> ：在点云中搜索指定点半径内的所有点。</li>\n<li><code>search_hybrid_vector_3d</code> ：在点云中搜索指定点 k 个最近邻点和半径内的所有点。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat.pcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pcd_tree <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>KDTreeFlann<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 将点云设置为灰色</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pcd<span class=\"token punctuation\">.</span>paint_uniform_color<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 搜索某点的 K 个最近邻点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>k <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>num_k<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pcd_tree<span class=\"token punctuation\">.</span>search_knn_vector_3d<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 将最近邻点的颜色设置为红色</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所得K邻域点索引点数为：\"</span><span class=\"token punctuation\">,</span> num_k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 搜索每个点半径为 r 的所有点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pcd_tree<span class=\"token punctuation\">.</span>search_radius_vector_3d<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 将半径内的点的颜色设置为绿色</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 搜索每个点的 k 个最近邻点和半径为 r 的所有点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>k <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> idx_knn<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pcd_tree<span class=\"token punctuation\">.</span>search_hybrid_vector_3d<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 将半径内的点的颜色设置为蓝色</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pcd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> window_name<span class=\"token operator\">=</span><span class=\"token string\">\"Open3D\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"octree\"><a class=\"markdownIt-Anchor\" href=\"#octree\">#</a> Octree</h2>\n<blockquote>\n<p>八叉树（Octree）是一种用于三维空间中的数据结构，它将空间划分为 8 个子空间，每个子空间再继续划分，直到达到指定的深度。八叉树可以用于点云数据的快速搜索和可视化，例如最近邻搜索、空间分割等。</p>\n</blockquote>\n<p><img loading=\"lazy\" src=\"/images/Octree.svg\" alt=\"八叉树\"></p>\n<ul>\n<li><code>o3d.geometry.Octree(max_depth=int)</code> : 八叉树类，用于实现八叉树。\n<ul>\n<li><code>max_depth</code> ：八叉树的最大深度。</li>\n</ul>\n</li>\n<li><code>convert_from_point_cloud</code> ：将点云转换为八叉树。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat.pcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建八叉树</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>octree <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>Octree<span class=\"token punctuation\">(</span>max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 将点云转换为八叉树</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>octree<span class=\"token punctuation\">.</span>convert_from_point_cloud<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>octree<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>体素栅格构建 Octree</strong><br>\n 使用  <code>create_from_voxel_grid</code>  方法从体素栅格创建八叉树。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pcd <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>read_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat.pcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 创建一个体素栅格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>voxel_grid <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>VoxelGrid<span class=\"token punctuation\">.</span>create_from_point_cloud<span class=\"token punctuation\">(</span>pcd<span class=\"token punctuation\">,</span> voxel_size<span class=\"token operator\">=</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建八叉树</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>octree <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>Octree<span class=\"token punctuation\">(</span>max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># max_depth: 八叉树的最大深度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>octree<span class=\"token punctuation\">.</span>convert_from_voxel_grid<span class=\"token punctuation\">(</span>voxel_grid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>octree<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>K-D树</code> 和 <code>八叉树</code> 具体适用场景分析</strong>：</p>\n<ol>\n<li>K-D 树的优势场景</li>\n</ol>\n<ul>\n<li>高维数据处理</li>\n<li>高效的最近邻搜索</li>\n<li>范围查询</li>\n<li>低内存占用</li>\n</ul>\n<ol start=\"2\">\n<li>八叉树的优势场景</li>\n</ol>\n<ul>\n<li>纯 3D 空间的均匀划分</li>\n<li>体素化与多分辨率处理</li>\n<li>碰撞检测与空间占用查询</li>\n<li>点云压缩与降采样</li>\n</ul>\n<ol start=\"3\">\n<li>实际应用中的选择策略</li>\n</ol>\n<ul>\n<li>优先使用 K-D 树的情况：\n<ul>\n<li>需频繁进行最近邻搜索（如 ICP 配准、法线估计）；</li>\n<li>点云包含非空间维度信息（如颜色、强度）；</li>\n<li>数据分布不均匀，需要自适应划分提高搜索效率。</li>\n</ul>\n</li>\n<li>优先使用八叉树的情况：\n<ul>\n<li>处理纯 3D 空间数据，且需要快速划分空间（如体素化、空间索引）；</li>\n<li>涉及多分辨率分析或三维重建；</li>\n<li>需要高效的碰撞检测或空间占用查询。</li>\n</ul>\n</li>\n<li>混合使用的场景：\n<ul>\n<li>在复杂任务中，两者可结合使用。例如：</li>\n<li>先用八叉树进行粗粒度空间划分，再对每个叶节点内的点构建 K-D 树进行精细搜索；</li>\n<li>在实时 SLAM 系统中，用八叉树管理全局地图的空间索引，用 K-D 树进行局部点云的特征匹配。</li>\n</ul>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<blockquote>\n<ul>\n<li><code>K-D树</code> 更适合处理高维数据和非均匀分布的点云，在最近邻搜索和范围查询中表现优异；</li>\n<li><code>八叉树</code> 则在纯 3D 空间划分、体素化和多分辨率处理中具有天然优势。</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "3D"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/06/18/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/2025-6-18-%E4%BD%8D%E5%A7%BF%E7%9F%AB%E6%AD%A3/",
            "url": "https://zhang3399.github.io/2025/06/18/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/2025-6-18-%E4%BD%8D%E5%A7%BF%E7%9F%AB%E6%AD%A3/",
            "title": "位姿矫正",
            "date_published": "2025-06-18T02:00:00.000Z",
            "content_html": "<h1 id=\"滤波片位姿矫正系统-工业视觉检测\"><a class=\"markdownIt-Anchor\" href=\"#滤波片位姿矫正系统-工业视觉检测\">#</a> 滤波片位姿矫正系统 - 工业视觉检测</h1>\n<p>基于计算机视觉的滤波片位姿检测与矫正系统，用于工业生产中滤波片安装位置的自动化检测与调整建议。</p>\n<p><img loading=\"lazy\" src=\"/images/%E4%BD%8D%E5%A7%BF%E7%9F%AB%E6%AD%A31.webp\" alt=\"\"></p>\n<h2 id=\"项目简介\"><a class=\"markdownIt-Anchor\" href=\"#项目简介\">#</a> 项目简介</h2>\n<p>本项目是一个基于 PyQt5 和 OpenCV 的工业视觉应用，主要用于检测滤波片在安装过程中的位姿偏差（包括旋转角度和中心偏移），并提供矫正建议。系统通过图像处理算法提取滤波片轮廓，计算其相对于标准位置的偏差。</p>\n<p>项目地址：<a href=\"https://github.com/zhang3399/Pose_correction.git\">https://github.com/zhang3399/Pose_correction.git</a></p>\n<h2 id=\"核心功能\"><a class=\"markdownIt-Anchor\" href=\"#核心功能\">#</a> 核心功能</h2>\n<ul>\n<li>🖼️ ​​图像导入与处理​​：支持多种图像格式导入，实时显示处理结果</li>\n<li>📊 ​​参数化控制​​：可调节 CLAHE 对比度限制、双边滤波参数、Canny 边缘检测阈值等</li>\n<li>📐 ​​位姿精确测量​​：\n<ul>\n<li>旋转角度检测</li>\n<li>X/Y 轴中心偏移量计算</li>\n<li>自动判定位姿是否合格</li>\n</ul>\n</li>\n<li>🛠️ ​​多步骤可视化​​：完整展示从原始图像到位姿分析的整个处理流程</li>\n<li>📋 ​​结果可视化​​：在图像上直接标注检测结果和建议</li>\n</ul>\n<h2 id=\"操作指南\"><a class=\"markdownIt-Anchor\" href=\"#操作指南\">#</a> 操作指南</h2>\n<ol>\n<li>导入图像​​：点击 &quot;导入图像&quot; 按钮选择滤波片图像</li>\n<li>调整参数​​：根据图像质量微调处理参数</li>\n<li>​执行检测​​：点击 &quot;执行位姿检测&quot; 开始分析</li>\n<li>​查看结果​​：</li>\n</ol>\n<ul>\n<li>原始图像标签页：查看原始输入</li>\n<li>处理结果标签页：查看位姿分析结果</li>\n<li>处理步骤标签页：查看完整的处理流程</li>\n</ul>\n<h2 id=\"位姿检测流程\"><a class=\"markdownIt-Anchor\" href=\"#位姿检测流程\">#</a> 位姿检测流程</h2>\n<ol>\n<li>图像预处理：\n<ul>\n<li>灰度转换</li>\n<li>CLAHE 局部对比度增强</li>\n<li>双边滤波去噪</li>\n<li>形态学开运算去除小噪声</li>\n</ul>\n</li>\n<li>边缘检测：\n<ul>\n<li>使用 Canny 算法提取图像边缘</li>\n</ul>\n</li>\n<li>轮廓分析：\n<ul>\n<li>查找所有轮廓</li>\n<li>筛选出面积大于阈值的最大轮廓（假设为滤波片轮廓）</li>\n<li>计算最小外接矩形</li>\n</ul>\n</li>\n<li>位姿计算：\n<ul>\n<li>从外接矩形获取旋转角度</li>\n<li>计算轮廓中心与图像中心的偏移量</li>\n<li>调整角度表示为更直观的 0°-90° 范围</li>\n</ul>\n</li>\n</ol>\n<p><img loading=\"lazy\" src=\"/images/%E4%BD%8D%E5%A7%BF%E7%9F%AB%E6%AD%A3.webp\" alt=\"\"></p>\n",
            "tags": [
                "图像处理"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/06/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-6-13-%E5%8D%95%E9%A1%B9%E8%B4%9F%E8%BD%BD%E8%AF%86%E5%88%AB/",
            "url": "https://zhang3399.github.io/2025/06/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-6-13-%E5%8D%95%E9%A1%B9%E8%B4%9F%E8%BD%BD%E8%AF%86%E5%88%AB/",
            "title": "单项负载识别",
            "date_published": "2025-06-13T02:00:00.000Z",
            "content_html": "<p>项目地址：<a href=\"https://github.com/zhang3399/Single-phase_load_recognition\">https://github.com/zhang3399/Single-phase_load_recognition</a></p>\n<h1 id=\"项目简介\"><a class=\"markdownIt-Anchor\" href=\"#项目简介\">#</a> 项目简介</h1>\n<p>在一个单相电力线上，对电压电流数据进行录波，从波形数据上提取有效信息，通过建模 - 训练的方式，识别出电力线上正在使用的电器有哪些。</p>\n<ul>\n<li><code>utils/datasets.py</code> : 将数据集处理为输入特征和学习标签</li>\n<li><code>utils/models.py</code> : 定义 LSTM 模型</li>\n<li><code>config/params.py</code> : 配置模型参数，存储路径，识别目标等</li>\n<li><code>results/train.py</code> : 训练模型，验证集识别效果</li>\n<li><code>predict.py</code> : 使用训练好的模型进行预测</li>\n</ul>\n<h1 id=\"数据集说明\"><a class=\"markdownIt-Anchor\" href=\"#数据集说明\">#</a> 数据集说明</h1>\n<ul>\n<li>使用公开数据集：NILM 国内电器设备数据，下载地址：<a href=\"https://gitcode.com/Universal-Tool/47e33/?utm_source=article_gitcode_universal&amp;index=top&amp;type=card\">https://gitcode.com/Universal-Tool/47e33/?utm_source=article_gitcode_universal&amp;index=top&amp;type=card</a></li>\n<li>数据集结构：一个 Excel 文件包含多张表，每张表记录一个设备的电压、电流等以及操作状态记录。</li>\n</ul>\n<p>数据集包含了以下核心结构：</p>\n<ol>\n<li>设备信息：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>设备 ID</th>\n<th>设备类型</th>\n<th>工作参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YD1</td>\n<td>奥克斯风扇</td>\n<td>220V, 60W</td>\n</tr>\n<tr>\n<td>YD2</td>\n<td>美的微波炉</td>\n<td>220V, 输入 1150W, 输出 700W</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>YD11</td>\n<td>创维电视机</td>\n<td>220V, 50Hz, 150W</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>​​设备监测数据：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n<th>单位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n</tr>\n<tr>\n<td>Ic</td>\n<td>电流值</td>\n<td>0.001 A</td>\n</tr>\n<tr>\n<td>Uc</td>\n<td>电压值</td>\n<td>0.1 V</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>有功功率</td>\n<td>0.0001kW</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>周波数据：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr></tr>\n<tr>\n<td>IC001</td>\n<td>电流周波第 1 采样点</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>UC128</td>\n<td>电压周波第 128 采样点</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>​谐波数据​​</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n<th>单位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n</tr>\n<tr>\n<td>IC02</td>\n<td>2 次电流谐波含有率</td>\n<td>%</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>UC51</td>\n<td>2 次电压谐波含有率</td>\n<td>%</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"5\">\n<li>用电设备操作记录</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>时间</th>\n<th>设备</th>\n<th>工作状态</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2019-01-01 00:00:00</td>\n<td>YD1</td>\n<td>开启</td>\n<td>启动</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2019-01-01 00:00:30</td>\n<td>YD1</td>\n<td>关闭</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2019-01-01 00:00:00</td>\n<td>YD1</td>\n<td>1 档</td>\n<td>启动</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2019-01-01 00:00:30</td>\n<td>YD1</td>\n<td>2 档</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据预处理\"><a class=\"markdownIt-Anchor\" href=\"#数据预处理\">#</a> 数据预处理</h2>\n<p><strong>处理流程</strong>：</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    A<span class=\"token text string\">[原始Excel]</span> <span class=\"token arrow operator\">--></span> B<span class=\"token text string\">[时间对齐]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    B <span class=\"token arrow operator\">--></span> C<span class=\"token text string\">[状态标签编码]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    C <span class=\"token arrow operator\">--></span> D<span class=\"token text string\">[特征工程]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    D <span class=\"token arrow operator\">--></span> E<span class=\"token text string\">[训练/测试集分割]</span></pre></td></tr></table></figure><p>关键处理步骤：</p>\n<ol>\n<li>时间对齐​​：</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>start_times <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    df_device<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    df_wave<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>end_times <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    df_device<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    df_wave<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 最晚开始时间和最早结束时间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>common_start <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>start_times<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>common_end <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>end_times<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 裁剪设备、周波、谐波表到共同时间范围</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>df_device <span class=\"token operator\">=</span> df_device<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>df_device<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> common_start<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>df_device<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> common_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>df_wave <span class=\"token operator\">=</span> df_wave<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>df_wave<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> common_start<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>df_wave<span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> common_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>状态标签编码：(二分类与多分类)</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span> output_path<span class=\"token operator\">=</span><span class=\"token string\">'device_encoders.json'</span><span class=\"token punctuation\">,</span> multi_class<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    创建设备状态标签并保存映射关系</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    参数:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        df: 包含设备状态的DataFrame</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        output_path: 映射关系保存路径</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        multi_class: 是否使用多分类（默认True）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    device_cols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>col <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> df<span class=\"token punctuation\">.</span>columns <span class=\"token keyword\">if</span> col<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'YD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    device_encoders <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> device <span class=\"token keyword\">in</span> device_cols<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\"># 获取设备的所有状态</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        states <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        state_count <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> multi_class <span class=\"token keyword\">and</span> state_count <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\"># 多分类映射：为每个状态分配唯一整数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            mapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>state<span class=\"token punctuation\">:</span> i <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> state <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 状态(</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>state_count<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">种): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>states<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> → 编码: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mapping<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\"># 创建多分类标签列</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            df<span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f'is_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>mapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\"># 二分类映射：关闭→0，其他→1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            mapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"关闭\"</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> state <span class=\"token keyword\">in</span> states<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 状态(</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>state_count<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">种): </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>states<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> → 二值编码: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mapping<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\"># 创建二分类标签列</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            df<span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f'is_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>device<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>mapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        device_encoders<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mapping</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 保存映射关系为 JSON 格式</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>output_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>device_encoders<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"映射关系已保存到 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>output_path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> df</pre></td></tr></table></figure><p>二分类映射关系：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"YD10\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"1档冷风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"1档热风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"2档冷风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"2档热风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"关闭\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"YD11\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"关闭\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"打开\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>多分类映射关系：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"YD10\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"1档冷风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"1档热风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"2档冷风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"2档热风\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"关闭\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"YD11\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"关闭\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"打开\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ....</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>特征工程：<br>\n对电压、电流、周波和谐波数据与设备状态之间的相关性分析：<br>\n分析结果保存在根目录下，考虑问题场景是基于电压电流，识别运行设备，只使用开源数据集的电压电流特征数据作为特征序列。</li>\n</ol>\n<h1 id=\"模型搭建\"><a class=\"markdownIt-Anchor\" href=\"#模型搭建\">#</a> 模型搭建</h1>\n<p>考虑电压电流数据呈时间连续，设备启停在过往与当前时刻的电压电流具有相应的特征变化，因此采用时序模型。</p>\n<p><strong>核心</strong>：</p>\n<ul>\n<li>\n<p><code>LSTM</code> ：长短期记忆网络，擅长处理时间序列数据，能够捕捉时间序列中的长期依赖关系。</p>\n</li>\n<li>\n<p><code>识别方式</code> ：采用 <code>i~j</code>  组时间序列电流电压数据，识别第 <code>j</code>  组时间序列下的电器状态， <code>i~j</code>  由 <code>params.py</code>  参数 <code>WINDOW_SIZE</code>  值控制，即 <code>滑动窗口</code> ，LSTM 模型学习步长。</p>\n</li>\n</ul>\n<h2 id=\"模型训练\"><a class=\"markdownIt-Anchor\" href=\"#模型训练\">#</a> 模型训练</h2>\n<p>训练说明：</p>\n<ul>\n<li>二分类\n<ul>\n<li><code>datahandl.py</code>  处理：将 <code>df = createLabel(df, multi_class=False)</code>  改为 <code>multi_class=False</code> ，将状态标签编码为二分类标签。</li>\n<li>执行 <code>train.py</code> ：训练完成后，模型保存在 <code>results/train</code>  文件中，可执行 <code>predict.py</code>  进行推理。</li>\n</ul>\n</li>\n<li>多分类\n<ul>\n<li><code>datahandl.py</code>  处理：将 <code>df = createLabel(df, multi_class=True)</code>  改为 <code>multi_class=True</code> ，将状态标签编码为多分类标签。</li>\n<li>执行 <code>train_plus.py</code> ：可以训练，但是目前由于数据量不足，泛化能力较差，推理模块 <code>predict_plus.py</code>  暂时未实现。</li>\n</ul>\n</li>\n</ul>\n<p><strong>方案一：</strong> （二分类模型如下）</p>\n<p>模型为每个设备配置一个输出头，预测该设备是否在运行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplianceLSTM</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"多输出电器状态识别LSTM模型\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span> num_outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ApplianceLSTM<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># 减少隐藏层大小和层数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hidden_size <span class=\"token operator\">=</span> hidden_size</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>num_layers <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>num_layers<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 限制层数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># LSTM 层 - 添加 dropout</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lstm <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>LSTM<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            input_size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            self<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            self<span class=\"token punctuation\">.</span>num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            batch_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            bidirectional<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 移除双向结构减少复杂度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            dropout<span class=\"token operator\">=</span><span class=\"token number\">0.3</span> <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>num_layers <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 层间 dropout</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 简化全连接层</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 增加 dropout 比例</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>LayerNorm<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 添加批归一化</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\"># 共享特征提取，独立输出层</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>output_layers <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                nn<span class=\"token punctuation\">.</span>Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\"># 初始化隐藏状态</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        h0 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_layers<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        c0 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_layers<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\"># LSTM 前向传播</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        out<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lstm<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>h0<span class=\"token punctuation\">,</span> c0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        out <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 只取最后一个时间步的输出</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\"># 通过全连接层</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\"># 每个电器一个输出头</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>output_layer<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> output_layer <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>output_layers<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\"># 合并输出为 [batch_size, num_outputs]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>方案二：（多输出头的多类别预测）<br>\n模型为每个设备配置一个输出头，并根据设备状态数量，设计对应的输出维度。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplianceLSTM_plus</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"支持不同设备不同状态数的多输出LSTM模型\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span> states_per_device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ApplianceLSTM<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hidden_size <span class=\"token operator\">=</span> hidden_size</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>num_layers <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>num_layers<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>states_per_device <span class=\"token operator\">=</span> states_per_device  <span class=\"token comment\"># 每个设备的状态数列表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\"># LSTM 层</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lstm <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>LSTM<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            input_size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            hidden_size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            batch_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            bidirectional<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            dropout<span class=\"token operator\">=</span><span class=\"token number\">0.3</span> <span class=\"token keyword\">if</span> num_layers <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># 共享的全连接层</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>hidden_size<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>LayerNorm<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\"># 为每个设备创建独立的输出层（状态数不同）</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>output_layers <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> states<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> states <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>states_per_device</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        h0 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_layers<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        c0 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_layers<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        out<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lstm<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>h0<span class=\"token punctuation\">,</span> c0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        out <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 取最后一个时间步的输出</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\"># 每个设备独立输出（列表形式，每个元素对应一个设备的 logits）</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>layer<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> layer <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>output_layers<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> outputs</pre></td></tr></table></figure><p><strong>识别结果：</strong><br>\n由于数据体量过小，有些过拟合，存在少量将关闭状态识别为开启状态的问题。<br>\n<img loading=\"lazy\" src=\"/images/appliance_state_prediction.png\" alt=\"\"></p>\n",
            "tags": [
                "单项负载识别"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/06/01/%E5%A4%A7%E6%A8%A1%E5%9E%8B/2025-6-1-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83LoRA/",
            "url": "https://zhang3399.github.io/2025/06/01/%E5%A4%A7%E6%A8%A1%E5%9E%8B/2025-6-1-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83LoRA/",
            "title": "大模型微调LoRA",
            "date_published": "2025-06-01T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>LoRA 最早是由 Meta AI 在 2023 年 5 月 23 日在论文 &lt;&lt;LoRA: Low-Rank Adaptation of Large Language Models&gt;&gt; 中提出的，是一种用于微调大型语言模型的方法。LoRA 通过将模型的一部分参数分解为低秩矩阵，从而在微调时减少计算量和存储需求，同时保持模型的性能。</p>\n</blockquote>\n<p>解决了什么问题❔<br>\n✅大模型微调时计算量过大<br>\n✅大模型微调时存储需求过大</p>\n<p>优点👍</p>\n<table>\n<thead>\n<tr>\n<th>优点</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>避免灾难性遗忘</td>\n<td>直接修改大模型的参数会导致灾难性遗忘，LoRA 通过冻结大模型参数，保留原模型的能力</td>\n</tr>\n<tr>\n<td>快速切换</td>\n<td>任务切换只需要加载不同的 LoRA 参数即可，不需要重新训练模型</td>\n</tr>\n<tr>\n<td>存储效率高</td>\n<td>一个大模型可搭配多个 LoRA，只需要存储 LoRA 参数，不需要存储大模型参数</td>\n</tr>\n<tr>\n<td>兼容性强</td>\n<td>原始模型完全不动，多个团队可以共享同一个基础模型，只开发自己负责的 LoRA 模块</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"lora原理\"><a class=\"markdownIt-Anchor\" href=\"#lora原理\">#</a> LoRA 原理</h1>\n<p><code>LoRA</code>  的核心思想是将模型的一部分参数分解为低秩矩阵，从而在微调时减少计算量和存储需求。具体来说， <code>LoRA</code>  将模型的一部分参数分解为两个低秩矩阵，然后将这两个矩阵相乘得到微调后的参数。这样，在微调时只需要对这两个低秩矩阵进行更新，而不需要对整个模型进行更新，从而大大减少了计算量和存储需求。<br>\n示例：<br>\n模型原始参数矩阵为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>，将其分解为两个低秩矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>U</mi><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">A = UV</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>。在微调时，只需要更新 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>，而不需要更新整个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>。<br>\n变换公式如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>微调后的参数矩阵</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>原始参数矩阵</mtext><mo>+</mo><mtext>微调参数矩阵A</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>微调参数矩阵A</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>低秩矩阵U</mtext><mo>×</mo><mtext>低秩矩阵V</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\text{微调后的参数矩阵} &amp; = \\text{原始参数矩阵} + \\text{微调参数矩阵A}\\\\\n\\text{微调参数矩阵A} &amp; = \\text{低秩矩阵U} \\times \\text{低秩矩阵V}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord cjk_fallback\">微调后的参数矩阵</span></span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord cjk_fallback\">微调参数矩阵</span><span class=\"mord\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord text\"><span class=\"mord cjk_fallback\">原始参数矩阵</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord cjk_fallback\">微调参数矩阵</span><span class=\"mord\">A</span></span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord text\"><span class=\"mord cjk_fallback\">低秩矩阵</span><span class=\"mord\">U</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord cjk_fallback\">低秩矩阵</span><span class=\"mord\">V</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h1 id=\"llamacpp下载与编译\"><a class=\"markdownIt-Anchor\" href=\"#llamacpp下载与编译\">#</a> llama.cpp 下载与编译</h1>\n<p>llama.cpp 可以帮助我们转化模型 lora 微调模型为 gguf 格式，便于后续 ollama 部署。</p>\n<ol>\n<li>llama.cpp 下载</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/ggerganov/llama.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> llama.cpp</pre></td></tr></table></figure><ol start=\"2\">\n<li>llama.cpp 编译环境<br>\n创建 anaconda 虚拟环境，并安装相关依赖</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create <span class=\"token parameter variable\">-n</span> llama <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda activate llama</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> llama.cpp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-e</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>llama.cpp 编译</li>\n</ol>\n<p><strong>Linux 环境下编译：</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#直接进入工程目录 make 即可</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#CUDA 加速版编译</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token assign-left variable\">GGML_CUDA</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p><strong>windows 环境下编译：</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#Windows 平台需要安装 cmake 和 gcc，如果有没有安装的请自行百度安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cmake <span class=\"token parameter variable\">--build</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">--config</span> Release</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#CUDA 加速版编译</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> <span class=\"token parameter variable\">-DLLAMA_CUBLAS</span><span class=\"token operator\">=</span>ON</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cmake <span class=\"token parameter variable\">--build</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">--config</span> Release</pre></td></tr></table></figure><h1 id=\"lora微调\"><a class=\"markdownIt-Anchor\" href=\"#lora微调\">#</a> LoRA 微调</h1>\n<h2 id=\"1-准备数据集\"><a class=\"markdownIt-Anchor\" href=\"#1-准备数据集\">#</a> 1. 准备数据集</h2>\n<p>数据集格式为 jsonl，每行一个 json，包含以下字段：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"prompt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"response\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2-准备lora参数\"><a class=\"markdownIt-Anchor\" href=\"#2-准备lora参数\">#</a> 2. 准备 LoRA 参数</h2>\n<p>使用 <code>llama.cpp</code>  中的 <code>tools/finetune.py</code>  脚本，将原始模型参数转换为 LoRA 参数。</p>\n<style>\ntable {\n  width: 100%; \n  background-color:rgba(27, 112, 138,0.2);\n  border-collapse: collapse; /* 合并边框 */\n}\nth, td {\n  border: 1px solid #ddd; /* 浅灰色边框 */\n  padding: 10px;          /* 增加内边距 */\n  text-align: left;       /* 统一左对齐 */\n}\nth {\n  background-color: #f2f2f2; /* 表头浅灰色背景 */\n  font-weight: bold;         /* 加粗标题 */\n}\ntr:nth-child(even) {\n  background-color: #f9f9f9; /* 隔行浅色背景 */\n}\n</style>",
            "tags": [
                "LoRA"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/05/25/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/2025-5-25-%E7%9B%B8%E6%9C%BA%E9%80%89%E5%9E%8B/",
            "url": "https://zhang3399.github.io/2025/05/25/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/2025-5-25-%E7%9B%B8%E6%9C%BA%E9%80%89%E5%9E%8B/",
            "title": "相机选型",
            "date_published": "2025-05-25T02:00:00.000Z",
            "content_html": "<h1 id=\"相机选型\"><a class=\"markdownIt-Anchor\" href=\"#相机选型\">#</a> 相机选型</h1>\n<blockquote>\n<p>相机选型：需求→相机→镜头</p>\n</blockquote>\n<h2 id=\"相机\"><a class=\"markdownIt-Anchor\" href=\"#相机\">#</a> 相机</h2>\n<p><strong>步骤 1</strong>：定义应用需求（视场是起点）<br>\n先明确 3 个核心需求（决定后续所有参数）：</p>\n<ul>\n<li>视场（FOV）：要拍摄的物体最大尺寸（如检测 300mm×220mm 的零件）。</li>\n<li>检测精度：每个像素代表的实际尺寸（如 0.1mm / 像素，决定相机分辨率）。</li>\n<li>工作距离（WD）：镜头到物体的距离（如 500mm，受安装空间限制）。</li>\n</ul>\n<p><strong>步骤 2</strong>：选型相机（确定传感器，关键桥梁）<br>\n相机的核心是传感器，需通过需求推导 2 个参数：</p>\n<ul>\n<li>分辨率：像素数 = 精度视场边长<br>\n（例：视场短边 220mm，精度 0.1mm → 220/0.1=2200 像素；需预留畸变空间，一般让图像占传感器靶面 70~80%，故实际像素数需≥2200/0.75≈2933 像素）。</li>\n<li>传感器靶面尺寸：<br>\n筛选相机时，优先匹配像素数和靶面尺寸（如 1/1.7&quot; 传感器对应 6.4mm×4.8mm，支持 4000×3036 像素）。</li>\n</ul>\n<blockquote>\n<p>视场和精度决定相机分辨率，进而筛选传感器，相机选型先于镜头（因为镜头参数依赖传感器）。</p>\n</blockquote>\n<p><strong>步骤 3</strong>：选型镜头（计算焦距，依赖相机）<br>\n用步骤 2 确定的传感器尺寸（S）、步骤 1 的视场（FOV）和工作距离（WD），代入公式计算焦距：f=S×WD / FOV<br>\n（例：传感器短边 4.8mm，WD=500mm，FOV 短边 293.3mm → f≈293.34.8×500≈8.2mm，选 8mm 或 12mm 标准焦距镜头，再反向验证工作距离是否符合）。</p>\n<blockquote>\n<p>镜头焦距的计算必须基于相机的传感器尺寸，因此镜头选型依赖相机。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>视场预留冗余：实际视场建议比物体尺寸大 10~20%（应对安装误差、物体偏移）。</li>\n<li>传感器优先选 “小靶面 + 高分辨率”：在满足像素数的前提下，小靶面相机更便宜，且镜头选择更灵活（短焦距即可覆盖大视场）。</li>\n<li>焦距选标准值：计算值若为 8.2mm，优先选 8mm 或 12mm（标准焦距镜头更易采购，成本更低），再微调工作距离适配。</li>\n</ul>\n</blockquote>\n<p><strong>镜头分类：</strong></p>\n<ul>\n<li>标准镜头：焦距与视场匹配，适合近距离、小视场。</li>\n<li>长焦镜头：焦距远大于视场，适合远距离、大视场。</li>\n<li>短焦镜头：焦距远小于视场，适合近距离、大视场。</li>\n<li>超广角镜头：视场远大于焦距，适合近距离、超大视场。</li>\n</ul>\n<h2 id=\"光圈\"><a class=\"markdownIt-Anchor\" href=\"#光圈\">#</a> 光圈</h2>\n<p>光圈是镜头的重要参数，影响图像的亮度和景深。</p>\n<ul>\n<li>光圈大小：光圈越大，光线越多，图像越亮，景深越浅。</li>\n<li>光圈数值：F 数越大，光圈越小，光线越少，图像越暗，景深越深。</li>\n<li>光圈计算：光圈数值 = F 数 = 焦距 / 光圈直径。</li>\n</ul>\n<h2 id=\"光源\"><a class=\"markdownIt-Anchor\" href=\"#光源\">#</a> 光源</h2>\n<p>光源是图像质量的关键因素，需根据相机和镜头的参数选择合适的光源。<br>\n<strong>形状</strong></p>\n<ul>\n<li>环形低角度光源：适合检测物体表面纹理，如划痕、凹凸、边缘等。</li>\n<li>平行光源：适合检测物体表面颜色，如颜色差异、阴影等。</li>\n<li>点光源：适合检测物体表面形状，如尺寸、角度等。</li>\n<li>碗状漫反射光源：不会有阴影。</li>\n</ul>\n<p><strong>位置</strong></p>\n<ul>\n<li>亮视野：反射光直接进入相机视野。</li>\n<li>暗视野：零散的反射光进入相机视野。</li>\n</ul>\n",
            "tags": [
                "图像处理"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/05/22/Tool/2025-5-22-Docker/",
            "url": "https://zhang3399.github.io/2025/05/22/Tool/2025-5-22-Docker/",
            "title": "Docker",
            "date_published": "2025-05-22T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n</blockquote>\n<h1 id=\"安装docker\"><a class=\"markdownIt-Anchor\" href=\"#安装docker\">#</a> 安装 Docker</h1>\n<p>安装包下载地址：<a href=\"https://docs.docker.com\">https://docs.docker.com</a><br>\n<strong>windows 安装</strong></p>\n<ol>\n<li>启用 WSL2. 安装 Docker Desktop<br>\n 以管理员身份运行 PowerShell，输入以下命令：<br>\n启用 WSL 功能：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</pre></td></tr></table></figure><p>启用虚拟机平台：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</pre></td></tr></table></figure><ol start=\"2\">\n<li>重启计算机</li>\n<li>更新 WSL 内核</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wsl <span class=\"token parameter variable\">--update</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>设置 WSL2 为默认版本<br>\n以管理员身份运行 PowerShell，输入以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wsl --set-default-version <span class=\"token number\">2</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>安装 Docker<br>\n 双击下载的 Docker Desktop 安装包，按照提示进行安装。</li>\n<li>启动 Docker Desktop<br>\n 在开始菜单中找到 Docker Desktop，点击启动。</li>\n<li>验证安装<br>\n在 PowerShell 中输入以下命令，如果返回版本号，则表示安装成功：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p>使用命令 <code>docker version</code>  可以看到 <code>Client:</code>  和 <code>Server: </code> ，说明 Docker 已经安装成功，并启动，如果只有 <code>Client:</code> ，说明 Docker 没有启动，需要手动启动 Docker Desktop。</p>\n<h1 id=\"docker命令\"><a class=\"markdownIt-Anchor\" href=\"#docker命令\">#</a> Docker 命令</h1>\n<ol>\n<li>创建镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>镜像名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Dockerfile所在路径<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>主机端口<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>容器端口<span class=\"token operator\">></span> <span class=\"token parameter variable\">--name</span> <span class=\"token operator\">&lt;</span>容器名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>镜像名称<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>查看容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>停止容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stop <span class=\"token operator\">&lt;</span>容器名称<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"5\">\n<li>删除容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>容器名称<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"6\">\n<li>查看镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr></table></figure><ol start=\"7\">\n<li>删除镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> rmi <span class=\"token operator\">&lt;</span>镜像名称<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/05/16/tensoRT/2025-5-16-tensoRT%E5%AE%89%E8%A3%85/",
            "url": "https://zhang3399.github.io/2025/05/16/tensoRT/2025-5-16-tensoRT%E5%AE%89%E8%A3%85/",
            "title": "tensoRT安装",
            "date_published": "2025-05-16T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>tensoRT 是 NVIDIA 推出的一款深度学习推理框架，可以在 GPU 上加速深度学习模型的推理过程。</p>\n</blockquote>\n<h1 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<p>安装 tensoRT 需要先安装 CUDA 和 cuDNN。</p>\n<ul>\n<li>CUDA 下载地址：<a href=\"https://developer.nvidia.com/cuda-downloads\">https://developer.nvidia.com/cuda-downloads</a></li>\n<li>cuDNN 下载地址：<a href=\"https://developer.nvidia.com/cudnn\">https://developer.nvidia.com/cudnn</a><br>\n 安装 CUDA 需要注意选择正确的版本，CUDA 版本和 cuDNN 版本需要对应。</li>\n</ul>\n<h1 id=\"tensort安装\"><a class=\"markdownIt-Anchor\" href=\"#tensort安装\">#</a> tensoRT 安装</h1>\n<ol>\n<li>查看 CUDA 版本</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nvcc <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/nvcc_version.png\" alt=\"\"><br>\n我的是 CUDA 11.1 版本</p>\n<ol start=\"2\">\n<li>\n<p>选择 tensoRT 安装版本<br>\n tensoRT 官方下载地址：<a href=\"https://developer.nvidia.com/tensorrt/download\">https://developer.nvidia.com/tensorrt/download</a><br>\n<img loading=\"lazy\" src=\"/images/tensoRT_version.png\" alt=\"\"><br>\n 选择对应的安装版本，我是选的 <code>8.*</code>  版本， <code>7.*</code>  版本缺少后续官方最新安装教程的 <code>python.wheel</code>  文件</p>\n</li>\n<li>\n<p>下载安装包<br>\n点击同意协议<br>\n<img loading=\"lazy\" src=\"/images/tensoRT_agree.png\" alt=\"\"><br>\n选择对应的版本下载，注意支持的 CUDA 版本<br>\n<img loading=\"lazy\" src=\"/images/seleck_tensoRT_version.png\" alt=\"\"></p>\n</li>\n<li>\n<p>添加 TensoRT 库文件到环境变量</p>\n</li>\n</ol>\n<ul>\n<li>确认下载路径，将文件中的 <code>lib</code>  包文件路径添加到系统环境变量，我的是 <code>D:\\SoftwareDevelopment\\programer\\TensorRT-8.2.2.1\\lib</code> .</li>\n<li>将解压文件的 <code>bin</code> 、 <code>include</code>  目录文件复制粘贴到 <code>CUDA</code>  安装目录下的 <code>lib\\x64</code> 、 <code>include</code>  中，我 <code>CUDA</code>  安装位置在 <code>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.1</code> 。</li>\n</ul>\n<ol start=\"5\">\n<li>安装 <code>TensorRT Python wheel</code>  文件<br>\n cd 到下载的安装包路径中的 python 路径下，执行以下命令安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python.exe <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> tensorrt-8.2.2.1-cp39-none-win_amd64.whl</pre></td></tr></table></figure><p>（<strong>注意</strong>：cp39 要替换为自己安装 python 解释器的版本，可以终端执行 <code>python -version</code>  查看）</p>\n<p>启动 anaconda 虚拟环境，切换到 python3.9 环境，再次执行执行 <code>python.exe -m pip install tensorrt-8.2.2.1-cp39-none-win_amd64.whl</code> ：<br>\n<img loading=\"lazy\" src=\"/images/tensoRT_python_ok.png\" alt=\"\"><br>\n6. 检验<br>\n正常安装完成后，执行以下命令检验，如果输出 <code>8.2.2.1</code>  类似版本，则表示安装成功。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> tensort</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print<span class=\"token punctuation\">(</span>tensort.__version__<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果提示错误：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FileNotFoundError: Could not find: nvinfer_10.dll. Is it on your <span class=\"token environment constant\">PATH</span>?</pre></td></tr></table></figure><p>将 tensort 解压文件夹中 <code>lib</code>  目录中的 <code>dll</code>  后缀文件复制到 <code>bin</code>  目录中，重新执行 <code>import tensort</code>  即可。</p>\n<ol start=\"7\">\n<li>测试案例<br>\n官方 python 构建示例：<a href=\"https://docs.nvidia.com/deeplearning/tensorrt/latest/inference-library/python-api-docs.html\">https://docs.nvidia.com/deeplearning/tensorrt/latest/inference-library/python-api-docs.html</a></li>\n</ol>\n<p>下载 <code>resnet18</code>  模型，将 pytorch 模型的 <code>.pt</code>  文件转为 <code>.onnx</code>  文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">as</span> models</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> onnxruntime</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 加载 PyTorch 模型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>resnet18<span class=\"token punctuation\">(</span>weights<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 定义输入和输出张量的名称和形状</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>input_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>output_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>batch_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 将 PyTorch 模型转换为 ONNX 格式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>torch<span class=\"token punctuation\">.</span>onnx<span class=\"token punctuation\">.</span>export<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    model<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 要转换的 PyTorch 模型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 模型输入的随机张量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"resnet18.onnx\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 保存的 ONNX 模型的文件名</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    input_names<span class=\"token operator\">=</span>input_names<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 输入张量的名称</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    output_names<span class=\"token operator\">=</span>output_names<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 输出张量的名称</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    dynamic_axes<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>input_names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"batch_size\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> output_names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"batch_size\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 动态轴，即输入和输出张量可以具有不同的批次大小</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 加载 ONNX 模型</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"resnet18.onnx\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>onnx_model_graph <span class=\"token operator\">=</span> onnx_model<span class=\"token punctuation\">.</span>graph</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>onnx_session <span class=\"token operator\">=</span> onnxruntime<span class=\"token punctuation\">.</span>InferenceSession<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">.</span>SerializeToString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 使用随机张量测试 ONNX 模型</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>onnx_output <span class=\"token operator\">=</span> onnx_session<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>output_names<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>input_names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PyTorch output: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>model<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token format-spec\">5]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"ONNX output: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>onnx_output<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token format-spec\">5]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>tensoRT 构建引擎：</strong><br>\n<strong>方式 1</strong>：<br>\n使用 <code>trtexec</code>  工具</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>trtexec <span class=\"token parameter variable\">--onnx</span><span class=\"token operator\">=</span>resnet18.onnx <span class=\"token parameter variable\">--saveEngine</span><span class=\"token operator\">=</span>resnet18.engine <span class=\"token parameter variable\">--float16</span></pre></td></tr></table></figure><p><strong>方式 2：</strong><br>\n使用 <code>python</code>  脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> tensorrt <span class=\"token keyword\">as</span> trt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 加载 ONNX 模型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>onnx_file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> trt<span class=\"token punctuation\">.</span>OnnxParser<span class=\"token punctuation\">.</span>create_network<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    parser<span class=\"token operator\">=</span>trt<span class=\"token punctuation\">.</span>OnnxParser<span class=\"token punctuation\">(</span>network<span class=\"token operator\">=</span>trt<span class=\"token punctuation\">.</span>Network<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 创建一个 ONNX 解析器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    flags<span class=\"token operator\">=</span><span class=\"token number\">0</span>  <span class=\"token comment\"># 解析器标志，0 表示默认值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>onnx_file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> model_file<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 打开 ONNX 模型文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    onnx_model<span class=\"token punctuation\">.</span>deserialize<span class=\"token punctuation\">(</span>model_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 反序列化 ONNX 模型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 创建 TensorRT 引擎</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>trt_logger <span class=\"token operator\">=</span> trt<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">(</span>trt<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个 TensorRT 日志记录器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>trt_builder <span class=\"token operator\">=</span> trt<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span>trt_logger<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个 TensorRT 构建器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>trt_builder<span class=\"token punctuation\">.</span>max_batch_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 设置最大批次大小</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>trt_builder<span class=\"token punctuation\">.</span>max_workspace_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span>  <span class=\"token comment\"># 设置最大工作空间大小</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>trt_builder<span class=\"token punctuation\">.</span>fp16_mode <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 启用 FP16 模式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>trt_builder<span class=\"token punctuation\">.</span>int8_mode <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># 禁用 INT8 模式</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>trt_engine <span class=\"token operator\">=</span> trt_builder<span class=\"token punctuation\">.</span>build_cuda_engine<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 构建 TensorRT 引擎</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 保存 TensorRT 引擎</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>trt_engine_path <span class=\"token operator\">=</span> <span class=\"token string\">\"resnet18.engine\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>trt_engine<span class=\"token punctuation\">.</span>serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tofile<span class=\"token punctuation\">(</span>trt_engine_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 TensorRT 引擎序列化为字节流并保存到文件中</span></pre></td></tr></table></figure><p>使用 <code>tensoRT</code>  模型进行推理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> tensorrt <span class=\"token keyword\">as</span> trt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pycuda<span class=\"token punctuation\">.</span>driver <span class=\"token keyword\">as</span> cuda</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> pycuda<span class=\"token punctuation\">.</span>autoinit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 加载 TensorRT 引擎</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>trt_engine_path <span class=\"token operator\">=</span> <span class=\"token string\">\"resnet18.trt\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>trt_engine <span class=\"token operator\">=</span> trt<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">(</span>trt<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">(</span>trt<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>deserialize_cuda_engine<span class=\"token punctuation\">(</span>trt_engine_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 创建执行上下文</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>trt_context <span class=\"token operator\">=</span> trt_engine<span class=\"token punctuation\">.</span>create_execution_context<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 定义输入和输出张量的形状</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 分配内存</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>input_memory <span class=\"token operator\">=</span> cuda<span class=\"token punctuation\">.</span>mem_alloc<span class=\"token punctuation\">(</span>trt_engine<span class=\"token punctuation\">.</span>get_binding_shape<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> trt<span class=\"token punctuation\">.</span>volume<span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>output_memory <span class=\"token operator\">=</span> cuda<span class=\"token punctuation\">.</span>mem_alloc<span class=\"token punctuation\">(</span>trt_engine<span class=\"token punctuation\">.</span>get_binding_shape<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> trt<span class=\"token punctuation\">.</span>volume<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 准备输入数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>input_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 将输入数据复制到 GPU 内存中</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>cuda<span class=\"token punctuation\">.</span>memcpy_htod<span class=\"token punctuation\">(</span>input_memory<span class=\"token punctuation\">,</span> input_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 执行推理</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>trt_context<span class=\"token punctuation\">.</span>execute_v2<span class=\"token punctuation\">(</span>bindings<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>input_memory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>output_memory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 将输出数据从 GPU 内存中复制到主机内存中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>output_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>cuda<span class=\"token punctuation\">.</span>memcpy_dtoh<span class=\"token punctuation\">(</span>output_data<span class=\"token punctuation\">,</span> output_memory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 打印输出结果</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output_data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "tensoRT"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/04/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-4-16-Adam%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/",
            "url": "https://zhang3399.github.io/2025/04/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-4-16-Adam%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/",
            "title": "Adman梯度下降",
            "date_published": "2025-04-16T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>Adman 梯度下降算法核心思想是，对于每个参数，根据其梯度的历史信息，动态调整其学习率从而实现更快的收敛和更好的性能。Adman 梯度下降算法使用两个参数，一个是动量参数，另一个是自适应学习率参数。</p>\n<ul>\n<li>动量参数用于加速参数的更新</li>\n<li>自适应学习率参数则根据参数梯度的历史信息，动态调整参数的学习率。</li>\n</ul>\n</blockquote>\n<p>在学习 adam 梯度下降算法之前，有必要先了解一下梯度下降算法和动量梯度下降算法。</p>\n<h1 id=\"梯度下降算法\"><a class=\"markdownIt-Anchor\" href=\"#梯度下降算法\">#</a> 梯度下降算法</h1>\n<ul>\n<li><code>梯度下降算法(Gradient Descent, GD)</code>  是深度学习的核心之一，用于最小化目标函数。其基本思想是，在每次迭代中，沿着目标函数的负梯度方向更新参数，从而逐步逼近最优解。</li>\n<li><code>随机梯度下降算法(Stochastic Gradient Descent, SGD)</code>  是梯度下降算法的一种改进，它每次迭代只使用一部分样本进行计算，从而加快了训练速度。</li>\n<li><code>动量梯度下降算法(Momentum Gradient Descent, MGD)</code>  是梯度下降算法的另一种改进，它引入了动量参数，用于加速参数的更新。</li>\n<li><code>自适应学习AdaGrad算法</code> 、 <code>RMSProp算法</code> 训练过程中可以动态调整学习率，从而实现更快的收敛和更好的性能。</li>\n<li><code>Adam梯度下降算法(Adaptive Moment Estimation, Adam)</code>  是梯度下降算法的另一种改进，它结合了动量梯度下降算法和自适应学习率算法，是一种常用的优化算法。</li>\n</ul>\n<p>在此之前，复习下损失函数。</p>\n<h2 id=\"损失函数\"><a class=\"markdownIt-Anchor\" href=\"#损失函数\">#</a> 损失函数</h2>\n<p>在深度学习中，网络参数的迭代更新由损失函数的梯度决定。梯度下降算法通过计算损失函数相对于参数的梯度，然后沿着梯度的负方向更新参数，从而逐步逼近最优解。</p>\n<p>假设一个很简单的线性回归模型，输入为 <code>x</code> , 输出为 <code>y</code> ，模型参数为 <code>w</code>  和 <code>b</code> 。</p>\n<p>其模型为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mo>=</mo><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\\hat{y} = wx + b\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1944em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<p>损失函数为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mo>−</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L = \\frac{1}{2}(\\hat{y} - y)^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0074em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1944em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>梯度下降算法的更新规则为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>w</mi><mo>=</mo><mi>w</mi><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>w</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">w = w - \\eta \\frac{\\partial L}{\\partial w}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>b</mi><mo>=</mo><mi>b</mi><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>b</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">b = b - \\eta \\frac{\\partial L}{\\partial b}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> 为学习率，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>w</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial L}{\\partial w}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2251em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">L</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>b</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial L}{\\partial b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2251em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">L</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 分别为损失函数 L 对参数 w 和 b 的梯度。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>−</mo><mi>η</mi><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\theta = \\theta - \\eta \\nabla L(\\theta)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> 为参数向量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\nabla L(\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span> 为损失函数 L 对参数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> 的梯度向量。<br>\n可以看出，每次更新参数时，都会乘以一个系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span>，如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> 过大，可能会导致参数更新过大，从而错过最优解；如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> 过小，可能会导致参数更新过慢，从而收敛速度过慢。因此，选择合适的学习率是非常重要的。</p>\n<p>而且对于高维情况，普通梯度下降算法存在局限性<br>\n例如：</p>\n<ol>\n<li>\n<p>输入元素: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n</li>\n<li>\n<p>损失函数为: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(x,y) = x^2 + y^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>梯度求偏导: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial f}{\\partial x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2772em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial f}{\\partial y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4133em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial f}{\\partial x} = 2x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial f}{\\partial y} = 2y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n</li>\n<li>\n<p>更新参数：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>x</mi><mo>−</mo><mn>2</mn><mi>η</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x = x - \\eta \\frac{\\partial f}{\\partial x} = x - 2\\eta x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>y</mi><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mi>y</mi><mo>−</mo><mn>2</mn><mi>η</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y = y - \\eta \\frac{\\partial f}{\\partial y} = y - 2\\eta y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ηy</span></span></span></span></span></p>\n</li>\n</ol>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> cm</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 配置中文字体（可选）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>plt<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'font.sans-serif'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SimHei'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>plt<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'axes.unicode_minus'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 定义损失函数（示例使用二次函数）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loss_function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> y<span class=\"token operator\">**</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 计算梯度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">compute_gradient</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    dx <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dy <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>y</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> dx<span class=\"token punctuation\">,</span> dy</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 梯度下降参数设置</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>lr <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>       <span class=\"token comment\"># 学习率</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>steps <span class=\"token operator\">=</span> <span class=\"token number\">15</span>     <span class=\"token comment\"># 迭代次数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>start_point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 生成网格数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>X<span class=\"token punctuation\">,</span> Y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>meshgrid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Z <span class=\"token operator\">=</span> loss_function<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 执行梯度下降</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>start_point<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>current_x<span class=\"token punctuation\">,</span> current_y <span class=\"token operator\">=</span> start_point</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    grad_x<span class=\"token punctuation\">,</span> grad_y <span class=\"token operator\">=</span> compute_gradient<span class=\"token punctuation\">(</span>current_x<span class=\"token punctuation\">,</span> current_y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    current_x <span class=\"token operator\">-=</span> lr <span class=\"token operator\">*</span> grad_x</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    current_y <span class=\"token operator\">-=</span> lr <span class=\"token operator\">*</span> grad_y</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>current_x<span class=\"token punctuation\">,</span> current_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 转换为数组便于绘图</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>path <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>x_path<span class=\"token punctuation\">,</span> y_path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>z_path <span class=\"token operator\">=</span> loss_function<span class=\"token punctuation\">(</span>x_path<span class=\"token punctuation\">,</span> y_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># 创建三维画布</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>fig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>ax <span class=\"token operator\">=</span> fig<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> projection<span class=\"token operator\">=</span><span class=\"token string\">'3d'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\"># 绘制损失函数曲面</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>surf <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">.</span>plot_surface<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Z<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>cm<span class=\"token punctuation\">.</span>coolwarm<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                       alpha<span class=\"token operator\">=</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> linewidth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                       antialiased<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># 绘制梯度下降路径</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x_path<span class=\"token punctuation\">,</span> y_path<span class=\"token punctuation\">,</span> z_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r-o'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        markersize<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> linewidth<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        markerfacecolor<span class=\"token operator\">=</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># 添加梯度箭头</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    dx <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    dy <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    dz <span class=\"token operator\">=</span> z_path<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> z_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ax<span class=\"token punctuation\">.</span>quiver<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> z_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              dx<span class=\"token operator\">*</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> dy<span class=\"token operator\">*</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> dz<span class=\"token operator\">*</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>              color<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> arrow_length_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\"># 添加标签和标题</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'X 参数'</span><span class=\"token punctuation\">,</span> labelpad<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Y 参数'</span><span class=\"token punctuation\">,</span> labelpad<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_zlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'损失值'</span><span class=\"token punctuation\">,</span> labelpad<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'三维梯度下降过程可视化'</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">1.02</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\"># 设置观察角度</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>ax<span class=\"token punctuation\">.</span>view_init<span class=\"token punctuation\">(</span>elev<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> azim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">140</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># 显示颜色标尺</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>fig<span class=\"token punctuation\">.</span>colorbar<span class=\"token punctuation\">(</span>surf<span class=\"token punctuation\">,</span> shrink<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> aspect<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># 显示图形</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>plt<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可视化结果：<br>\n<img loading=\"lazy\" src=\"/images/%E6%A2%AF%E5%BA%A6%E6%9B%B4%E6%96%B0.webp\" alt=\"images/梯度更新.png\"></p>\n<p>缺点：</p>\n<ul>\n<li>梯度下降算法在训练过程中可能会陷入局部最小值，导致模型无法收敛到全局最优解。</li>\n<li>梯度下降算法的学习率需要手动调整，如果学习率过大，可能会导致模型在最优解附近震荡，如果学习率过小，可能会导致模型收敛速度过慢。</li>\n</ul>\n<h1 id=\"动量梯度下降算法\"><a class=\"markdownIt-Anchor\" href=\"#动量梯度下降算法\">#</a> 动量梯度下降算法</h1>\n<p>不同于上面的梯度下降算法，动量梯度下降算法引入了历史梯度信息 <code>(可以理解为保留上次梯度更新方向的一定力)</code> 。</p>\n<p>公式为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>v</mi><mo>=</mo><mi>β</mi><mi>v</mi><mo>−</mo><mi>η</mi><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v = \\beta v - \\eta \\nabla L(\\theta)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> 为历史梯度信息的保留量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> 为动量参数，取值范围为 0 到 1 之间，通常取 0.9。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> 为学习率，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\nabla L(\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span> 为损失函数 L 对参数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> 的梯度向量。<br>\n参数更新变为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>+</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">\\theta = \\theta + v\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> 为参数向量。</p>\n<p>优点：</p>\n<ul>\n<li>动量梯度下降算法可以加速参数的更新，减少训练时间。</li>\n<li>动量梯度下降算法可以避免局部最小值，提高模型的收敛速度。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>动量梯度下降算法需要手动调整 <code>动量参数</code> 和 <code>学习率</code> ，如果参数设置不当，可能会导致模型收敛速度过慢或者震荡。</li>\n</ul>\n<h1 id=\"学习率\"><a class=\"markdownIt-Anchor\" href=\"#学习率\">#</a> 学习率</h1>\n<p>学习率是梯度下降算法中最重要的参数之一，它决定了参数更新的步长。如果学习率过大，可能会导致模型在最优解附近震荡，如果学习率过小，可能会导致模型收敛速度过慢。因此，选择合适的学习率是非常重要的。</p>\n<ol>\n<li>引入变量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> (AdaGrad 算法 2011)</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>r</mi><mo>=</mo><mi>r</mi><mo>+</mo><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">r = r + \\nabla L(\\theta)^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<pre><code>重点：\n- $r$是一个变量，其值随着迭代不断增大，导致学习率下降。\n- $r$每次增加的量由计算的梯度值$\\nabla L(\\theta)$决定。\n参数更新：\n</code></pre>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>−</mo><mfrac><mi>η</mi><mrow><msqrt><mi>r</mi></msqrt><mo>+</mo><mi>ϵ</mi></mrow></mfrac><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\theta = \\theta - \\frac{\\eta}{\\sqrt{r} + \\epsilon} \\nabla L(\\theta)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0376em;vertical-align:-0.93em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.3097em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.93em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> 为防止除 0 操作，通常取一个很小的值，如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>10</mn><mrow><mo>−</mo><mn>8</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">10^{-8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span></span>。</p>\n<pre><code>这样当梯度变化较大时，$r$增加的多，学习率减小的快，当梯度变化较小时，$r$增加的少，学习减小的慢。\n</code></pre>\n<p><code>问题：</code> AdaGrad 算法<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> 值只与梯度有关，可能导致学习率过早的变小。</p>\n<ol start=\"2\">\n<li>引入变量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span></span></span></span> (RMSProp 算法 2012)</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>r</mi><mo>=</mo><mi>ρ</mi><mi>v</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>ρ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">r = \\rho v + (1 - \\rho) \\nabla L(\\theta)^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mclose\">)</span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>−</mo><mfrac><mi>η</mi><mrow><msqrt><mi>r</mi></msqrt><mo>+</mo><mi>ϵ</mi></mrow></mfrac><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\theta = \\theta - \\frac{\\eta}{\\sqrt{r} + \\epsilon} \\nabla L(\\theta)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0376em;vertical-align:-0.93em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.3097em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.93em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span></span></span></span> 为手动调节参数。</p>\n<h1 id=\"adam梯度下降算法2014\"><a class=\"markdownIt-Anchor\" href=\"#adam梯度下降算法2014\">#</a> Adam 梯度下降算法 (2014)</h1>\n<p>Adam 梯度下降算法结合了动量梯度下降算法和自适应学习率算法，是一种常用的优化算法。</p>\n<p>自适应动量：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>v</mi><mo>=</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>v</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v = \\rho_1 v + (1 - \\rho_1) \\nabla L(\\theta)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ρ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\rho_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是动量参数。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>r</mi><mo>=</mo><msub><mi>ρ</mi><mn>2</mn></msub><mi>r</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∇</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">r = \\rho_2 r + (1 - \\rho_2) \\nabla L(\\theta)^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∇</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ρ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\rho_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是自适应学习率参数。</p>\n<p>修正动量和学习率：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover accent=\"true\"><mi>v</mi><mo stretchy=\"true\">^</mo></mover><mo>=</mo><mfrac><mi>v</mi><mrow><mn>1</mn><mo>−</mo><msubsup><mi>ρ</mi><mn>1</mn><mi>t</mi></msubsup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\widehat{v} = \\frac{v}{1 - \\rho_1^t}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6706em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6706em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.0556em);margin-left:0.0556em;top:-3.4306em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"0.24em\" viewBox=\"0 0 1062 239\" preserveAspectRatio=\"none\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"/></svg></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0599em;vertical-align:-0.9523em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7754em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.0448em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9523em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover accent=\"true\"><mi>r</mi><mo stretchy=\"true\">^</mo></mover><mo>=</mo><mfrac><mi>r</mi><mrow><mn>1</mn><mo>−</mo><msubsup><mi>ρ</mi><mn>2</mn><mi>t</mi></msubsup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\widehat{r} = \\frac{r}{1 - \\rho_2^t}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6706em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6706em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.1111em);margin-left:0.1111em;top:-3.4306em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"0.24em\" viewBox=\"0 0 1062 239\" preserveAspectRatio=\"none\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"/></svg></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0599em;vertical-align:-0.9523em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7754em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.0448em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9523em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 为迭代次数，修正后使得在训练之初，动量和学习率比较大，帮助快速收敛。</p>\n<p>参数更新：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>−</mo><mfrac><mrow><mi>η</mi><mover accent=\"true\"><mi>v</mi><mo stretchy=\"true\">^</mo></mover></mrow><mrow><msqrt><mover accent=\"true\"><mi>r</mi><mo stretchy=\"true\">^</mo></mover></msqrt><mo>+</mo><mi>ϵ</mi></mrow></mfrac><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">\\theta = \\theta - \\frac{\\eta \\widehat{v}}{\\sqrt{\\widehat{r}} + \\epsilon} v \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2776em;vertical-align:-0.93em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3476em;\"><span style=\"top:-2.1897em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9203em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6706em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.1111em);margin-left:0.1111em;top:-3.4306em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"0.24em\" viewBox=\"0 0 1062 239\" preserveAspectRatio=\"none\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"/></svg></span></span></span></span></span></span></span></span><span style=\"top:-2.8803em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1197em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6706em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.0556em);margin-left:0.0556em;top:-3.4306em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"0.24em\" viewBox=\"0 0 1062 239\" preserveAspectRatio=\"none\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"/></svg></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.93em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span></p>\n",
            "tags": [
                "Adman梯度下降"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/03/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-3-20-LSTM%E9%A2%84%E6%B5%8B%E7%94%B5%E6%B1%A0SOH/",
            "url": "https://zhang3399.github.io/2025/03/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-3-20-LSTM%E9%A2%84%E6%B5%8B%E7%94%B5%E6%B1%A0SOH/",
            "title": "LSTM预测电池SOH",
            "date_published": "2025-03-20T15:07:00.000Z",
            "content_html": "<blockquote>\n<p>本文主要介绍如何使用 LSTM 预测电池的 SOH (SOC)。</p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/zhang3399/Battery-SOH-prediction\">https://github.com/zhang3399/Battery-SOH-prediction</a></p>\n<h2 id=\"1-数据集介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-数据集介绍\">#</a> 1. 数据集介绍</h2>\n<p>数据集来源于<a href=\"https://ti.arc.nasa.gov/tech/dash/groups/pcoe/prognostic-data-repository/#battery\"> https://ti.arc.nasa.gov/tech/dash/groups/pcoe/prognostic-data-repository/#battery</a></p>\n<p><strong>数据说明：</strong><br>\n一组四个锂离子电池（#5、6、7 和 18）在室温下经历了 3 种不同的操作模式（充电、放电和阻抗）。以 1.5A 的恒流（CC）模式充电，直到电池电压达到 4.2V，然后以恒压（CV）模式继续充电，直到充电电流降至 20mA。以 2A 的恒定电流（CC）水平进行放电，直到电池 5、6、7 和 18 的电池电压分别降至 2.7V、2.5V、2.2V 和 2.5V。通过电化学阻抗谱（EIS）从 0.1Hz 到 5kHz 的频率扫描进行阻抗测量。重复的充电和放电循环导致电池加速老化，而阻抗测量则提供了对随着老化过程而变化的内部电池参数的洞察。当电池达到寿命终止（EOL）标准时，实验停止，即额定容量下降 30%（从 2Ahr 降至 1.4Ahr）。该数据集可用于预测剩余电荷（对于给定的放电循环）和剩余使用寿命（RUL）。<br>\n<strong>文件清单：</strong><br>\n(项目目录下 path.xlsx 统计的充放电循环周期)</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>电池编号</th>\n<th>循环次数</th>\n<th>数据规模</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>B0005.mat</code></td>\n<td>5</td>\n<td>167</td>\n<td>15.2MB</td>\n</tr>\n<tr>\n<td><code>B0006.mat</code></td>\n<td>6</td>\n<td>167</td>\n<td>15.2MB</td>\n</tr>\n<tr>\n<td><code>B0007.mat</code></td>\n<td>7</td>\n<td>167</td>\n<td>15.3MB</td>\n</tr>\n<tr>\n<td><code>B0018.mat</code></td>\n<td>18</td>\n<td>132</td>\n<td>8.1MB</td>\n</tr>\n</tbody>\n</table>\n<p><strong>数据结构：</strong></p>\n<ul>\n<li>cycle：包含充电、放电和阻抗操作的顶层结构阵列</li>\n<li>type：充电、放电或阻抗 (charge, discharge or impedance)</li>\n<li>ambient_temperature：环境温度（摄氏度）</li>\n<li>time：周期开始的日期和时间，采用 MATLAB 日期向量格式</li>\n<li>data：包含测量值的数据结构\n<ul>\n<li>charge 充电类型字段为：\n<ul>\n<li>Voltage_measured：蓄电池端子电压（伏特）</li>\n<li>Current_measured：电池输出电流（安培）</li>\n<li>Temperature_measured：电池温度（摄氏度）</li>\n<li>Current_charge：在充电器处测量的电流（安培）</li>\n<li>Voltage_charge：在充电器处测量的电压（伏特）</li>\n<li>Time：周期的时间矢量（秒）</li>\n</ul>\n</li>\n<li>discharge 放电类型字段为：\n<ul>\n<li>Voltage_measured：蓄电池端子电压（伏特）</li>\n<li>Current_measured：电池输出电流（安培）</li>\n<li>Temperature_measured：电池温度（摄氏度）</li>\n<li>Current_charge：负载下测量的电流（安培）</li>\n<li>Voltage_charge：负载下测量的电压（伏特）</li>\n<li>Time：周期的时间矢量（秒）</li>\n<li>Capacity：放电至 2.7V 的电池容量（Ahr）</li>\n</ul>\n</li>\n<li>impedance 阻抗类型字段为：\n<ul>\n<li>Sense_current：感测支路中的电流（安培）</li>\n<li>Battery_current：电池支路中的电流（安培）</li>\n<li>Current_ratio：上述电流的比率</li>\n<li>Battery_impedance：根据原始数据计算的电池阻抗（欧姆）</li>\n<li>Rectified_impedance：校准和平滑的电池阻抗（欧姆）</li>\n<li>Re：估计电解质电阻（欧姆）</li>\n<li>Rct：估计的电荷转移电阻（欧姆）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-数据预处理\"><a class=\"markdownIt-Anchor\" href=\"#2-数据预处理\">#</a> 2. 数据预处理</h2>\n<p><strong>提取数据：</strong></p>\n<p>考虑阻抗测试数据并不是与充放电周期进行，因此，我们只考虑充放电周期数据，并将相邻的充放电周期数据合并作为一组数据。</p>\n<p>而且训练的输入特征并不是越多越好，通过 pandas 的 corr () 函数分析，发现一些特征与 SOH 相关性较低，因此我们选择一些关键特征，如充电时间、充电电流标准差、放电时间和放电容量，这些特征与 SOH 的相关性较高，分析结果采用热力图如下：<br>\n<img loading=\"lazy\" src=\"/images/%E7%89%B9%E5%BE%81%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90.webp\" alt=\"\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_operation_features</span><span class=\"token punctuation\">(</span>cycle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">## 提取单个操作的特征</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    features <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data <span class=\"token operator\">=</span> cycle<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> cycle<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'charge'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\"># 提取充电特征</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            features<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">'cc_time'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'Voltage_measured'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">4.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 恒流阶段占比</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">'current_charge_std'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'Current_measured'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">'Voltage_measured'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'Voltage_measured'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">4.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">elif</span> cycle<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'discharge'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\"># 提取放电特征</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            features<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">'discharge_duration'</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">'capacity'</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'Capacity'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 取最终放电容量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"特征提取错误: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> features</pre></td></tr></table></figure><p><strong>数据集划分方式：</strong></p>\n<ul>\n<li><code>df</code>  是划分的数据集，是上一步提取包含 5、6、7、18 号电池的特征信息。</li>\n<li><code>div_batt</code>  是用于划分训练集和测试集电池 ID 列表，这里是 [‘05’, ‘06’, ‘07’]。</li>\n<li><code>test_ratio</code>  控制划分比例</li>\n<li><code>test_new_batt</code>  是用于将全新电池作为测试集电池 ID，这里是’18’。</li>\n</ul>\n<p>函数处理返回两种验证集 <code>pd.concat(val_dfs)</code> ,  <code>final_test_df</code> 。</p>\n<ol>\n<li><code>pd.concat(val_dfs)</code>  按照将 div_batt 列表电池的后 20% 作为测试集。</li>\n<li><code>final_test_df</code>  将 <code>test_new_batt</code>  号电池作为测试集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 划分数据集为训练集和测试集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_hybrid_split</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span> div_batt<span class=\"token punctuation\">,</span> div_name<span class=\"token punctuation\">,</span> test_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> test_new_batt<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 划分数据集为训练集和测试集 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># df: 数据集</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># div_batt: 电池 ID 列表'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># div_name: 按照该属性值划分</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># test_ratio: 测试集比例（充放电周期数据前一部分为训练集，后面为测试集，保证无交叉）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># test_new_batt: 新的一组电池作为测试集（可选）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    final_test_batt <span class=\"token operator\">=</span> test_new_batt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    final_test_df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span>div_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> final_test_batt<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 其他电池内部按时间划分</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    train_dfs<span class=\"token punctuation\">,</span> val_dfs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> batt_id <span class=\"token keyword\">in</span> div_batt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        batt_data <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span>div_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> batt_id<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        split_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>batt_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> test_ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        train_part <span class=\"token operator\">=</span> batt_data<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>split_idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        val_part <span class=\"token operator\">=</span> batt_data<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>split_idx<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        train_dfs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>train_part<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        val_dfs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val_part<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span>train_dfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span>val_dfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> final_test_df</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 开始数据集的划分</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>all_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> batt_id <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'06'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 遍历电池数据 B005.mat, B006.mat, B007.mat, B0018.mat</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Processing battery </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>batt_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">...\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cycles <span class=\"token operator\">=</span> load_battery_data<span class=\"token punctuation\">(</span>batt_id<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 数据加载</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    current_cycle_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 独立维护每个电池的周期计数器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    last_charge_features <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 存储最近一次充电特征</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    initial_capacity <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> cycle <span class=\"token keyword\">in</span> cycles<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># 跳过阻抗测试</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> cycle<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'impedance'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\"># 提取基础特征</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        features <span class=\"token operator\">=</span> extract_operation_features<span class=\"token punctuation\">(</span>cycle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> cycle<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'charge'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\"># 缓存充电特征，等待后续放电配对</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            last_charge_features <span class=\"token operator\">=</span> features</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">elif</span> cycle<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'discharge'</span> <span class=\"token keyword\">and</span> last_charge_features <span class=\"token operator\">!=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#开始为放电则跳过，确保构建（充电 - 放电）周期</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> last_charge_features<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Warning: 放电周期 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>current_cycle_num<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 缺少充电数据\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\"># 合并特征</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            full_features <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">'battery_id'</span><span class=\"token punctuation\">:</span> batt_id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">'cycle'</span><span class=\"token punctuation\">:</span> current_cycle_num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token operator\">**</span>last_charge_features<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token operator\">**</span>features</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\"># 初始化容量记录</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> initial_capacity <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                initial_capacity <span class=\"token operator\">=</span> full_features<span class=\"token punctuation\">[</span><span class=\"token string\">'capacity'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"电池 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>batt_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 初始容量: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>initial_capacity<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">Ah\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\"># 计算健康指标</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            full_features<span class=\"token punctuation\">[</span><span class=\"token string\">'soh'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> full_features<span class=\"token punctuation\">[</span><span class=\"token string\">'capacity'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> initial_capacity</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            all_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>full_features<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\"># 周期计数器递增</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            current_cycle_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            last_charge_features <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 重置缓存</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\"># 转换为 DataFrame</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>all_data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>数据集划分：</strong></p>\n<p>这里可以设置 <code>train_batt_ids</code> ， <code>test_batt_ids</code> ，来选择上面提到的测试集划分方式，要取消几处可选的注释。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>df <span class=\"token operator\">=</span> create_dataset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 定义特征列（根据最新特征工程调整）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>feature_cols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'cc_time'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'current_charge_std'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'Voltage_measured'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'discharge_duration'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'capacity'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 读取 config.yaml 定义的目标列</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>target_col <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'target_col'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 按电池 ID 划分数据集（严格隔离）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>train_batt_ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'06'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'07'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 划分训练集、测试集数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># test_batt_ids = '18'  # 测试完整新电池数据（可选）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>train_df<span class=\"token punctuation\">,</span> test_df<span class=\"token punctuation\">,</span> final_test_df <span class=\"token operator\">=</span> create_hybrid_split<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                                        div_batt<span class=\"token operator\">=</span>train_batt_ids<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                                        div_name<span class=\"token operator\">=</span><span class=\"token string\">'battery_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                                        test_ratio<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'test_ratio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                                        <span class=\"token comment\"># test_new_batt=test_batt_ids   #（可选）</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                                        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># test_df = final_test_df #（可选）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 特征标准化（仅在训练数据上拟合）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>scaler <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>train_df<span class=\"token punctuation\">[</span>feature_cols<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>train_df<span class=\"token punctuation\">[</span>feature_cols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>test_df<span class=\"token punctuation\">[</span>feature_cols<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>test_df<span class=\"token punctuation\">[</span>feature_cols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实验发现，将数据的前一部分用于训练，后一部分用于测试，预测精度高一些。如果采用一组新的电池如 B0018 号则效果会略微下降，这可能是数据量还是太少的原因，模型泛化能力不足。</p>\n<h2 id=\"3-模型构建\"><a class=\"markdownIt-Anchor\" href=\"#3-模型构建\">#</a> 3. 模型构建</h2>\n<p>模型采用 LSTM（Long Short-Term Memory）网络，用于预测电池的 SOH。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BatteryLSTM</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lstm <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>LSTM<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            input_size<span class=\"token operator\">=</span>input_size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            hidden_size<span class=\"token operator\">=</span>hidden_size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            num_layers<span class=\"token operator\">=</span>num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            batch_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>hidden_size<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>dropout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        out<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>h_n<span class=\"token punctuation\">,</span> c_n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lstm<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> out</pre></td></tr></table></figure><h2 id=\"4-模型训练\"><a class=\"markdownIt-Anchor\" href=\"#4-模型训练\">#</a> 4. 模型训练</h2>\n<p>模型训练包括模型参数设置、模型训练、模型评估等步骤。<br>\n关于精度可以尝试调整模型参数，如隐藏层大小、层数、dropout 率等，以获得更好的性能。<br>\n序列长度 seq_length 不大的话，隐藏层不需要太大我习惯分别尝试为 [32, 64, 128, 256]。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">sequence_length</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">test_ratio</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">target_col</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"soh\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">model</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">input_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">hidden_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">num_layers</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">dropout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">output_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">training</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">epochs</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">batch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">learning_rate</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.001</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">patience</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr></table></figure><h2 id=\"5-模型预测\"><a class=\"markdownIt-Anchor\" href=\"#5-模型预测\">#</a> 5. 模型预测</h2>\n<p>各项指标：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> 最终模型评估指标 <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MSE: <span class=\"token number\">0.0001</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>RMSE: <span class=\"token number\">0.0090</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>MAE: <span class=\"token number\">0.0070</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>R²: <span class=\"token number\">0.9838</span></pre></td></tr></table></figure><p>预测结果：<br>\n<img loading=\"lazy\" src=\"/images/soh_trend_comparison.webp\" alt=\"\"><br>\n图片这样是因为预测的是 5、6、7 号电池的后 20% 个周期的 SOH，因为偷懒未单独对每个电池进行处理，想好看一点可以在前面讲的，将 18 号电池单独作为测试集。</p>\n",
            "tags": [
                "LSTM"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/03/19/C++/2025-3-19-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://zhang3399.github.io/2025/03/19/C++/2025-3-19-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "Lambda 表达式",
            "date_published": "2025-03-19T12:39:00.000Z",
            "content_html": "<blockquote>\n<p><code>Lambda</code>  表达式是  <code>C++11</code>  引入的一种匿名函数，允许在需要函数对象的地方直接定义一个函数，无需显式定义函数名。 <code>Lambda</code>  表达式常用于实现回调函数、临时函数、算法函数等场景。</p>\n</blockquote>\n<h1 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>Lambda 表达式的完整语法结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span> captures <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span> params <span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token operator\">-></span> return_type <span class=\"token punctuation\">&#123;</span> body <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>组成部分</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[ captures ]</code></td>\n<td>捕获列表，定义外部变量如何被  <code>Lambda</code>  访问（值捕获、引用捕获等）</td>\n</tr>\n<tr>\n<td><code>( params )</code></td>\n<td>参数列表，与普通函数参数列表一致</td>\n</tr>\n<tr>\n<td><code>mutable</code></td>\n<td>可选关键字，允许修改按值捕获的变量</td>\n</tr>\n<tr>\n<td><code>-&gt; return_type</code></td>\n<td>可选返回类型，可省略（编译器自动推导）</td>\n</tr>\n<tr>\n<td><code>&#123; body &#125;</code></td>\n<td><code>Lambda</code>  函数体</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"捕获列表capture-list\"><a class=\"markdownIt-Anchor\" href=\"#捕获列表capture-list\">#</a> 捕获列表（Capture List）</h1>\n<h2 id=\"捕获方式\"><a class=\"markdownIt-Anchor\" href=\"#捕获方式\">#</a> 捕获方式</h2>\n<table>\n<thead>\n<tr>\n<th>捕获方式</th>\n<th>语法示例</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​按值捕获</td>\n<td>[x]</td>\n<td>复制外部变量  <code>x</code>  的值到  <code>Lambda</code>  内部</td>\n</tr>\n<tr>\n<td>​按引用捕获</td>\n<td>[&amp;x]</td>\n<td>直接引用外部变量  <code>x</code></td>\n</tr>\n<tr>\n<td>​隐式按值捕获全部</td>\n<td>[=]</td>\n<td>按值捕获所有外部变量（不推荐，易导致悬空引用或性能问题）</td>\n</tr>\n<tr>\n<td>​隐式按引用捕获全部</td>\n<td>[&amp;]</td>\n<td>按引用捕获所有外部变量（不推荐，需谨慎管理生命周期）</td>\n</tr>\n<tr>\n<td>​混合捕获</td>\n<td><code>[x, &amp;y]</code></td>\n<td>按值捕获  <code>x</code> ，按引用捕获  <code>y</code></td>\n</tr>\n<tr>\n<td>​初始化捕获（C++14+）</td>\n<td>​\t <code>[z = x + 1]</code></td>\n<td>创建新变量  <code>z</code> ，其值为  <code>x + 1</code> （可用于移动语义或复杂初始化）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例代码\"><a class=\"markdownIt-Anchor\" href=\"#示例代码\">#</a> 示例代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 按值捕获 a，按引用捕获 b</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> lambda1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 隐式按引用捕获所有外部变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">auto</span> lambda2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 初始化捕获（C++14+）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">auto</span> lambda3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 2</span></pre></td></tr></table></figure><h1 id=\"参数列表parameters\"><a class=\"markdownIt-Anchor\" href=\"#参数列表parameters\">#</a> 参数列表（Parameters）</h1>\n<ul>\n<li>与普通函数参数列表一致，支持值传递、引用传递、默认参数等。</li>\n<li>​无参数时可省略： <code>[] &#123; ... &#125;</code> <br>\n<strong> 示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值传递</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引用传递</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> no_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无参数</span></pre></td></tr></table></figure><h1 id=\"mutable-关键字\"><a class=\"markdownIt-Anchor\" href=\"#mutable-关键字\">#</a> mutable 关键字</h1>\n<ul>\n<li>默认情况下，按值捕获的变量在  <code>Lambda</code>  内部是 ​不可修改 的。</li>\n<li>使用  <code>mutable</code>  后，可以修改按值捕获的变量（修改的是副本，不影响外部变量）。<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许修改按值捕获的 count（副本）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 外部 count 仍为 0</span></pre></td></tr></table></figure><h1 id=\"返回类型return-type\"><a class=\"markdownIt-Anchor\" href=\"#返回类型return-type\">#</a> 返回类型（Return Type）</h1>\n<ul>\n<li>返回类型可省略，编译器根据  <code>return</code>  语句自动推导。</li>\n<li>当函数体包含多个  <code>return</code>  语句且类型不一致时，必须显式指定返回类型。<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动推导返回类型为 int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 显式指定返回类型为 double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> divide <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"lambda-的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#lambda-的应用场景\">#</a> Lambda 的应用场景</h1>\n<h2 id=\"作为函数对象functor\"><a class=\"markdownIt-Anchor\" href=\"#作为函数对象functor\">#</a> 作为函数对象（Functor）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 降序排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"异步回调如-boostasio\"><a class=\"markdownIt-Anchor\" href=\"#异步回调如-boostasio\">#</a> 异步回调（如 Boost.Asio）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">async_read_some</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> error_code<span class=\"token operator\">&amp;</span> ec<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ec<span class=\"token punctuation\">)</span> <span class=\"token function\">handle_read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"封装局部逻辑\"><a class=\"markdownIt-Anchor\" href=\"#封装局部逻辑\">#</a> 封装局部逻辑</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">process_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>threshold<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">copy_if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h1>\n<h2 id=\"生命周期管理\"><a class=\"markdownIt-Anchor\" href=\"#生命周期管理\">#</a> 生命周期管理</h2>\n<ul>\n<li>​按引用捕获：确保被引用的对象在  <code>Lambda</code>  执行时仍然有效，避免悬空引用。</li>\n<li>​按值捕获指针：需谨慎，可能造成内存泄漏或悬空指针。</li>\n</ul>\n<h2 id=\"性能\"><a class=\"markdownIt-Anchor\" href=\"#性能\">#</a> 性能</h2>\n<ul>\n<li>小对象按值捕获更高效，大对象（如容器）建议按引用捕获（需确保生命周期）。</li>\n</ul>\n<h2 id=\"默认捕获的风险\"><a class=\"markdownIt-Anchor\" href=\"#默认捕获的风险\">#</a> 默认捕获的风险</h2>\n<ul>\n<li>避免使用 [=] 或 [&amp;]：可能导致意外捕获不需要的变量，增加维护难度。</li>\n</ul>\n<h2 id=\"lambda-与函数对象的关系\"><a class=\"markdownIt-Anchor\" href=\"#lambda-与函数对象的关系\">#</a>  <code>Lambda</code>  与函数对象的关系</h2>\n<ul>\n<li><code>Lambda</code>  本质上是编译器生成的匿名类（闭包类型）的实例。</li>\n<li>捕获的变量会成为该匿名类的成员变量。</li>\n<li>等价转换示例</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Lambda 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> lambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 编译器生成的等价类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">__AnonymousClosure</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">__AnonymousClosure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>关键点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​捕获列表</td>\n<td>明确指定需要捕获的变量，避免隐式捕获</td>\n</tr>\n<tr>\n<td>​参数列表</td>\n<td>与普通函数一致，支持多种传递方式</td>\n</tr>\n<tr>\n<td>​<strong>mutable</strong></td>\n<td>允许修改按值捕获的变量副本</td>\n</tr>\n<tr>\n<td>​返回类型</td>\n<td>可省略（自动推导）或显式指定</td>\n</tr>\n<tr>\n<td>​生命周期</td>\n<td>谨慎管理按引用捕获的变量，避免悬空引用</td>\n</tr>\n<tr>\n<td>​应用场景</td>\n<td>函数对象、异步回调、STL 算法等</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Lambda 表达式"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/03/14/C++/2025-3-14-Boost/",
            "url": "https://zhang3399.github.io/2025/03/14/C++/2025-3-14-Boost/",
            "title": "Boost",
            "date_published": "2025-03-14T10:00:00.000Z",
            "content_html": "<blockquote>\n<p><code>Boost</code>  是一个开源的 C++ 库集合，提供了许多实用的功能，如网络编程、图形界面、数学计算等。Boost 库可以与标准 C++ 库无缝集成，扩展了 C++ 的功能。</p>\n</blockquote>\n<h1 id=\"安装-boost-库\"><a class=\"markdownIt-Anchor\" href=\"#安装-boost-库\">#</a> 安装 Boost 库</h1>\n<p>通过 APT 包管理器安装 Boost 库：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 更新软件包索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 安装 Boost 核心库和开发文件（包含头文件和静态 / 动态库）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libboost-all-dev <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 验证安装（检查版本）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">boostversion</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /usr/include/boost/version.hpp <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"#define BOOST_VERSION\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $3&#125;'</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Boost 版本: <span class=\"token variable\">$boostversion</span>\"</span></pre></td></tr></table></figure><h1 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p>同步操作会阻塞当前线程，直到操作完成。异步操作则不会阻塞线程，通过回调函数在操作完成后触发。</p>\n<h2 id=\"同步\"><a class=\"markdownIt-Anchor\" href=\"#同步\">#</a> 同步</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 同步，阻塞线程 5 秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//wait () 返回，定时器资源（如系统句柄）被自动释放</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Hello,world!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>定时器</strong><br>\n <code>steady_timer</code>  是  <code>Boost.Asio</code>  提供的定时器类，用于在指定时间后执行回调函数。</p>\n<p><code>steady_timer </code> 的构造函数需要  <code>io_context</code>  参数，目的是 <strong>​显式声明</strong> 该定时器依赖 ** 的<strong>事件循环</strong>。这种设计确保类型安全，避免隐式关联导致的错误。</p>\n<p><strong>io_context 的作用</strong><br>\n <code>io_context</code>  是  <code>Boost.Asio</code>  的核心组件，负责调度以及执行所有异步（如 DNS 解析、连接、读写）和同步操作的生命周期。（如定时器、网络 I/O）。</p>\n<h2 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h2>\n<p>异步操作需要事件循环来驱动， <code>io_context::run()</code>  方法启动事件处理流程。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> a <span class=\"token comment\">/*e*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Hello,world!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 异步，不会阻塞线程，回调函数 print 会在 5 秒后执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>io.run() </code> 是异步编程的核心，负责监听操作系统异步操作（如定时器到期、网络请求完成）的完成事件，确保资源（如 <code>定时器</code> 、 <code>socket</code> ）被正确释放，并触发回调函数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">同步代码</th>\n<th style=\"text-align:center\">异步代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">​执行方式</td>\n<td style=\"text-align:center\">阻塞等待（ <code>wait()</code> ）</td>\n<td style=\"text-align:center\">非阻塞，通过回调触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​事件循环</td>\n<td style=\"text-align:center\">无需  <code>io.run()</code></td>\n<td style=\"text-align:center\">必须调用  <code>io.run()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​线程占用</td>\n<td style=\"text-align:center\">单线程阻塞</td>\n<td style=\"text-align:center\">单线程 / 多线程（由  <code>run()</code>  决定）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​适用场景</td>\n<td style=\"text-align:center\">简单、短耗时操作</td>\n<td style=\"text-align:center\">高并发、实时性要求高的场景</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>​时间点计算</strong></p>\n<ol>\n<li><strong>函数式编程</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*e*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer<span class=\"token operator\">*</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 异步等待新到期时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t<span class=\"token operator\">-></span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  t<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Final count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// Final count is 5</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>t-&gt;expires_at()</code>  返回定时器当前的到期时间点（ <code>system_clock::time_point</code>  类型）， <code>boost::asio::chrono::seconds(1)</code>  表示一个 ​时间间隔​（ <code>duration</code>  类型）。两者相加会生成新的到期时间点：</p>\n<p>这种设计允许动态调整定时器的触发时间，适用于需要重复执行任务的场景（如每隔 <code>1</code>  秒打印一次计数器）。</p>\n<p><strong>​类型匹配的底层原理</strong></p>\n<p><code>expires_at()</code>  的参数类型是  <code>system_clock::time_point</code> ，而  <code>boost::asio::chrono::seconds(1)</code>  的类型是  <code>duration</code> , 明确指定了时间单位（秒），避免了因隐式类型转换导致的单位混淆（如误用毫秒或微秒）。<br>\n <code>Boost.Asio</code>  的  <code>chrono</code>  库通过 <strong>​类型推导</strong> 和 <strong>运算符重载</strong>，自动将  <code>duration</code>  转换为  <code>time_point</code> ，确保表达式合法。<br>\n若直接使用  <code>t-&gt;expires_at(1)</code> ，编译器会报错，因为  <code>1</code>  的类型是  <code>int</code> ，无法隐式转换为  <code>time_point</code> 。</p>\n<ol start=\"2\">\n<li><strong>面向对象编程</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造函数，初始化 timer_成员和 count_成员</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">timer_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 初始化 timer_成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">count_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                                     <span class=\"token comment\">// 初始化 count_成员</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//bind () 函数将成员函数 print 绑定到当前对象上，并作为回调函数传递给 timer_.async_wait ()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        timer_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"final count is \"</span><span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count_<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            timer_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            timer_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  printer <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// final count is 5</span></pre></td></tr></table></figure><p><strong>优缺点对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">维度</th>\n<th style=\"text-align:center\">​函数式</th>\n<th style=\"text-align:center\">​面向对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">​代码简洁性</td>\n<td style=\"text-align:center\">✅ 代码简短，适合简单场景</td>\n<td style=\"text-align:center\">❌ 类定义增加代码量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​安全性</td>\n<td style=\"text-align:center\">❌ 需手动管理指针，易出错</td>\n<td style=\"text-align:center\">✅ 自动管理资源，避免悬垂指针</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​扩展性</td>\n<td style=\"text-align:center\">❌ 修改需调整参数传递链</td>\n<td style=\"text-align:center\">✅ 新增功能只需扩展类方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​异步上下文</td>\n<td style=\"text-align:center\">❌ 依赖外部变量，多线程下可能竞争</td>\n<td style=\"text-align:center\">✅ 成员变量天然隔离，适合多线程异步任务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​性能开销</td>\n<td style=\"text-align:center\">✅ 无虚函数或类结构开销</td>\n<td style=\"text-align:center\">❌ 类实例化带来微小内存开销</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>线程安全的异步任务队列（通过 Strand 串行化）</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 通过 strand_ 序列化回调函数的执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token function\">strand_</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_strand</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 初始化 strand_成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">timer1_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始化 timer1_成员</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">timer2_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始化 timer2_成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">count_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 使用 strand_串行化异步操作，bind_executor () 将异步操作绑定到 strand_上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Final count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Timer 1: \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Timer 2: \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>strand<span class=\"token operator\">&lt;</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token double-colon punctuation\">::</span>executor_type<span class=\"token operator\">></span> strand_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer1_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer2_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">int</span> count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  printer <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 创建一个新线程，执行 Lambda 表达式中的代码 (即 io.run ())</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\">// 阻塞主线程，直到 t 线程结束</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码通过多线程运行  <code>io_context </code> 的事件循环，结合  <code>strand_</code>  的序列化机制，实现了高效的事件响应与线程安全的逻辑处理。虽然有两个线程处理事件，但任务逻辑（ <code>print1</code> / <code>print2</code> ）本质上是单线程化的，因此更准确地说，这是多线程协作处理事件循环，但任务执行是序列化的。</p>\n<p><strong> <code>Lambda</code>  的捕获方式 [&amp;]</strong></p>\n<ul>\n<li>[&amp;] 表示以引用方式捕获所有外部变量。<br>\n在  <code>Lambda</code>  内部可以直接访问外部作用域的所有变量（如  <code>io</code> ），且操作的是原变量本身，而非副本。</li>\n<li>​对比其他捕获方式：<br>\n[=]：以值方式捕获（创建副本，可能影响性能）。<br>\n[io]：仅捕获 io 变量（需显式指定）。<br>\n此处 [&amp;] 简化了代码，但需确保  <code>Lambda</code>  生命周期内外部变量有效。</li>\n</ul>\n<ol>\n<li>代码的多线程机制<br>\n<strong>​线程数量与任务类型</strong><br>\n代码中通过  <code>std::thread t([&amp;]&#123; io.run(); &#125;)</code>  创建了一个工作线程，主线程也调用  <code>io.run()</code> ，因此 ​总共有两个线程运行  <code>io_context</code>  的事件循环。这两个线程会并行处理  <code>io_context</code>  中的异步操作（如定时器到期事件）。</li>\n</ol>\n<p><strong>​异步操作的并行性</strong><br>\n <code>timer1_</code>  和  <code>timer2_</code>  是独立的定时器，它们的异步等待操作会被提交到  <code>io_context</code>  的任务队列中。理论上，这两个定时器的到期事件可能被分配到不同的线程处理。但由于绑定了  <code>strand_</code> ，所有回调会被强制序列化执行，​实际表现为单线程顺序处理​。</p>\n<ol start=\"2\">\n<li>Strand 的核心作用<br>\n<strong>​线程安全与顺序保证</strong><br>\n <code>strand_ </code> 是  <code>Boost.Asio</code>  提供的一种隐式同步机制，其作用包括：</li>\n</ol>\n<p>​序列化回调执行：所有通过  <code>strand_</code>  提交的回调（如  <code>print1</code>  和  <code>print2</code> ）会按提交顺序依次执行，即使多个线程在运行  <code>io_context</code> 。<br>\n​消除数据竞争：对共享资源  <code>count_</code>  的修改（如 <code>++count_</code> ）会被限制在同一个线程上下文中，无需显式加锁。<br>\n<strong>​代码中的具体实现</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将定时器的回调函数绑定到  <code>strand_</code>  的执行器上，确保回调在  <code>strand_ </code> 的调度下运行。因此，即使两个定时器的到期事件被不同线程触发， <code>print1</code>  和  <code>print2</code>  也不会并发执行。</p>\n<ol start=\"3\">\n<li>执行流程示例<br>\n假设两个定时器同时到期：\n<ol>\n<li>​事件触发： <code>timer1_</code>  和  <code>timer2_</code>  的到期事件被提交到  <code>io_context</code> 。</li>\n<li>​线程分配：事件可能被主线程或工作线程  <code>t</code>  处理。</li>\n<li>​Strand 调度：无论哪个线程处理事件，回调函数会被  <code>strand_ </code> 序列化。例如：\n<ul>\n<li>线程 1 执行  <code>print1</code>  → 输出  <code>Timer 1: 0</code> 。</li>\n<li>线程 2 执行  <code>print2</code>  → 但需等待  <code>print1</code>  完成后才能执行，输出  <code>Timer 2: 1</code> 。</li>\n<li>最终  <code>count_</code>  会严格递增至 10，无并发问题</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h1>\n<p><strong>TCP 连接</strong></p>\n<ul>\n<li>TCP 连接是面向连接的，可靠的，基于字节流的传输层通信协议。</li>\n<li>TCP 连接需要三次握手来建立连接，四次挥手来关闭连接。</li>\n<li>TCP 连接的建立和关闭都需要消耗一定的资源，因此需要合理管理 TCP 连接。</li>\n<li>TCP 连接的建立和关闭都需要消耗一定的资源，因此需要合理管理 TCP 连接。</li>\n</ul>\n<p><strong>UDP 连接</strong></p>\n<ul>\n<li>UDP 连接是无连接的，不可靠的，基于数据报的传输层通信协议。</li>\n<li>UDP 连接不需要建立连接，只需要发送数据报即可。</li>\n<li>UDP 连接不需要关闭连接，只需要发送数据报即可。</li>\n<li>UDP 连接的建立和关闭不需要消耗资源，因此不需要管理 UDP 连接。</li>\n</ul>\n<p><strong>TCP 和 UDP 的区别</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">TCP</th>\n<th style=\"text-align:center\">UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">面向连接</td>\n<td style=\"text-align:center\">无连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可靠</td>\n<td style=\"text-align:center\">不可靠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基于字节流</td>\n<td style=\"text-align:center\">基于数据报</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要三次握手</td>\n<td style=\"text-align:center\">不需要握手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要四次挥手</td>\n<td style=\"text-align:center\">不需要挥手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建立和关闭连接需要消耗资源</td>\n<td style=\"text-align:center\">建立和关闭连接不需要消耗资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要管理连接</td>\n<td style=\"text-align:center\">不需要管理连接</td>\n</tr>\n</tbody>\n</table>\n<p><strong>TCP 和 UDP 的应用场景</strong></p>\n<ul>\n<li>TCP 连接适用于需要可靠传输的场景，如文件传输、邮件发送等。</li>\n<li>UDP 连接适用于需要快速传输的场景，如视频直播、实时游戏等。</li>\n</ul>\n<p><strong>TCP 和 UDP 的编程模型</strong></p>\n<ul>\n<li>TCP 连接的编程模型通常包括客户端和服务端两部分，客户端通过  <code>socket</code>  函数创建一个套接字，然后通过  <code>connect</code>  函数连接到服务端，然后通过  <code>send</code>  和  <code>recv</code>  函数进行数据的发送和接收，最后通过  <code>close</code>  函数关闭连接。</li>\n</ul>\n<h2 id=\"同步tcp时间服务器\"><a class=\"markdownIt-Anchor\" href=\"#同步tcp时间服务器\">#</a> 同步 TCP 时间服务器</h2>\n<ol>\n<li>命令行参数</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>argc（Argument Count）​</strong><br>\n表示命令行参数的总数量（包括程序名本身）。</p>\n<ul>\n<li>例如，若用户输入  <code>./myprogram arg1 arg2</code> ，则  <code>argc</code>  的值为 ​3​（程序名 + 2 个参数）。</li>\n</ul>\n<p>​<strong>argv[]（Argument Vector）​</strong><br>\n是一个字符串指针数组，存储所有命令行参数的具体值。</p>\n<ul>\n<li><code>argv[0]</code> ：程序自身的名称（如 “./myprogram”）。</li>\n<li><code>argv[1]</code>  ~  <code>argv[argc-1]</code> ：用户输入的其他参数。</li>\n<li><code>argv[argc]</code> ：固定为 NULL（表示数组结束）。</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数总数 argc = %d\\n\"</span><span class=\"token punctuation\">,</span> argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"argv[%d] = %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./myprogram arg1 arg2 arg3</pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数总数 argc <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ./myprogram</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg3</pre></td></tr></table></figure><ol start=\"2\">\n<li>同步 TCP 服务端</li>\n</ol>\n<blockquote>\n<p>服务端：监听端口 13 , 发送时间数据</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>time_t now <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 格式示例: \"Wed Oct  2 00:00:00 2023\\n\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 监听端口 13 (需管理员权限) 或改用其他端口如 12345</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tcp<span class=\"token double-colon punctuation\">::</span>acceptor <span class=\"token function\">acceptor</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Daytime 服务器启动，监听端口: \"</span> <span class=\"token operator\">&lt;&lt;</span> acceptor<span class=\"token punctuation\">.</span><span class=\"token function\">local_endpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            tcp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            acceptor<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞等待客户端连接</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"客户端连接: \"</span> <span class=\"token operator\">&lt;&lt;</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">remote_endpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>string message <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code ignored_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 发送时间数据后立即关闭连接</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ignored_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"异常: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>同步 TCP 客户端</li>\n</ol>\n<blockquote>\n<p>客户端：连接服务器，发送数据，接收响应，关闭连接。</p>\n</blockquote>\n<p><strong>整体流程</strong></p>\n<ul>\n<li>**​初始化 I/O 上下文：** 创建 io_context 对象，管理所有 I/O 操作。</li>\n<li>**​解析目标地址：** 将用户输入的主机名和服务名转换为具体的网络地址列表。</li>\n<li>**​创建套接字：** 准备用于通信的套接字对象。</li>\n<li>**​连接服务器：** 按地址列表尝试连接，直到成功或全部失败。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//using 导入某个变量到当前作用域 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//tcp 命名空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">//std::cerr 通常用于输出错误信息，这些信息不会被重定向到文件或管道，而是直接显示在终端上。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Usage: client &lt;host>\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 创建解析器对象，用于将 ​主机名 和 ​服务名 / 端口号 转换为具体的网络地址（IP + 端口）。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>resolver <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//io_context：绑定到同一个 I/O 上下文，确保解析操作由该上下文管理。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>resolver<span class=\"token double-colon punctuation\">::</span>results_type endpoints <span class=\"token operator\">=</span>     </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 解析用户输入的主机名和服务名，生成可能的网络端点列表。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 套接字绑定到同一个 I/O 上下文，确保其操作由该上下文管理。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> endpoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试连接到服务器。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token operator\">></span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">//read_some 函数用于从 TCP 连接中读取数据。buffer 函数用于创建一个缓冲区，用于存储读取的数据。size_t 类型表示读取的字节数。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      size_t len <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">read_some</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>error<span class=\"token double-colon punctuation\">::</span>eof<span class=\"token punctuation\">)</span> <span class=\"token comment\">//eof 表示连接已关闭。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Connection closed cleanly by peer.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">throw</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">system_error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Some other error.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//buf.data () 返回缓冲区的指针，len 表示读取的字节数。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><code>boost::asio::io_context io_context;</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建 I/O 上下文对象，管理所有底层 I/O 操作（如网络通信、定时器等）。<br>\n<strong>​原理：</strong></p>\n<ul>\n<li><code>io_context</code>  是  <code>Boost.Asio</code>  的 ​事件循环核心，负责调度和处理异步操作。<br>\n所有异步操作（如连接、读写）都需要通过它执行。</li>\n</ul>\n<ol start=\"2\">\n<li><code>tcp::resolver resolver(io_context);</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建解析器对象，用于将 ​主机名 和 ​服务名 / 端口号 转换为具体的网络地址（IP + 端口）。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>io_context</code> ：绑定到同一个 I/O 上下文，确保解析操作由该上下文管理。<br>\n<strong>​功能：</strong></li>\n<li>解析器 ( <code>resolver</code> ) 支持  <code>DNS</code>  查询，将域名（如  <code>&quot;example.com&quot;</code> ）解析为 IP 地址。</li>\n<li>将服务名（如  <code>&quot;http&quot;</code> ）解析为端口号（如  <code>80</code> ）。</li>\n</ul>\n<ol start=\"3\">\n<li><code>tcp::resolver::results_type endpoints = resolver.resolve(argv[1], &quot;cc&quot;);</code></li>\n</ol>\n<p><strong>​作用：</strong> 解析用户输入的主机名和服务名，生成可能的网络端点列表。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>argv[1]</code> ：命令行输入的主机名（如  <code>&quot;localhost&quot;</code>  或  <code>&quot;192.168.1.100&quot;</code> ）。</li>\n<li><code>&quot;cc&quot;</code> ：服务名或端口号。这里可能是自定义的服务名（需系统配置）或直接表示端口号（如  <code>&quot;12345&quot;</code> ）。<br>\n<strong>​返回值：</strong></li>\n<li><code>endpoints</code>  是一个端点列表，包含所有可能的 IP 地址和端口组合（例如  <code>IPv4</code>  和  <code>IPv6</code>  地址）。</li>\n</ul>\n<ol start=\"4\">\n<li><code>tcp::socket socket(io_context);</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建  <code>TCP</code>  套接字对象，用于与服务器通信。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>io_context</code> ：套接字绑定到同一个 I/O 上下文，确保其操作由该上下文管理。<br>\n<strong>​功能：</strong></li>\n<li>套接字是网络通信的端点，通过它可以发送和接收数据。</li>\n</ul>\n<ol start=\"5\">\n<li><code>boost::asio::connect(socket, endpoints);</code></li>\n</ol>\n<p><strong>​作用：</strong> 尝试连接到服务器。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>socket</code> ：上一步创建的套接字。</li>\n<li><code>endpoints</code> ：解析得到的端点列表。<br>\n<strong>​行为：</strong></li>\n<li>按顺序尝试连接  <code>endpoints</code>  中的每一个端点（如  <code>IPv4</code>  地址优先，失败后尝试  <code>IPv6</code> ）。</li>\n<li>当某个端点连接成功时，停止尝试。</li>\n<li>如果所有端点均连接失败，抛出异常。</li>\n</ul>\n<h2 id=\"异步tcp时间服务器\"><a class=\"markdownIt-Anchor\" href=\"#异步tcp时间服务器\">#</a> 异步 TCP 时间服务器</h2>\n<ol>\n<li><strong>主函数入口</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建 IO 上下文，管理所有异步操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    tcp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 创建 TCP 服务器实例，初始化监听</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 启动事件循环，处理异步操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>io_context</code>  是 <code>Boost.Asio</code>  的核心，负责调度异步任务。</li>\n<li><code>tcp_server</code>  初始化时会开始监听连接。</li>\n<li><code>io_context.run()</code>  会阻塞主线程，持续处理异步事件，直到所有任务完成。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>​TCP 服务器初始化（tcp_server 构造函数）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定 IPv4 地址的 13 端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始异步等待客户端连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>acceptor_</code>  初始化时绑定到本地 13 端口。</li>\n<li><code>start_accept()</code>  启动异步接受连接的过程。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>异步接受连接（start_accept）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span> tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新连接对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>                       <span class=\"token comment\">// 异步接受连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接完成时调用处理函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>tcp_connection::create</code>  创建新的连接对象，其 <code>socket</code>  由 <code>io_context</code>  管理。</li>\n<li><code>async_accept</code>  异步等待客户端连接。当有连接到来时， <code>lambda</code>  被调用，传递错误码和连接对象。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>处理新连接（handle_accept）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动数据发送流程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续监听下一个连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果没有错误，调用 <code>new_connection-&gt;start()</code>  开始处理客户端请求。</li>\n<li>无论是否出错，再次调用 <code>start_accept()</code> ，形成循环监听。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>TCP 连接处理（tcp_connection::start）</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成当前时间字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">auto</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 shared_ptr，延长对象生命周期</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步发送数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      socket_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送完成后的回调</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>make_daytime_string()</code>  生成当前时间的字符串。</li>\n<li><code>shared_from_this()</code>  确保在异步操作期间对象不会被销毁。</li>\n<li><code>async_write</code>  异步发送数据，完成后调用 <code>handle_write</code> 。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>数据发送完成处理（handle_write）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span> size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 此处可添加发送完成后的逻辑，例如关闭连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当前代码未处理发送结果，但可在此处添加错误处理或资源释放逻辑。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>生成时间字符串（make_daytime_string）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 示例输出：\"Wed May 22 15:42:36 2024\\n\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>返回的字符串末尾包含换行符，符合 Daytime 协议标准。</li>\n</ul>\n<p><strong>异步执行流程总结：​</strong></p>\n<ul>\n<li>服务器启动，监听端口 13。</li>\n<li>当客户端连接时，async_accept 完成，触发 handle_accept。</li>\n<li>无错误则调用 start () 发送时间数据。</li>\n<li>数据发送完成后，由 handle_write 处理后续逻辑（当前为空）。</li>\n<li>服务器循环调用 start_accept，持续监听新连接。</li>\n</ul>\n<p>** 关键点：**​</p>\n<ul>\n<li><strong>​生命周期管理：</strong> 通过  <code>shared_from_this()</code>  和  <code>shared_ptr</code>  确保异步操作期间对象存活。</li>\n<li><strong>​异步链式调用：</strong>  <code>async_accept</code>  → <code> handle_accept</code>  →  <code>async_write</code>  →  <code>handle_write</code>  形成异步链。</li>\n<li><strong>​端口重用：</strong> Daytime 协议使用 13 端口，需确保权限允许（Linux/Mac 可能需要 sudo 运行）。</li>\n</ul>\n<p><strong>完整代码：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 示例输出：\"Wed May 22 15:42:36 2024\\n\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_connection</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">enable_shared_from_this</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">tcp_connection</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>tcp_connection<span class=\"token operator\">></span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">static</span> pointer <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket<span class=\"token operator\">&amp;</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成当前时间字符串</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">auto</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 shared_ptr，延长对象生命周期</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步发送数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        socket_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送完成后的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span> size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 此处可添加发送完成后的逻辑，例如关闭连接</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string message_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_server</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token operator\">:</span><span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定 IPv4 地址的 13 端口</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始异步等待客户端连接</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span> tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建新连接对象</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步接受连接</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 这里的 this 指向当前 tcp_server 对象</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动数据发送流程</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续监听下一个连接</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>acceptor acceptor_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建 IO 上下文，管理所有异步操作</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    tcp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 创建 TCP 服务器实例，初始化监听</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 启动事件循环，处理异步操作</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"upd\"><a class=\"markdownIt-Anchor\" href=\"#upd\">#</a> UPD</h1>\n<h2 id=\"同步udp客户端\"><a class=\"markdownIt-Anchor\" href=\"#同步udp客户端\">#</a> 同步 UDP 客户端</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Usage: client &lt;host>\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>resolver <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>endpoint receiver_endpoint <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">*</span>resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daytime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> send_buf  <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>send_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> receiver_endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token operator\">></span> recv_buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>endpoint sender_endpoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    size_t len <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sender_endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"异步udp服务端\"><a class=\"markdownIt-Anchor\" href=\"#异步udp服务端\">#</a> 异步 UDP 服务端</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// For time_t, time and ctime;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udp_server</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">udp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buffer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_receive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>bytes_transferred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_send<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>bytes_transferred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_send</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token comment\">/*message*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>endpoint remote_endpoint_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> recv_buffer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    udp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"组合tcpudp\"><a class=\"markdownIt-Anchor\" href=\"#组合tcpudp\">#</a> 组合 TCP/UDP</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// For time_t, time and ctime;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_connection</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">enable_shared_from_this</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">tcp_connection</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>tcp_connection<span class=\"token operator\">></span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">static</span> pointer <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket<span class=\"token operator\">&amp;</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>socket_<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tcp_connection<span class=\"token double-colon punctuation\">::</span>handle_write<span class=\"token punctuation\">,</span> <span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string message_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_server</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tcp_server<span class=\"token double-colon punctuation\">::</span>handle_accept<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>acceptor acceptor_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udp_server</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token function\">udp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buffer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_receive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_send<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>      <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_send</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token comment\">/*message*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>endpoint remote_endpoint_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> recv_buffer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    tcp_server <span class=\"token function\">server1</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    udp_server <span class=\"token function\">server2</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Boost"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/03/12/Tool/2025-3-12-CMake%E4%BD%BF%E7%94%A8/",
            "url": "https://zhang3399.github.io/2025/03/12/Tool/2025-3-12-CMake%E4%BD%BF%E7%94%A8/",
            "title": "🚀 CMake项目构建",
            "date_published": "2025-03-12T07:26:00.000Z",
            "content_html": "<blockquote>\n<p>​<strong>编译环境</strong>：在 Wiondows 下，使用 VScode+WSL2+Ubuntu20.04+GCC 编译器</p>\n</blockquote>\n<hr>\n<h1 id=\"核心命令\"><a class=\"markdownIt-Anchor\" href=\"#核心命令\">#</a> 核心命令</h1>\n<h2 id=\"项目配置\"><a class=\"markdownIt-Anchor\" href=\"#项目配置\">#</a> 项目配置</h2>\n<ol>\n<li><strong> <code>cmake_minimum_required</code>   指定 <code>CMake</code>  的最小版本要求</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>project</code>   定义项目名称，并可以指定项目使用的编程语言、web 主页地址、项目版本号等</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>MyProject <span class=\"token property\">VERSION</span> <span class=\"token number\">1.0</span> LANGUAGES CXX<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong> <code>set</code>  设置变量</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#方式 1 各源文件剪枝空格间隔，并赋值给 SOURCE（变量名任取，不要重复即可）变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span> main.cpp foo.cpp bar.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#方式 2 各源文件 “；” 间隔</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span> main.cpp;foo.cpp;bar.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 使用变量，采用 $&#123;&#125; 方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>MyExecutable <span class=\"token punctuation\">$&#123;</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>指定使用 <code>c++</code>  标准</strong></li>\n</ol>\n<p>命令行编译时使用 c++ 标准，通过 <code>-std=c++11</code>  格式指定</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>g++  <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++11 <span class=\"token parameter variable\">-o</span> demo main.cpp</pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>通过 <code>set</code>  命令指定</strong></li>\n</ol>\n<p>CMake 文件指定 c++ 标准</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>通过 <code>project</code>  命令指定</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>MyProject <span class=\"token property\">VERSION</span> <span class=\"token number\">1.0</span> LANGUAGES CXX <span class=\"token property\">CXX_STANDARD</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><strong> <code>C++</code>  标准对应有宏 <code>-DCMAKE_CXX_STANDARD</code> ，通过 <code>cmake</code>  命令指定</strong></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">11</span> <span class=\"token punctuation\">..</span>  <span class=\"token comment\"># 注意，.. 表示上一级目录，指定到 CMakeLists.txt 所在的目录</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CMAKE_SOURCE_DIR</td>\n<td><code>CMakeLists.txt</code>  所在的目录</td>\n</tr>\n<tr>\n<td>CMAKE_BINARY_DIR</td>\n<td>构建目录</td>\n</tr>\n<tr>\n<td>CMAKE_CURRENT_SOURCE_DIR</td>\n<td>当前 <code>CMakeLists.txt</code>  所在的目录</td>\n</tr>\n<tr>\n<td>CMAKE_CURRENT_BINARY_DIR</td>\n<td>当前构建目录</td>\n</tr>\n<tr>\n<td>CMAKE_CURRENT_LIST_DIR</td>\n<td>当前 <code>CMakeLists.txt</code>  所在的目录</td>\n</tr>\n<tr>\n<td>PROJECT_SOURCE_DIR</td>\n<td>表示项目根目录</td>\n</tr>\n<tr>\n<td>PROJECT_BINARY_DIR</td>\n<td>表示项目构建目录</td>\n</tr>\n<tr>\n<td>PROJECT_NAME</td>\n<td>表示项目名称</td>\n</tr>\n<tr>\n<td>CMAKE_CXX_STANDARD</td>\n<td>表示 C++ 标准</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"文件管理\"><a class=\"markdownIt-Anchor\" href=\"#文件管理\">#</a> 文件管理</h2>\n<ol>\n<li><strong>指定输出路径</strong></li>\n</ol>\n<p>在 CMake 中指定可执行程序输出的路径，也有对应的宏，叫做 <code>EXECUTABLE_OUTPUT_PATH</code> ，可通过 <code>set</code>  命令指定，例如：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>HOME /home/zhang/Linux<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">EXECUTABLE_OUTPUT_PATH</span> <span class=\"token punctuation\">$&#123;</span>HOME<span class=\"token punctuation\">&#125;</span>/bin<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>第一行：定义一个变量存储一个路径</li>\n<li>第二行：将拼接好的路径赋值给 <code>EXECUTABLE_OUTPUT_PATH</code>  变量</li>\n</ul>\n<ol start=\"2\">\n<li><strong>搜索文件</strong></li>\n</ol>\n<p><code>aux_source_group</code>  查找 <code>某路径</code> 下的 <code>所有源文件</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">aux_source_group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Source Files\"</span> variable<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>Source Files</code> ：表示搜索的文件所在的目录名称</li>\n<li><code>variable</code> ：将 <code>Source Files</code>  目录下搜索到的源文件列表赋值给 <code>variable</code>  变量</li>\n</ul>\n<ol start=\"3\">\n<li><strong> <code>aux_source_group</code>  查找文件</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># aux_source_group($&#123;PROJECT_SOURCE_DIR&#125;/src SRC_LIST)  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">aux_source_group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/src SRC_LIST<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>PROJECT_SOURCE_DIR</code> ：表示项目根目录</li>\n<li><code>CMAKE_CURRENT_SOURCE_DIR</code> ：表示当前 <code>CMakeLists.txt</code>  所在的目录<br>\n搜索 <code>CMakeLists.txt</code>  所在的目录 <code>src</code>  下所有源文件，并将结果赋值给 <code>SRC_LIST</code>  变量。</li>\n</ul>\n<ol start=\"4\">\n<li><strong> <code>file</code>  查找文件</strong><br>\n使用 <code>file</code>  命令，查找某路径下的 <code>某格式文件</code></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">file</span><span class=\"token punctuation\">(</span>GLOB/GLOB_RECURSE 变量名 要搜索文件路径和文件类型<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>GLOB</code> ：表示搜索指定目录下所有文件，将满足条件的文件列表赋值给变量</li>\n<li><code>GLOB_RECURSE</code> ：表示递归搜索指定目录下所有文件，将满足条件的文件列表赋值给变量</li>\n</ul>\n<ol start=\"5\">\n<li><strong>包含头文件</strong><br>\n在编译项目源文件时，需要将源文件对应的头文件包含进来，cmake 提供了 <code>include_directories</code>  命令，用于指定头文件的搜索路径：</li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span>headpath<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr>\n<h1 id=\"构建控制\"><a class=\"markdownIt-Anchor\" href=\"#构建控制\">#</a> 构建控制</h1>\n<h2 id=\"编译选项\"><a class=\"markdownIt-Anchor\" href=\"#编译选项\">#</a> 编译选项</h2>\n<p>在 CMake 中，可以通过 <code>option</code>  命令来定义编译选项，例如：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">option</span><span class=\"token punctuation\">(</span>USE_OPENMP <span class=\"token string\">\"Use OpenMP for parallelization\"</span> <span class=\"token boolean\">ON</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>USE_OPENMP</code> ：表示编译选项的名称</li>\n<li><code>Use OpenMP for parallelization</code> ：表示编译选项的描述</li>\n</ul>\n<h2 id=\"链接控制\"><a class=\"markdownIt-Anchor\" href=\"#链接控制\">#</a> 链接控制</h2>\n<p>在 CMake 中，可以通过 <code>target_link_libraries</code>  命令来指定链接库，例如：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>&lt;TARGET<span class=\"token punctuation\">></span>  <span class=\"token namespace\">PRIVATE</span> MyLibrary<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>TARGET</code> ：需要链接库的目标</li>\n<li><code>PRIVATE</code> ：表示链接库的作用域，可以是 <code>PRIVATE</code> 、 <code>PUBLIC</code> 、 <code>INTERFACE</code>  之一</li>\n</ul>\n<hr>\n<h1 id=\"工程实践\"><a class=\"markdownIt-Anchor\" href=\"#工程实践\">#</a> 工程实践</h1>\n<h2 id=\"标准结构\"><a class=\"markdownIt-Anchor\" href=\"#标准结构\">#</a> 标准结构</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeLists.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>MyProject LANGUAGES CXX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 添加源文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span> main.cpp foo.cpp bar.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>MyExecutable <span class=\"token punctuation\">$&#123;</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 添加头文件搜索路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 添加链接库</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>MyExecutable <span class=\"token namespace\">PRIVATE</span> MyLibrary<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"构建流程\"><a class=\"markdownIt-Anchor\" href=\"#构建流程\">#</a> 构建流程</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><hr>\n<h1 id=\"动静态库\"><a class=\"markdownIt-Anchor\" href=\"#动静态库\">#</a> 动静态库</h1>\n<h2 id=\"生成静态库\"><a class=\"markdownIt-Anchor\" href=\"#生成静态库\">#</a> 生成静态库</h2>\n<p><code>add_library</code>  命令用于创建库，其语法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 静态库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>MyLibrary <span class=\"token namespace\">STATIC</span> [源文件<span class=\"token number\">1</span>] [源文件<span class=\"token number\">2</span>]<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 动态库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>MyLibrary <span class=\"token namespace\">SHARED</span>  [源文件<span class=\"token number\">1</span>] [源文件<span class=\"token number\">2</span>]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>MyLibrary</code>  为生成 <code>动静态</code> 的 <code>库名</code> ，完整动静态文件名包含三部分： <code>lib</code> + <code>库名</code>  + <code>扩展名</code></p>\n<p><code>SHARED</code> ：表示生成动态库，动态库扩展名为 <code>.so</code> (Linux)、 <code>dll</code> (Windows)</p>\n<p><code>STATIC</code> ：表示生成静态库，静态库扩展名为 <code>.a</code> (Linux)、 <code>lib</code> (Windows)</p>\n<p><code>静态库</code> 默认不具有可执行权限，所以指定静态库路径的时候不可以使用 <code>EXECUTABLE_OUTPUT_PATH</code> ，而应该使用 <code>LIBRARY_OUTPUT_PATH</code> ，这个宏对于动态库和静态库都有效。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>类别</strong></th>\n<th style=\"text-align:center\"><strong>编译</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>静态库</strong></td>\n<td style=\"text-align:center\">编译时链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>动态库</strong></td>\n<td style=\"text-align:center\">运行时链接</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"使用动静态库\"><a class=\"markdownIt-Anchor\" href=\"#使用动静态库\">#</a> 使用动静态库</h2>\n<p>链接<strong>动静态</strong>库，需要使用 <code>link_libraries</code>  命令</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">link_libraries</span><span class=\"token punctuation\">(</span>&lt;static lib<span class=\"token punctuation\">></span> [&lt;static lib<span class=\"token punctuation\">></span>...]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>参数1</code>  指定要链接静态库的名字，可以是文件全名，也可以是文件名（不带 <code>lib</code>  前缀和扩展名 <code>.a</code> ）<br>\n <code>参数2</code>  要链接的其他静态库的名字</p>\n<p>** 注意：** 如果该静态库不是系统提供的（自己制作或第三方提供静态库）可能出现找不到的情况，需要指定静态库的路径</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">link_directories</span><span class=\"token punctuation\">(</span>&lt;path<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>参数</code>  指定静态库的路径</p>\n<p><code>target_link_libraries</code>  用于将动态库链接到目标可执行文件（因此位于 <code>add_executable</code>  或 <code>add_library</code>  命令之后）</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>&lt;target<span class=\"token punctuation\">></span> [<span class=\"token namespace\">PRIVATE</span>|<span class=\"token namespace\">PUBLIC</span>|<span class=\"token namespace\">INTERFACE</span>] &lt;item<span class=\"token punctuation\">></span>...<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>&lt;target&gt;</code> ：表示目标可执行文件或库的名称<br>\n <code>[PRIVATE|PUBLIC|INTERFACE]</code> ：表示链接库的访问权限，默认为 <code>PUBLIC</code> , 可以是 <code>PRIVATE</code> 、 <code>PUBLIC</code> 、 <code>INTERFACE</code>  之一<br>\n <code>&lt;item&gt;</code> ：表示要链接的库的名称，可以是库的名称，也可以是库的路径</p>\n<p><code>动态库</code> ：具有传递性，即链接动态库的库，也会链接动态库所依赖的动态库，例如：如果 <code>动态库A</code>  链接 <code>动态库B、C</code> ， <code>动态库D</code>  链接 <code>动态库A</code> ，此时链接 <code>动态库D</code>  相当于链接了 <code>动态库B、C</code>  中定义的方法。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>A B C<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>D A<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>权限</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>PRIVATE</code></td>\n<td style=\"text-align:center\">private 后面的库仅被 link 前面的 target 中，并且终结掉，第三方库不能感知</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>PUBLIC</code></td>\n<td style=\"text-align:center\">public 后面的库会被 link 到前面的 target 中，并且里面的符号会被导出，提供给第三方</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>INTERFACE</code></td>\n<td style=\"text-align:center\">interface 后面引入的库不会被连接到前面的 target 中，只会导出符号</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"进阶技巧\"><a class=\"markdownIt-Anchor\" href=\"#进阶技巧\">#</a> 进阶技巧</h1>\n<h2 id=\"条件判断\"><a class=\"markdownIt-Anchor\" href=\"#条件判断\">#</a> 条件判断</h2>\n<p><strong> <code>if</code> </strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EXISTS <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>elseif</code> </strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EXISTS <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>foreach</code>  命令用于循环</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span>&lt;loop_var<span class=\"token punctuation\">></span> &lt;items<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &lt;commands<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">endforeach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>&lt;loop_var&gt;</code> ：表示循环变量</p>\n<h2 id=\"日志\"><a class=\"markdownIt-Anchor\" href=\"#日志\">#</a> 日志</h2>\n<p><code>message</code>  命令用于输出日志信息，其语法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>&lt;mode<span class=\"token punctuation\">></span> <span class=\"token string\">\"message to display\"</span> ...<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>&lt;mode&gt;</code> ：表示输出信息的模式，可以是 <code>（空）</code> 、 <code>STATUS</code> 、 <code>WARNING</code> 、 <code>AUTHOR_WARNING</code> 、 <code>SEND_ERROR</code> 、 <code>FATAL_ERROR</code> 、 <code>DEPRECATION</code>  之一<br>\n <code>&quot;message to display&quot;</code> ：表示要输出的信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>模式</strong></th>\n<th style=\"text-align:center\"><strong>输出信息</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">(空)</td>\n<td style=\"text-align:center\">输出重要信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">STATUS</td>\n<td style=\"text-align:center\">输出普通信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WARNING</td>\n<td style=\"text-align:center\">输出警告信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AUTHOR_WARNING</td>\n<td style=\"text-align:center\">输出作者警告信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SEND_ERROR</td>\n<td style=\"text-align:center\">输出错误信息，继续执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FATAL_ERROR</td>\n<td style=\"text-align:center\">输出错误信息，终止执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEPRECATION</td>\n<td style=\"text-align:center\">输出弃用信息</td>\n</tr>\n</tbody>\n</table>\n<p>CMake 命令行工具会在 stdout 上显示 STATUS 消息，在 stderr 上显示其他消息。CMake GUI 工具会在消息窗口中显示所有消息。</p>\n<h2 id=\"变量操作\"><a class=\"markdownIt-Anchor\" href=\"#变量操作\">#</a> 变量操作</h2>\n<p>有时候项目源文件比较多并且不再同一目录下，这些源文件需要一起编译生成可执行文件，我们可以通过 <code>file</code>  命令对各自目录下的源文件进行搜索，最后还需要做一个字符串拼接操作，关于字符串拼接可以使用 <code>set</code>  命令也可以使用 <code>list</code>  命令。</p>\n<p><strong> <code>set</code>  命令</strong><br>\n <code>set</code>  命令用于设置变量的值，其语法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 取出 $&#123;&#125; 中变量的字符串 ---> 拼接字符串 ---> 赋值给变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>&lt;变量名<span class=\"token punctuation\">></span> <span class=\"token punctuation\">$&#123;</span>变量名<span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">$&#123;</span>变量名<span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>... <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将 string1 string2... 的字符串拼接 ---> 赋值给变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>&lt;变量名<span class=\"token punctuation\">></span> string1 string2... <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>set 实际是字符串拼接，该命令是将 <code>变量名1</code> 、 <code>变量名2</code> … 的值进行拼接并赋值给 <code>变量名</code> ，如果 <code>变量名</code> 已经存在，则覆盖其值，如果 <code>变量名</code> 不存在，则创建该变量。</p>\n<p><strong> <code>list</code>  命令</strong></p>\n<p><strong>字符串拼接</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>APPEND &lt;list<span class=\"token punctuation\">></span> [args...]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>APPEND</code> ：将 <code>args</code>  字符串依次添加到 <code>list</code>  的末尾， <code>APPEND</code>  之后写法与 <code>set</code>  一致，与 <code>set</code>  命令不同的是， <code>list</code>  命令不会覆盖 <code>list</code>  的值，而是将 <code>args</code>  字符串依次添加到 <code>list</code>  的末尾。</p>\n<p><strong>字符串移除</strong><br>\n当通过 <code>file</code>  查找某个目录下的所有源文件时，其中有些使我们不需要的，例如下面的 main.cpp</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ tree</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── add.cpp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── div.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── main.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>├── mult.cpp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>└── sub.cpp</pre></td></tr></table></figure><p>其中 <code>main</code>  是测试文件，如果我们想把计算器相关的源文件生成动态库给别人使用，只需要 <code>add.cpp</code> 、 <code>div.cpp</code> 、 <code>mult.cpp</code> 、 <code>sub.cpp</code>  这四个文件，那么我们可以通过 <code>list</code>  命令将 <code>main.cpp</code>  移除。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>REMOVE_ITEM &lt;list<span class=\"token punctuation\">></span> [value...]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>REMOVE_ITEM</code> ：将 <code>list</code>  中所有 <code>value</code>  字符串移除。</p>\n<p><strong>字符串查找</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>FIND &lt;list<span class=\"token punctuation\">></span> &lt;value<span class=\"token punctuation\">></span> &lt;variable<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>FIND</code> ：在 <code>list</code>  中查找 <code>value</code>  字符串，如果找到，则将 <code>value</code>  字符串在 <code>list</code>  中的索引赋值给 <code>variable</code> ，如果未找到，则将 <code>-1</code>  赋值给 <code>variable</code> 。</p>\n<p><strong>字符串替换</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>REPLACE &lt;list<span class=\"token punctuation\">></span> &lt;value<span class=\"token punctuation\">></span> &lt;newvalue<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>REPLACE</code> ：将 <code>list</code>  中所有 <code>value</code>  字符串替换为 <code>newvalue</code>  字符串。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>命令</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n<th style=\"text-align:center\"><strong>使用示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">APPEND</td>\n<td style=\"text-align:center\">将 args 添加到列表的末尾</td>\n<td style=\"text-align:center\"><code>list(APPEND &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APPEND_STRING</td>\n<td style=\"text-align:center\">将 args 添加到列表的末尾</td>\n<td style=\"text-align:center\"><code>list(APPEND_STRING &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APPEND_UNIQUE</td>\n<td style=\"text-align:center\">将 args 添加到列表的末尾，如果 args 已经存在，则不添加</td>\n<td style=\"text-align:center\"><code>list(APPEND_UNIQUE &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CLEAR</td>\n<td style=\"text-align:center\">清除列表</td>\n<td style=\"text-align:center\"><code>list(CLEAR &lt;list&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GET</td>\n<td style=\"text-align:center\">获取列表中的元素</td>\n<td style=\"text-align:center\"><code>list(GET &lt;list&gt; [&lt;index&gt;...]  [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INSERT</td>\n<td style=\"text-align:center\">在 <code>列表</code> 中的 <code>某一位置</code> 插入 (<em>索引前插入</em>) <code>元素</code> 得到 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(INSERT &lt;list&gt; &lt;index&gt; [&lt;index&gt;...] [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LENGTH</td>\n<td style=\"text-align:center\">获取列表的长度并赋值给 <code>变量</code></td>\n<td style=\"text-align:center\"><code>list(LENGTH &lt;list&gt; &lt;variable&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POP_BACK</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中的最后一个元素获取 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(POP_BACK &lt;list&gt; [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POP_FRONT</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中的第一个元素获取 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(POP_FRONT &lt;list&gt; [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PREPEND</td>\n<td style=\"text-align:center\">将 args 添加到列表的开头</td>\n<td style=\"text-align:center\"><code>list(PREPEND &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REMOVE_AT</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中的 <code>某一位置</code> 的元素获取 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(REMOVE_AT &lt;list&gt; [&lt;index&gt;...] [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REMOVE_ITEM</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中所有 <code>value</code>  字符串</td>\n<td style=\"text-align:center\"><code>list(REMOVE_ITEM &lt;list&gt; [value...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REMOVE_DUPLICATES</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中重复的元素</td>\n<td style=\"text-align:center\"><code>list(REMOVE_DUPLICATES &lt;list&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JOIN</td>\n<td style=\"text-align:center\">将 <code>列表</code> 中的元素用 <code>连接符</code> 连接成一个 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(JOIN &lt;list&gt; &lt;glue&gt; &lt;output variable&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REVERSE</td>\n<td style=\"text-align:center\">将 <code>列表</code> 中的元素反转</td>\n<td style=\"text-align:center\"><code>list(REVERSE &lt;list&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SORT</td>\n<td style=\"text-align:center\">将 <code>列表</code> 中的元素排序</td>\n<td style=\"text-align:center\"><code>list(SORT &lt;list&gt;)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"宏定义\"><a class=\"markdownIt-Anchor\" href=\"#宏定义\">#</a> 宏定义</h2>\n<p>在程序测试中，我们经常需要定义一些宏，例如 <code>DEBUG</code> ，通过这些宏来控制程序是否打印调试信息</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"debug n=\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序通过 <code>#ifdef DEBUG</code>  判断 <code>DEBUG</code>  是否被定义，如果被定义，则打印调试信息。如果没有被定义，则不打印调试信息，该端代码相当于被注释掉了，因此无法看到日志输出。</p>\n<p>为了使得 <code>c++</code>  测试更加方便，我们可以不在代码中定义宏，在 <code>g++/gcc</code>  命令中定义宏，例如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>g++ <span class=\"token parameter variable\">-DDEBUG</span> main.cpp <span class=\"token parameter variable\">-o</span> main</pre></td></tr></table></figure><p><code>g++/gcc</code>  命令通过 <code>-D</code>  指定定义宏的名字，这样在代码中就可以使用 <code>DEBUG</code>  宏了。</p>\n<p><strong> <code>CMake</code>  中使用 <code>add_definitions</code>  定义宏</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_definitions</span><span class=\"token punctuation\">(</span>-DDEBUG<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>add_definitions</code>  命令用于定义宏，其中 <code>-D</code>  是 <code>g++/gcc</code>  命令的参数， <code>DEBUG</code>  是宏的名字。</p>\n<h2 id=\"嵌套cmake\"><a class=\"markdownIt-Anchor\" href=\"#嵌套cmake\">#</a> 嵌套 CMake</h2>\n<p>在 Linux 的目录是树状结构，所以嵌套 CMake 也是树状结构，最顶层的 CMakeLists.txt 文件称为 <code>根节点</code> ，其他 CMakeLists.txt 文件称为 <code>子节点</code> 。需要了解关于 <code>CMakeLists.txt</code>  的几个信息：</p>\n<ul>\n<li>根节点的 <code>CMakeLists.txt</code>  中定义变量全局有效。</li>\n<li>父节点的 <code>CMakeLists.txt</code>  中定义的变量，子节点可以访问。</li>\n<li>子节点的 <code>CMakeLists.txt</code>  中定义的变量，父节点无法访问。</li>\n</ul>\n<p><strong>添加子目录</strong><br>\n CMake 中父子节点是如何建立的？</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_subdirectory</span><span class=\"token punctuation\">(</span>source_dir [binary_dir] [<span class=\"token property\">EXCLUDE_FROM_ALL</span>]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>source_dir</code> : 子目录的路径，<br>\n <code>binary_dir</code> : 指定输出文件的路径，一般不需要指定，默认即可。<br>\n <code>EXCLUDE_FROM_ALL</code> : 在子路径下的目标默认不会被包含到父路径的 <code>ALL</code>  目标中，并且也会排除在 IDE 工程文件之外。用户必须显式构建在子路径下的目标。</p>\n<p><strong>获取父目录的路径</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">get_filename_component</span><span class=\"token punctuation\">(</span>PARENT_DIR <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span> PATH<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>get_filename_component</code>  命令用于获取文件路径，其中 <code>PARENT_DIR</code>  是变量名， <code>$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</code>  是当前目录的路径， <code>PATH</code>  表示获取路径。</p>\n",
            "tags": [
                "CMake"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/03/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-3-9-%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2YOLOv5s/",
            "url": "https://zhang3399.github.io/2025/03/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-3-9-%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2YOLOv5s/",
            "title": "树莓派部署YOLOv5s",
            "date_published": "2025-03-09T15:07:00.000Z",
            "content_html": "<blockquote>\n<p>​<strong>环境配置方式</strong>：🚀 整个过程采用远程的方式，记录树莓派部署 <code>YOLOv5s</code>  的过程。</p>\n</blockquote>\n<p>准备：</p>\n<ul>\n<li>树莓派 5-4B</li>\n<li>树莓派系统（安装的官方 64 位系统）</li>\n<li>USB 摄像头</li>\n</ul>\n<hr>\n<h1 id=\"获取yolov5spt权值文件\"><a class=\"markdownIt-Anchor\" href=\"#获取yolov5spt权值文件\">#</a> 获取 yolov5s.pt 权值文件</h1>\n<p>使用的是轻量的 <code>yolov5s</code>  模型，在本地训练后，通过命令发送发到树莓派上:</p>\n<ol>\n<li>首先查看树莓派地址：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ifconfig</span>  <span class=\"token comment\"># 查看地址</span></pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/13.webp\" alt=\"\"><br>\n连接的 wify，可以看到所属的地址端口。</p>\n<ol start=\"2\">\n<li>将本地训练好的 <code>yolov5s.pt</code>  权值文件发送到树莓派上：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> yolov5s.pt <span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">></span>@<span class=\"token operator\">&lt;</span>树莓派地址<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>保存文件地址<span class=\"token operator\">></span></pre></td></tr></table></figure><hr>\n<h1 id=\"树莓派环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#树莓派环境搭建\">#</a> 树莓派环境搭建</h1>\n<p>本打算参考其他博主的方法，将 <code>pt</code>  权值文件转为 <code>ONNX</code>  再利用 <code>OpenVINO</code>  转为 IR 模型部署到树莓派上。</p>\n<p>在本地成功得到 <code>IR</code>  模型后，树莓派配置 <code>OpenVINO</code>  环境加速推理时，遇到问题有点多😤，准备有空再进行尝试。</p>\n<p>树莓派中运行 yolov5s 的环境使用 <code>Anaconda</code>  配置和管理，步骤如下：</p>\n<ul>\n<li>安装 Anaconda</li>\n<li>创建虚拟环境</li>\n<li>下载 yolov5 源码</li>\n<li>安装依赖库</li>\n</ul>\n<ol>\n<li>安装 Anaconda🌱<br>\n下载并安装 Anaconda 以管理 Python 环境，分别在终端执行：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">bash</span> Anaconda3-2021.05-Linux-x86_64.sh</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建虚拟环境并安装 YOLOv5 🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create <span class=\"token parameter variable\">-n</span> yolov5 <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.9</span> <span class=\"token parameter variable\">-y</span>                <span class=\"token comment\"># 创建名为 yolov5 的虚拟环境，并指定 Python 版本为 3.9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    conda activate yolov5                               <span class=\"token comment\"># 激活虚拟环境</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">git</span> clone https://github.com/ultralytics/yolov5.git <span class=\"token comment\"># 克隆 YOLOv5 源码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">cd</span> yolov5</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt                     <span class=\"token comment\"># 安装 YOLOv5 所需的依赖库</span></pre></td></tr></table></figure><hr>\n<h1 id=\"检测图片\"><a class=\"markdownIt-Anchor\" href=\"#检测图片\">#</a> 检测图片</h1>\n<ol>\n<li>运行程序🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python detect.py <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token parameter variable\">--weights</span> yolov5s.pt <span class=\"token punctuation\">\\</span>   <span class=\"token comment\"># 没有准备可省略该行，自动下载官方权值文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token parameter variable\">--img</span> <span class=\"token number\">320</span> <span class=\"token punctuation\">\\</span>              <span class=\"token comment\"># 指定图片大小，压缩图片，加快检测速度，但是清晰度降低</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token parameter variable\">--source</span> /image/1.jpg <span class=\"token punctuation\">\\</span>  <span class=\"token comment\"># 指定图片路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token parameter variable\">--device</span> cpu <span class=\"token punctuation\">\\</span>           <span class=\"token comment\"># 使用 cpu 进行推理</span></pre></td></tr></table></figure><p>使用的 cpu 进行推理，速度较慢，看资料显示树莓派也是有 GPU 的，但是因为树莓派 GPU 的算力太低，所以还是使用 cpu 进行推理，如果想使用 GPU 进行推理，需要安装 <code>CUDA</code> ，而且树莓派安装 <code>CUDA</code>  比较麻烦。</p>\n<ol start=\"2\">\n<li>检测效果如下🌱：</li>\n</ol>\n<p><img loading=\"lazy\" src=\"/images/12.webp\" alt=\"\"></p>\n<hr>\n<h1 id=\"开启摄像头实时检测\"><a class=\"markdownIt-Anchor\" href=\"#开启摄像头实时检测\">#</a> 开启摄像头实时检测</h1>\n<p>🍋检测视频流，遇到无法弹出实时检测界面，这让之前的工作毫无成就感😳，之后通过安装 <code>lightdm</code>  来解决的。</p>\n<p><code>lightdm</code>  能够提供图形界面服务，使  <code>OpenCV</code>   <code>cv2.imshow()</code>  能通过  <code>VNC</code>  的虚拟显示端口渲染窗口。</p>\n<ol>\n<li>安装 <code>lightdm</code> 🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> lightdm                <span class=\"token comment\"># 安装图形界面管理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">sudo</span> dpkg-reconfigure lightdm          <span class=\"token comment\"># 绑定显示服务到 VNC</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">sudo</span> systemctl restart lightdm          <span class=\"token comment\"># 重启服务使配置生效</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>查看摄像头🌱<br>\n使用 <code>v4l2-ctl</code>  指令查看所有视频设备</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4l2-ctl --list-devices</pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/11.webp\" alt=\"\"></p>\n<p>可以看到识别到的 USB 摄像头 <code>/dev/video0</code> 、 <code>/dev/video1</code> ，使用 <code>0</code>  作为 <code>source</code>  参数。</p>\n<ol start=\"3\">\n<li>运行程序🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python detect.py <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token parameter variable\">--weights</span> yolov5s.pt <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token parameter variable\">--source</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span>             <span class=\"token comment\"># 使用摄像头（0 表示第一个摄像头）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    --view-img <span class=\"token punctuation\">\\</span>             <span class=\"token comment\"># 启用实时画面显示 --img-size 320</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token parameter variable\">--device</span> cpu</pre></td></tr></table></figure><ol start=\"4\">\n<li>检测效果如下🌱：</li>\n</ol>\n<video width=\"100%\" controls loading=\"lazy\">\n  <source src=\"/videos/2.mp4\" type=\"video/mp4\">\n</video>\n<p>🍀由于树莓派不支持 GPU，所以速度并不快，下面尝试使用 <code>OpenCV</code>  的 <code>dnn</code>  模块进行推理，将模型转为 <code>ONNX</code>  格式，再使用 <code>OpenCV</code>  进行推理，速度会快很多。</p>\n<h1 id=\"onnx推理c\"><a class=\"markdownIt-Anchor\" href=\"#onnx推理c\">#</a> onnx 推理（C++）</h1>\n<h2 id=\"安装opencv\"><a class=\"markdownIt-Anchor\" href=\"#安装opencv\">#</a> 安装 Opencv</h2>\n<p><strong>安装 Opencv 参考链接：</strong><a href=\"https://blog.csdn.net/weixin_53877178/article/details/127938403\">安装 OpenCV</a></p>\n<h2 id=\"获取yolov5spt权值文件-2\"><a class=\"markdownIt-Anchor\" href=\"#获取yolov5spt权值文件-2\">#</a> 获取 yolov5s.pt 权值文件</h2>\n<p>将 <code>yolov5s.pt</code>  权值文件转为 <code>ONNX</code>  格式，并导出为 <code>best.onnx</code>  权值文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python export.py <span class=\"token parameter variable\">--weights</span> weights/best.pt <span class=\"token parameter variable\">--include</span> onnx</pre></td></tr></table></figure><h2 id=\"编写推理代码\"><a class=\"markdownIt-Anchor\" href=\"#编写推理代码\">#</a> 编写推理代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/dnn.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span>  <span class=\"token comment\">// 添加时间测量头文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"defective_insulator\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"broken_defect\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"good_insulator\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"flashover_defect\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 1. 输入图片路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"images/insulator.jpg\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入图片路径</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Mat frame <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: Could not read the image.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 2. 加载模型</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Net net <span class=\"token operator\">=</span>  cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">readNetFromONNX</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weights/ZJ/best.onnx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tnet<span class=\"token punctuation\">.</span><span class=\"token function\">setPreferableBackend</span><span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token double-colon punctuation\">::</span>DNN_BACKEND_OPENCV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tnet<span class=\"token punctuation\">.</span><span class=\"token function\">setPreferableTarget</span><span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token double-colon punctuation\">::</span>DNN_TARGET_OPENCL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 打印模型信息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// std::cout &lt;&lt; \"Network layers:\" &lt;&lt; std::endl;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// for (int i = 0; i &lt; net.getLayerNames().size(); i++) &#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//     std::cout &lt;&lt; net.getLayerNames()[i] &lt;&lt; std::endl;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: Could not load the neural network.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 3. 预处理参数设置</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> input_width <span class=\"token operator\">=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> input_height <span class=\"token operator\">=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">float</span> x_factor <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>cols <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>input_width<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 修改为动态计算</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">float</span> y_factor <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>rows <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>input_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 预处理计时</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">auto</span> preprocess_start <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 4. 图像预处理（增加 letterbox 处理）</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Mat resized<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">int</span> new_width<span class=\"token punctuation\">,</span> new_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>cols <span class=\"token operator\">></span> frame<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        new_width <span class=\"token operator\">=</span> input_width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        new_height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>rows <span class=\"token operator\">*</span> input_width <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>frame<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        new_height <span class=\"token operator\">=</span> input_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        new_width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>cols <span class=\"token operator\">*</span> input_height <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>frame<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> resized<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span>new_width<span class=\"token punctuation\">,</span> new_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    Mat blob <span class=\"token operator\">=</span> <span class=\"token function\">blobFromImage</span><span class=\"token punctuation\">(</span>resized<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">255.0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span>input_width<span class=\"token punctuation\">,</span> input_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">//blob.convertTo (blob, CV_16F);  // 半精度计算</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 预处理计时结束</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">auto</span> preprocess_end <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 推理计时</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">auto</span> inference_start <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token function\">setInput</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 5. 推理后处理</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tcv<span class=\"token double-colon punctuation\">::</span>Mat preds <span class=\"token operator\">=</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 推理计时结束</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">auto</span> inference_end <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 后处理计时</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">auto</span> postprocess_start <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> class_ids<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> confidences<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Rect<span class=\"token operator\">></span> boxes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rows: \"</span><span class=\"token operator\">&lt;&lt;</span> preds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" data: \"</span> <span class=\"token operator\">&lt;&lt;</span> preds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// cv::Mat det_output(preds.size[1], preds.size[2], CV_32F, preds.ptr&lt;float>());</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tcv<span class=\"token double-colon punctuation\">::</span>Mat det_output <span class=\"token operator\">=</span> preds<span class=\"token punctuation\">.</span><span class=\"token function\">reshape</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免内存复制</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">//In a typical YOLO output, the format is [x_center, y_center, width, height, object_confidence, class_score1, class_score2, ..., class_scoreN] for each bounding box. </span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> det_output<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> confidence <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tcv<span class=\"token double-colon punctuation\">::</span>Mat class_scores <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token function\">row</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">colRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> classes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\tPoint class_id_point<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> max_class_score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token function\">minMaxLoc</span><span class=\"token punctuation\">(</span>class_scores<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max_class_score<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>class_id_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> class_id <span class=\"token operator\">=</span> class_id_point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> final_confidence <span class=\"token operator\">=</span> confidence <span class=\"token operator\">*</span> max_class_score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token comment\">// std::cout &lt;&lt; \"Final confidence: \" &lt;&lt; final_confidence &lt;&lt; std::endl;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>final_confidence <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.45</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> ow <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> oh <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> ow<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cy <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> oh<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ow <span class=\"token operator\">*</span> x_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>oh <span class=\"token operator\">*</span> y_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        boxes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        confidences<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>final_confidence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        class_ids<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>class_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> indices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\tdnn<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">NMSBoxes</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> confidences<span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token comment\">// Draw the final bounding boxes</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> indices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> indices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\tRect box <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tcv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string label <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">[</span>class_ids<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>confidences<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">putText</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FONT_HERSHEY_SIMPLEX<span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">auto</span> postprocess_end <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token comment\">// 输出各阶段耗时（单位：ms）</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">float</span> preprocess_time <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>preprocess_end <span class=\"token operator\">-</span> preprocess_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">float</span> inference_time <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>inference_end <span class=\"token operator\">-</span> inference_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">float</span> postprocess_time <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>postprocess_end <span class=\"token operator\">-</span> postprocess_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 计算总耗时（单位：ms）</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">auto</span> duration <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>postprocess_end <span class=\"token operator\">-</span> preprocess_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"预处理: \"</span> <span class=\"token operator\">&lt;&lt;</span> preprocess_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"推理: \"</span> <span class=\"token operator\">&lt;&lt;</span> inference_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"后处理: \"</span> <span class=\"token operator\">&lt;&lt;</span> postprocess_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"总耗时: \"</span> <span class=\"token operator\">&lt;&lt;</span> duration <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token keyword\">float</span> fps <span class=\"token operator\">=</span> <span class=\"token number\">1000.0</span> <span class=\"token operator\">/</span> duration<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计算 FPS</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"FPS: \"</span> <span class=\"token operator\">&lt;&lt;</span> fps <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token comment\">// 6. 显示结果（取消视频循环）</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Object Detection\"</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 改为等待按键</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "YOLOv5s"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/02/23/Pytorch/2025-5-7-pytorch/",
            "url": "https://zhang3399.github.io/2025/02/23/Pytorch/2025-5-7-pytorch/",
            "title": "pytorch",
            "date_published": "2025-02-22T17:39:00.000Z",
            "content_html": "<blockquote>\n<p>Pytorch: <a href=\"https://pytorch.org/docs/stable/index.html\">https://pytorch.org/docs/stable/index.html</a></p>\n</blockquote>\n<h1 id=\"dataset\"><a class=\"markdownIt-Anchor\" href=\"#dataset\">#</a> Dataset</h1>\n<p>导入：  <code>from torch.utils.data import Dataset</code> , 需要继承 Dataset 类，并实现 <code>__len__</code> 和 <code>__getitem__</code> 方法<br>\n例如： <code>简单制作图像数据集</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> Dataset</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyData</span><span class=\"token punctuation\">(</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root_dir<span class=\"token punctuation\">,</span> label_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># root_dir: 数据集的根目录</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>root_dir <span class=\"token operator\">=</span> root_dir</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\"># label_dir: 数据集的子目录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>label_dir <span class=\"token operator\">=</span> label_dir</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># 获取子目录中的所有文件名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_dir<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>label_dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>img_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># 重写__getitem__方法：根据索引返回图像和标签</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        img_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>img_path<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># img_item_path: 数据集的完整路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        img_item_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_dir<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>label_dir<span class=\"token punctuation\">,</span> img_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_item_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        label <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>label_dir</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">,</span> label</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 重写__len__方法：返回数据集的大小</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>img_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>root_dir <span class=\"token operator\">=</span> <span class=\"token string\">\"dataset/train\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>ants_label_dir <span class=\"token operator\">=</span> <span class=\"token string\">\"ants\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>beens_label_dir <span class=\"token operator\">=</span> <span class=\"token string\">\"bees\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>ants_dataset <span class=\"token operator\">=</span> MyData<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> ants_label_dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>bees_dataset <span class=\"token operator\">=</span> MyData<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> beens_label_dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 合并数据集</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>train_dataset <span class=\"token operator\">=</span> ants_dataset <span class=\"token operator\">+</span> bees_dataset</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 显示数据集图片</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Image<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span>train_dataset<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"tensorboard使用\"><a class=\"markdownIt-Anchor\" href=\"#tensorboard使用\">#</a> Tensorboard 使用</h1>\n<blockquote>\n<p>Tensorboard: <a href=\"https://pytorch.org/docs/stable/tensorboard.html\">https://pytorch.org/docs/stable/tensorboard.html</a><br>\nTensorboard 是一个可视化工具，可以用于可视化训练过程中的各种指标，如损失函数、准确率等。</p>\n</blockquote>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> tensorboard</pre></td></tr></table></figure><h2 id=\"导入模块\"><a class=\"markdownIt-Anchor\" href=\"#导入模块\">#</a> 导入模块</h2>\n<p><code>SummaryWriter</code>  是 Tensorboard 的核心模块，用于记录训练过程中的各种指标。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr></table></figure><h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<p><strong>绘制曲线图</strong></p>\n<p><code>add_scalar</code>  函数用于记录标量数据，例如损失函数、准确率等。<br>\n数据格式： <code>torch.Tensor</code>  或 <code>float</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建 SummaryWriter 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 训练过程中记录数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss/train\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\"># 标签名 x 轴值 y 轴值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 关闭 SummaryWriter 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>绘制图像</strong></p>\n<p><code>add_image</code>  函数用于记录图像数据，例如训练过程中的图像、模型结构图等。<br>\n数据格式： <code>torch.Tensor, numpy.array, or string/blobname</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 创建 SummaryWriter 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 训练过程中记录数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_image<span class=\"token punctuation\">(</span><span class=\"token string\">\"Image\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\"># 标签名 图像数据 x 轴值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 关闭 SummaryWriter 对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"启动\"><a class=\"markdownIt-Anchor\" href=\"#启动\">#</a> 启动</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tensorboard <span class=\"token parameter variable\">--logdir</span><span class=\"token operator\">=</span>logs</pre></td></tr></table></figure><h2 id=\"访问\"><a class=\"markdownIt-Anchor\" href=\"#访问\">#</a> 访问</h2>\n<p>打开浏览器，输入 <code>http://localhost:6006</code>  即可访问 Tensorboard</p>\n<h1 id=\"transformer\"><a class=\"markdownIt-Anchor\" href=\"#transformer\">#</a> Transformer</h1>\n<h2 id=\"导入模块-2\"><a class=\"markdownIt-Anchor\" href=\"#导入模块-2\">#</a> 导入模块</h2>\n<p><code>from torchvision import transforms</code></p>\n<h2 id=\"totensor\"><a class=\"markdownIt-Anchor\" href=\"#totensor\">#</a> ToTensor()</h2>\n<p>利用 <code>transforms.ToTensor()</code>  将 PIL Image 或者 numpy.ndarray 转成 torch.FloatTensor，形状为 (C, H, W)，数值范围为 [0, 1.0]，数据类型为 float。</p>\n<p>调用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.jpg'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tensor_img <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tensor_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 创建转换器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tensor_img <span class=\"token operator\">=</span> tensor_trans<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"normalize\"><a class=\"markdownIt-Anchor\" href=\"#normalize\">#</a> Normalize()</h2>\n<p>利用 <code>transforms.Normalize(mean, std)</code>  对图像进行标准化，即减去均值，再除以标准差，数据类型为 float。</p>\n<p>调用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.jpg'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tensor_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tensor_img <span class=\"token operator\">=</span> tensor_trans<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"resize\"><a class=\"markdownIt-Anchor\" href=\"#resize\">#</a> Resize()</h2>\n<p>利用 <code>transforms.Resize(size)</code>  对图像进行缩放，size 可以是 int，也可以是 tuple，如果是 int，则表示将图像的最短边缩放到指定大小，长边等比例缩放；如果是 tuple，则表示将图像的宽和高分别缩放到指定大小。</p>\n<p>调用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.jpg'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tensor_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tensor_img <span class=\"token operator\">=</span> tensor_trans<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>resize_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>resize_img <span class=\"token operator\">=</span> resize_trans<span class=\"token punctuation\">(</span>tensor_img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"compose\"><a class=\"markdownIt-Anchor\" href=\"#compose\">#</a> Compose()</h2>\n<p>利用 <code>transforms.Compose([transforms1, transforms2, ...])</code>  将多个转换操作组合在一起，按照顺序执行。</p>\n<p>调用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.jpg'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tensor_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tensor_img <span class=\"token operator\">=</span> tensor_trans<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>resize_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>resize_img <span class=\"token operator\">=</span> resize_trans<span class=\"token punctuation\">(</span>tensor_img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 先缩放到 200*200，再转为 tensor</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>compose_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tensor_trans<span class=\"token punctuation\">,</span> resize_trans<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>compose_img <span class=\"token operator\">=</span> compose_trans<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"randomcrop\"><a class=\"markdownIt-Anchor\" href=\"#randomcrop\">#</a> RandomCrop()</h2>\n<p>利用 <code>transforms.RandomCrop(size)</code>  对图像进行随机裁剪，size 可以是 int，也可以是 tuple，如果是 int，则表示裁剪后的图像大小为 size*size，如果是 tuple，则表示裁剪后的图像大小为 size [0]*size [1]。</p>\n<p>调用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.jpg'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tensor_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tensor_img <span class=\"token operator\">=</span> tensor_trans<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>crop_trans <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>RandomCrop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>crop_img <span class=\"token operator\">=</span> crop_trans<span class=\"token punctuation\">(</span>tensor_img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"datasets使用\"><a class=\"markdownIt-Anchor\" href=\"#datasets使用\">#</a> datasets 使用</h1>\n<p><code>datasets</code>  是 PyTorch 提供的一个数据集模块，可以方便地加载各种常用的数据集，如 MNIST、CIFAR-10、ImageNet 等。</p>\n<h2 id=\"导入模块-3\"><a class=\"markdownIt-Anchor\" href=\"#导入模块-3\">#</a> 导入模块</h2>\n<p><code>from torchvision import datasets</code></p>\n<p>使用格式：datasets. 数据集名称 (root, train, transform, download)</p>\n<ul>\n<li>root：数据集的根目录</li>\n<li>train：是否加载训练集，默认为 True</li>\n<li>transform：对图像进行预处理操作的转换器</li>\n<li>download：是否下载数据集，默认为 False</li>\n</ul>\n<h2 id=\"数据集下载\"><a class=\"markdownIt-Anchor\" href=\"#数据集下载\">#</a> 数据集下载</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 加载 MNIST 数据集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>train_dataset <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>MNIST<span class=\"token punctuation\">(</span>root<span class=\"token operator\">=</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>test_dataset <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>MNIST<span class=\"token punctuation\">(</span>root<span class=\"token operator\">=</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建数据加载器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>train_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>test_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>test_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 遍历数据集</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> images<span class=\"token punctuation\">,</span> labels <span class=\"token keyword\">in</span> train_loader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"dataloader使用\"><a class=\"markdownIt-Anchor\" href=\"#dataloader使用\">#</a> DataLoader 使用</h1>\n<p><code>DataLoader</code>  是 PyTorch 提供的一个数据加载器模块，可以方便地加载各种数据集，并进行批处理、打乱、多线程等操作。</p>\n<h2 id=\"导入模块-4\"><a class=\"markdownIt-Anchor\" href=\"#导入模块-4\">#</a> 导入模块</h2>\n<p><code>from torch.utils.data import DataLoader</code></p>\n<p>使用格式：DataLoader (dataset, batch_size, shuffle, num_workers)</p>\n<ul>\n<li>dataset：数据集对象</li>\n<li>batch_size：每个批次的大小</li>\n<li>shuffle：是否打乱数据集，默认为 False</li>\n<li>num_workers：加载数据集的线程数</li>\n</ul>\n<h2 id=\"数据集加载\"><a class=\"markdownIt-Anchor\" href=\"#数据集加载\">#</a> 数据集加载</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 加载 MNIST 数据集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>train_dataset <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>MNIST<span class=\"token punctuation\">(</span>root<span class=\"token operator\">=</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>test_dataset <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>MNIST<span class=\"token punctuation\">(</span>root<span class=\"token operator\">=</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建数据加载器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>train_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>test_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>test_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 遍历数据集</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> images<span class=\"token punctuation\">,</span> labels <span class=\"token keyword\">in</span> train_loader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"神经网络\"><a class=\"markdownIt-Anchor\" href=\"#神经网络\">#</a> 神经网络</h1>\n<h2 id=\"导入模块-5\"><a class=\"markdownIt-Anchor\" href=\"#导入模块-5\">#</a> 导入模块</h2>\n<h2 id=\"卷积层\"><a class=\"markdownIt-Anchor\" href=\"#卷积层\">#</a> 卷积层</h2>\n<p><code>torch.nn.Conv2d()</code>  与 <code>torch.nn.functional.conv2d()</code>  的区别</p>\n<ul>\n<li><code>torch.nn.Conv2d()</code>  是 <code>nn</code>  模块中的卷积层，可以设置卷积核的大小、步长、填充等参数，并且可以自动计算梯度。</li>\n<li><code>torch.nn.functional.conv2d()</code>  是 <code>nn.functional</code>  模块中的卷积函数，需要手动设置卷积核的大小等参数。</li>\n</ul>\n<p><strong> <code>torch.nn.functional.conv2d()</code> </strong></p>\n<p><code>torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1)</code> <br>\n 参数：</p>\n<ul>\n<li>input：输入张量，形状为 (N, C_in, H_in, W_in)</li>\n<li>weight：卷积核张量，形状为 (C_out, C_in//groups, kH, kW)</li>\n<li>bias：偏置张量，形状为 (C_out)</li>\n<li>stride：步长，默认为 1</li>\n<li>padding：填充，默认为 0</li>\n<li>dilation：扩张，默认为 1</li>\n<li>groups：分组卷积，默认为 1</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">as</span> F</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 输入数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 定义卷积核</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>kernel <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 将输入数据和卷积核转换为 4 维张量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>kernel <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 卷积操作</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>output <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>conv2d<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>torch.nn.Conv2d()</code> </strong></p>\n<p><code>torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros')</code> <br>\n 参数：</p>\n<ul>\n<li>in_channels：输入通道数</li>\n<li>out_channels：输出通道数</li>\n<li>kernel_size：卷积核大小，可以是 int 或 tuple</li>\n<li>stride：步长，默认为 1</li>\n<li>padding：填充，默认为 0</li>\n<li>dilation：扩张，默认为 1</li>\n<li>groups：分组卷积，默认为 1</li>\n<li>bias：是否使用偏置，默认为 True</li>\n<li>padding_mode：填充模式，默认为’zeros’</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 输入数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 定义卷积层</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 将输入数据转换为 4 维张量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 卷积操作</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>output <span class=\"token operator\">=</span> conv<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>简单模型搭建：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> Conv2d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                       download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 创建数据加载器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dataloader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Tudui<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 继承父类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># tensorboard 可视化</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"../logs\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 实例化网络</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>tudui <span class=\"token operator\">=</span> Tudui<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 遍历数据集</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataloader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\"># 获取数据和标签</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    imgs<span class=\"token punctuation\">,</span> arget <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    output <span class=\"token operator\">=</span> tudui<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># 添加到 tensorboard</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_images<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> imgs<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\"># 将输出数据转换为 4 维张量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    output <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\"># 添加到 tensorboard</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_images<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    step <span class=\"token operator\">=</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"池化层\"><a class=\"markdownIt-Anchor\" href=\"#池化层\">#</a> 池化层</h2>\n<p><strong> <code>torch.nn.MaxPool2d()</code> </strong><br>\n <code>torch.nn.MaxPool2d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)</code> <br>\n 参数：</p>\n<ul>\n<li>kernel_size：池化核大小，可以是 int 或 tuple</li>\n<li>stride：步长，默认为 kernel_size</li>\n<li>padding：填充，默认为 0</li>\n<li>dilation：扩张，默认为 1</li>\n<li>return_indices：是否返回索引，默认为 False</li>\n<li>ceil_mode：是否向上取整，默认为 False</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> MaxPool2d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Tudui<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>maxpool1 <span class=\"token operator\">=</span> MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>ceil_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span> <span class=\"token comment\">#  将数据类型转换为 float32</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将数据转换为 4 维张量 (batch_size,channel,height,width)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 实例化网络</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 打印输出</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>** 示例 2：** 采用图像数据集</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> MaxPool2d</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tudui</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Tudui<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>maxpool1 <span class=\"token operator\">=</span> MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> ceil_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                       train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                       download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                       transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 加载数据集</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>dataloader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># tensorboard 可视化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"../logs_maxpool\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 实例化网络模型</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>tudui <span class=\"token operator\">=</span> Tudui<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 数据导入</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataloader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    img<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_images<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    output <span class=\"token operator\">=</span> tudui<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 前向传播，相比示例 1，由于 DataLoader 返回的是 4 维张量，所以不需要再 reshape</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_images<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    step <span class=\"token operator\">=</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"激活函数\"><a class=\"markdownIt-Anchor\" href=\"#激活函数\">#</a> 激活函数</h2>\n<p><strong> <code>torch.nn.ReLU()</code> </strong></p>\n<p><code>torch.nn.ReLU(inplace=False)</code> <br>\n 参数：</p>\n<ul>\n<li>inplace：是否在原地操作，默认为 False</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> ReLU</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token comment\"># 将数据转换为 4 维张量 (batch_size,channel,height,width)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 实例化网络</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 打印输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>示例 2：采用图像数据集</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> ReLU<span class=\"token punctuation\">,</span> Sigmoid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sigmoid1 <span class=\"token operator\">=</span> Sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\"># x = self.relu1(x)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sigmoid1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                       train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                       transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                       download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 读取数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>dataloader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># tensorboard 可视化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"../logs_relu\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 实例化网络</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataloader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    img<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_images<span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_images<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    step <span class=\"token operator\">=</span> step<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"归一化层\"><a class=\"markdownIt-Anchor\" href=\"#归一化层\">#</a> 归一化层</h2>\n<p>介绍：在神经网络中，每一层的输入数据分布可能都会发生变化，导致网络收敛速度变慢。通过归一化层，可以使得每一层的输入数据分布相近，从而加快网络收敛速度。</p>\n<p><strong> <code>torch.nn.BatchNorm2d()</code> </strong></p>\n<p><code>torch.nn.BatchNorm2d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</code> <br>\n 参数：</p>\n<ul>\n<li>num_features：输入通道数</li>\n<li>eps：防止除 0</li>\n<li>momentum：动量</li>\n<li>affine：是否需要缩放和平移</li>\n<li>track_running_stats：是否需要跟踪运行中的统计量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> BatchNorm2d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>batchnorm1 <span class=\"token operator\">=</span> BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batchnorm1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span> <span class=\"token comment\">#  将数据类型转换为 float32</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token comment\"># 将数据转换为 4 维张量 (batch_size,channel,height,width)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 实例化网络</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 打印输出</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"线性层\"><a class=\"markdownIt-Anchor\" href=\"#线性层\">#</a> 线性层</h2>\n<p>介绍：线性层是神经网络中的一种层，它可以将输入数据映射到输出数据。线性层由权重矩阵和偏置向量组成，其计算公式为： <code>output = input * weight + bias</code></p>\n<p><strong> <code>torch.nn.Linear(in_features, out_features, bias=True)</code> </strong></p>\n<p><code>torch.nn.Linear(in_features, out_features, bias=True)</code> <br>\n 参数：</p>\n<ul>\n<li>in_features：输入特征数</li>\n<li>out_features：输出特征数</li>\n<li>bias：是否需要偏置</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> Linear</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>linear1 <span class=\"token operator\">=</span> Linear<span class=\"token punctuation\">(</span><span class=\"token number\">196608</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                       train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                       transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                       download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 读取数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>dataloader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> drop_last<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># drop_last=True 表示如果最后一个 batch 的大小小于 batch_size，则丢弃</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 实例化网络</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataloader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    img<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 数据</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    output <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token comment\"># 将数据转换为 1 维张量，因为线性层只能接受 1 维张量</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"sequential\"><a class=\"markdownIt-Anchor\" href=\"#sequential\">#</a> Sequential</h2>\n<p>介绍：Sequential 是 PyTorch 中的一种容器，可以将多个层按顺序组合在一起，形成一个网络。Sequential 容器中的层将按照添加的顺序依次执行。</p>\n<p><strong> <code>torch.nn.Sequential(*args)</code> </strong></p>\n<p><code>torch.nn.Sequential(*args)</code> <br>\n 参数：</p>\n<ul>\n<li>*args：可变参数，表示需要添加的层</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> Conv2d<span class=\"token punctuation\">,</span> MaxPool2d<span class=\"token punctuation\">,</span> Flatten<span class=\"token punctuation\">,</span> Linear<span class=\"token punctuation\">,</span> Sequential</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># tensorboard 可视化</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"../log_seq\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 添加网络结构图</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>writer<span class=\"token punctuation\">.</span>add_graph<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"损失函数\"><a class=\"markdownIt-Anchor\" href=\"#损失函数\">#</a> 损失函数</h2>\n<p>介绍：损失函数是神经网络中的一种函数，用于衡量网络预测结果与真实结果之间的差距。损失函数的值越小，表示网络的预测结果越接近真实结果。</p>\n<ol>\n<li><strong> <code>torch.nn.L1Loss()</code> </strong><br>\n <code>torch.nn.L1Loss(size_average=None, reduce=None, reduction='mean')</code> <br>\n 参数：</li>\n</ol>\n<ul>\n<li>size_average：是否对损失进行平均</li>\n<li>reduce：是否对损失进行求和</li>\n<li>reduction：损失函数的归约方式，可选值有’mean’、‘sum’、‘none’</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> L1Loss</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>inputs <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>target <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>inputs <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>loss <span class=\"token operator\">=</span> L1Loss<span class=\"token punctuation\">(</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">\"sum\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>result <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>loss_mse <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>results_mse <span class=\"token operator\">=</span> loss_mse<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>results_mse<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong> <code>torch.nn.CrossEntropyLoss()</code> </strong></li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> CrossEntropyLoss</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loss_cross <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>result_cross <span class=\"token operator\">=</span> loss_cross<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result_cross<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"反向传播\"><a class=\"markdownIt-Anchor\" href=\"#反向传播\">#</a> 反向传播</h2>\n<p>介绍：反向传播是神经网络中的一种算法，用于计算损失函数相对于网络参数的梯度。反向传播算法通过链式法则，从输出层开始，逐层向前计算每一层的梯度，最终得到损失函数相对于网络参数的梯度。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> Conv2d<span class=\"token punctuation\">,</span> MaxPool2d<span class=\"token punctuation\">,</span> Flatten<span class=\"token punctuation\">,</span> Linear<span class=\"token punctuation\">,</span> Sequential</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                       train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                       transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                       download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dataloader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>loss_Cross <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataloader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    imgs<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    result_loss <span class=\"token operator\">=</span> loss_Cross<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\"># 反向传播，得到梯度的值</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    result_loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"优化器\"><a class=\"markdownIt-Anchor\" href=\"#优化器\">#</a> 优化器</h2>\n<a href=\"/2025/04/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-4-16-Adam%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/\" title=\"Adman梯度下降\">梯度下降优化算法站内文章</a>\n<p>介绍：优化器是神经网络中的一种算法，用于更新网络参数。优化器通过计算损失函数相对于网络参数的梯度，并根据梯度的大小和方向，更新网络参数，以最小化损失函数的值。</p>\n<p><strong> <code>torch.optim.SGD()</code> </strong><br>\n 示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> Conv2d<span class=\"token punctuation\">,</span> MaxPool2d<span class=\"token punctuation\">,</span> Flatten<span class=\"token punctuation\">,</span> Linear<span class=\"token punctuation\">,</span> Sequential</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                       train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                       transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                       download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 加载</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>dataloader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 定义网络</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 定义损失函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>loss_Cross <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 定义优化器，传入网络参数和学习率</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>optim <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    running_loss <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataloader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        imgs<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\"># 前向传播</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\"># 计算损失</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        result_loss <span class=\"token operator\">=</span> loss_Cross<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        optim<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        result_loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\"># 使用优化器更新参数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        optim<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\"># 计算 epoch 的 loss</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        running_loss <span class=\"token operator\">=</span> running_loss <span class=\"token operator\">+</span> result_loss</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>running_loss<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"迁移学习\"><a class=\"markdownIt-Anchor\" href=\"#迁移学习\">#</a> 迁移学习</h2>\n<p>介绍：迁移学习是一种机器学习方法，它利用已经训练好的模型来学习新的任务。迁移学习可以加速模型的训练过程，提高模型的泛化能力。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vgg16_false <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>vgg16<span class=\"token punctuation\">(</span>pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vgg16_True <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>vgg16<span class=\"token punctuation\">(</span>pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>vgg16_True<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 最后添加一层</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vgg16_True<span class=\"token punctuation\">.</span>add_module<span class=\"token punctuation\">(</span><span class=\"token string\">\"add_linear\"</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># classifier 模块最后添加一层</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>vgg16_True<span class=\"token punctuation\">.</span>classifier<span class=\"token punctuation\">.</span>add_module<span class=\"token punctuation\">(</span><span class=\"token string\">\"add_linear\"</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 修改 classifier 模块的第 7 层</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vgg16_false<span class=\"token punctuation\">.</span>classifier<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"模型保存和加载\"><a class=\"markdownIt-Anchor\" href=\"#模型保存和加载\">#</a> 模型保存和加载</h2>\n<p>介绍：模型保存和加载是神经网络中的一种操作，用于保存和加载已经训练好的模型。模型保存和加载可以方便地保存和加载模型，以便后续使用。</p>\n<ol>\n<li><strong> <code>torch.save()</code> </strong><br>\n<strong> 示例：模型保存</strong></li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vgg16 <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>vgg16<span class=\"token punctuation\">(</span>pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 保存方式 1，模型结构 + 参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>vgg16<span class=\"token punctuation\">,</span> <span class=\"token string\">\"vgg16_method1.pth\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 保存方式 2，只保存参数（官方推荐）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>vgg16<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vgg16_method2.pth\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong> <code>torch.load()</code> </strong><br>\n<strong> 示例：模型加载</strong></li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 保存方式 1 的模型加载</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>model <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"vgg16_method1.pth\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#-----------------------------------#-----------------------------------#</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 保存方式 2 的模型加载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 需要先定义模型结构</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>model <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>vgg16<span class=\"token punctuation\">(</span>pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 加载参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>model<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"vgg16_method2.pth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"完整模型训练示例\"><a class=\"markdownIt-Anchor\" href=\"#完整模型训练示例\">#</a> 完整模型训练示例</h2>\n<p>项目文件列表如下：</p>\n<pre><code>├─dataset\n├─logs_train\n├─model.py\n└─train.py\n</code></pre>\n<p><code>model.py</code>  文件内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 搭建神经网络</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    inputs <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>train.py</code>  文件内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> model <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 准备数据集</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>train_data <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                          train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                          transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                          download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>test_data <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span><span class=\"token string\">\"../dataset\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                         train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                         transform<span class=\"token operator\">=</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                         download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># lenth 长度</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>train_data_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>test_data_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 如果 train_data_size = 10, 训练数据长度为：10</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"训练数据集长度为&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>train_data_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试数据集长度为&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>test_data_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 加载数据集</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>train_dataload <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>test_dataload <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 创建网络模型</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 损失函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>loss_fn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 优化器</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>learn_rate <span class=\"token operator\">=</span> <span class=\"token number\">1e-2</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>learn_rate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 设置网络训练的参数</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>total_train_step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># 记录测试的次数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>total_test_step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># 训练的轮数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>epoch <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\"># 添加 tensorboard</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"../logs_train\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------第 &#123;&#125; 轮训练开始-----------\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\"># 训练步骤开始</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    net<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> train_dataload<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        imgs<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\"># 前向传递</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\"># 计算损失值</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        loss <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\"># 优化器</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\"># 反向传播，得到参数的梯度</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\"># 优化器更新参数</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span> total_train_step<span class=\"token operator\">%</span><span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"训练次数： &#123;&#125;, loss: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>total_train_step<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"train_loss\"</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>total_train_step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        total_train_step <span class=\"token operator\">=</span> total_train_step <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\"># 测试步骤开始</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    total_test_loss <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    total_accuracy <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> test_dataload<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            imgs<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            output <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            loss <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\"># 测试集损失值</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            total_test_loss <span class=\"token operator\">=</span> total_test_loss <span class=\"token operator\">+</span> loss</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\"># 计算正确预测数量</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            accuracy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            total_accuracy <span class=\"token operator\">=</span> total_accuracy <span class=\"token operator\">+</span> accuracy</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"整体测试集上的Loss: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>total_test_loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"整体测试集上的正确率： &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>total_accuracy <span class=\"token operator\">/</span> test_data_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_loss\"</span><span class=\"token punctuation\">,</span> total_test_loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_test_step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_accuracy\"</span><span class=\"token punctuation\">,</span> total_accuracy <span class=\"token operator\">/</span> test_data_size<span class=\"token punctuation\">,</span> total_test_step<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    total_test_step <span class=\"token operator\">=</span> total_test_step <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> <span class=\"token string\">\"net_&#123;&#125;.pth\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\"># torch.save(net.state_dict(), \"net_&#123;&#125;.pth\".format(i))</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模型已保存\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"gpu加速\"><a class=\"markdownIt-Anchor\" href=\"#gpu加速\">#</a> GPU 加速</h2>\n<p>一些常用的 GPU 操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 是否可用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>device_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 型号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 型号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>current_device<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 型号</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>current_device<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>pytorch 模型训练时，将模型、输入数据、标签和损失函数放到 GPU 上，可以加速训练过程。</p>\n<ol>\n<li>方式一：<br>\n使用 <code>.cuda()</code>  方法，将模型、输入数据、标签和损失函数放到 GPU 上</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 设置使用的 GPU 编号，避免 CUDA 默认的全局显存预分配行为，减少隐性显存占用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'CUDA_VISIBLE_DEVICES'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'0'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 定义训练设备</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 是否可用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GPU可用\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 将模型放到 GPU 上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    net <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 将输入数据放到 GPU 上</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    imgs <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 将标签放到 GPU 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 将损失函数放到 GPU 上</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    loss_fn <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>方式二：</li>\n</ol>\n<p>使用 <code>.to(device)</code>  方法，将模型、输入数据、标签和损失函数放到 GPU 上</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 设置使用的 GPU 编号，避免 CUDA 默认的全局显存预分配行为，减少隐性显存占用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'CUDA_VISIBLE_DEVICES'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'0'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看当前机器的 GPU 是否可用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GPU可用\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    net <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 将模型放到 GPU 上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    net <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 将输入数据放到 GPU 上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    imgs <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 将标签放到 GPU 上</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 将损失函数放到 GPU 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loss_fn <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"使用训练模型\"><a class=\"markdownIt-Anchor\" href=\"#使用训练模型\">#</a> 使用训练模型</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torchvision</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'CUDA_VISIBLE_DEVICES'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'0'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 加载图片</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>image_path <span class=\"token operator\">=</span> <span class=\"token string\">\"../images/img_1.png\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>image_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># png 为四通道，需要转换为三通道</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">'RGB'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>transform <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                           torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>image <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>model <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"net_19.pth\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>image <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "pytorch"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/02/23/Tool/2025-2-23-git/",
            "url": "https://zhang3399.github.io/2025/02/23/Tool/2025-2-23-git/",
            "title": "git基本使用",
            "date_published": "2025-02-22T17:39:00.000Z",
            "content_html": "<h1 id=\"git基本使用\"><a class=\"markdownIt-Anchor\" href=\"#git基本使用\">#</a> git 基本使用</h1>\n<ol>\n<li>git clone 拉取仓库项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/xxx/xxx.git  <span class=\"token comment\">#拉取所有分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span>  <span class=\"token comment\">#查看所有分支</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> main  <span class=\"token comment\">#切换到 main 分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> pull origin main  <span class=\"token comment\">#拉取远程仓库 main 分支</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>git add 添加文件到暂存区（一般修改后执行）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> filename  <span class=\"token comment\">#修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者添加所有文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>  <span class=\"token comment\">#</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>git commit 提交文件到本地仓库</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"提交信息\"</span>  <span class=\"token comment\">#补充修改日志信息</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>git push 推送文件到远程仓库</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push origin main  <span class=\"token comment\">#推送到远程仓库 main 分支</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>git pull 拉取远程仓库文件</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin main  <span class=\"token comment\">#拉取远程仓库 main 分支</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>git status 查看当前状态</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status  <span class=\"token comment\">#查看当前状态</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>git branch 查看分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch  <span class=\"token comment\">#查看本地分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span>  <span class=\"token comment\">#查看远程分支</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span>  <span class=\"token comment\">#查看所有分支</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>git checkout 切换分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout main  <span class=\"token comment\">#切换到 main 分支</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>git merge 合并分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> merge feature/new-dashboard  <span class=\"token comment\">#合并 feature/new-dashboard 分支到当前分支</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>git branch -d 删除分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> feature/new-dashboard  <span class=\"token comment\">#删除 feature/new-dashboard 分支</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>git log 查看提交记录</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> log  <span class=\"token comment\">#查看提交记录</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>git reset 回退版本</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^  <span class=\"token comment\">#回退到上一个版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD~100  <span class=\"token comment\">#回退到前 100 个版本</span></pre></td></tr></table></figure><h1 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 📌流程</h1>\n<ol>\n<li>克隆仓库并初始化</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 克隆仓库到本地（仅检出主分支）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/xxx/xxx.git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> xxx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看所有分支（包括远程分支）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建并切换到功能分支<br>\n<strong>创建并切换到新分支（推荐命名格式：feature/xxx）</strong></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature/new-dashboard</pre></td></tr></table></figure><p>分支命名建议\t示例<br>\n新功能\t <code>feature/payment-success</code> <br>\nBug 修复\t <code>bugfix/validate-input</code> <br>\n 紧急修复\t <code>hotfix/ssl-issue</code></p>\n<ol start=\"3\">\n<li>开发并提交代码</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加修改文件到暂存区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#提交代码（遵循 Conventional Commits 规范）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"feat: add user dashboard\"</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>推送功能分支到远程仓库</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 绑定并推送分支（首次推送必须加 - u）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin feature/new-dashboard</pre></td></tr></table></figure><ol start=\"5\">\n<li>切回主分支并同步最新代码</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换到主分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 拉取远程主分支更新</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> pull origin main</pre></td></tr></table></figure><ol start=\"6\">\n<li>合并功能分支到主分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合并本地分支到主分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> merge feature/new-dashboard</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ⚠️ 冲突处理：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 手动编辑冲突文件后执行：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> conflicted-file.txt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Resolve merge conflicts\"</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>提交合并后的主分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 推送主分支更新</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">8</span>. 删除本地功能分支（可选）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> feature/new-dashboard</pre></td></tr></table></figure><p><strong>🔐 关键细节与最佳实践</strong></p>\n<ol>\n<li>分支命名规范（必须遵守）<br>\n分支类型\t命名规则\t示例<br>\n新功能\t <code>feature/</code>  + 功能描述\t <code>feature/new-dashboard</code> <br>\nBug 修复\t <code>bugfix/</code>  + 问题 ID\t <code>bugfix/INPUT-123</code> <br>\n 紧急修复\t <code>hotfix/</code>  + 问题描述\t <code>hotfix/ssl-issue</code></li>\n<li>提交信息规范（必须遵守）<br>\n类型\t前缀\t示例<br>\n新增功能\t <code>feat:</code> \t <code>feat: add login button</code> <br>\n 修复 Bug\t <code>fix:</code> \t <code>fix: resolve auth bug</code> <br>\n 代码重构\t <code>refactor:</code>   <code>refactor/api-response</code></li>\n<li>拉取最新代码（推荐操作）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在功能分支开发时定期同步主分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout feature/new-dashboard</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> pull origin main</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 Pull Request 流程（团队协作必备）<br>\n在  <code>GitHub</code>  创建  <code>PR</code> <br>\n 添加描述和关联  <code>Issue</code> <br>\n 等待  <code>Code Review</code>  和测试通过<br>\n合并到主分支后删除功能分支</li>\n</ol>\n<p><strong>🎯 流程图解</strong></p>\n<pre><code>+-----------------------------+        +-----------------------------+\n|        GitHub 主分支 (main)      |        |        GitHub 主分支 (main)      |\n+-----------------------------+        +-----------------------------+\n          ↓ (clone/pull)            ↗ (PR合并)          ↓ (clone/pull)\n+-----------------------------+        +-----------------------------+\n| 本地仓库 (main)              |        | 本地仓库 (main)              |\n+-----------------------------+        +-----------------------------+\n          ↓ (checkout -b)         ↗ (merge)          ↓ (checkout -b)\n+-----------------------------+        +-----------------------------+\n| 本地功能分支 (feature/new-dashboard) |      | 本地功能分支 (feature/new-dashboard) |\n+-----------------------------+        +-----------------------------+\n          ↓ (commit)             ↗ (push)          ↓ (commit)\n+-----------------------------+        +-----------------------------+\n| GitHub 功能分支              |        | GitHub 功能分支              |\n+-----------------------------+        +-----------------------------+\n</code></pre>\n<p>关键节点：克隆仓库、创建功能分支、合并到主分支、推送主分支<br>\n推荐路径：主流程（↓ → ↗ → ↓）｜合并路径（↗）<br>\n<strong>⚠️ 常见错误与解决方案</strong></p>\n<ol>\n<li>合并冲突</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 手动解决冲突后标记为已解决</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> conflicted-file.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Resolve merge conflicts\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>忘记关联远程分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 推送时首次绑定远程分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin feature/new-dashboard</pre></td></tr></table></figure><ol start=\"3\">\n<li>主分支落后于远程</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合并前必须拉取最新代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin main</pre></td></tr></table></figure><h1 id=\"回滚\"><a class=\"markdownIt-Anchor\" href=\"#回滚\">#</a> 回滚</h1>\n<p>Step 1 查看提交历史</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr></table></figure><p>Step 2 切换到需要回滚的分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout main</pre></td></tr></table></figure><p>Step 3 回滚到指定提交</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit-hash<span class=\"token operator\">></span> <span class=\"token comment\"># 也可以 --hard HEAD^   回退上一版本，也可以用 HEAD~1   --hard HEAD^^ 回退上两个版本，也可以用 HEAD~2 表示</span></pre></td></tr></table></figure><p>Step 4 强制推送回滚后的代码到远程仓库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> origin main</pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 📝总结</h1>\n<p>核心原则：隔离开发、频繁同步、明确沟通<br>\n推荐工具： <code>GitHub PR</code> 、 <code>GitLab Merge Request</code> <br>\n 进阶学习： <code>Git Flow</code>  工作流、 <code>GitHub Actions</code> <br>\n 文档特点：</p>\n<p>通过加粗 / 列表 / 代码块实现逻辑分层<br>\n使用表格清晰展示规范要求<br>\n流程图解采用 <code>ASCII</code>  字符图形化关键路径<br>\n错误提示突出显示高频问题解决方案<br>\n <code>🔗</code>  相关链接<br>\n <code>Conventional Commits</code>  规范<br>\n <code>Git Flow</code>  工作流<br>\n <code>GitHub Actions</code>  自动化</p>\n<p>➕ <strong>Pull request</strong>  使用 (合并分支)</p>\n<p>Step 1 克隆仓库或更新本地仓库至最新代码</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin main         <span class=\"token comment\"># 从远程仓库的 main 分支拉取最新的代码</span></pre></td></tr></table></figure><p>Step 2 切换到拉取请求的目标分支（基础分支）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout main   <span class=\"token comment\"># 切换到主分支（默认的基础分支）</span></pre></td></tr></table></figure><p>Step 3 将功能分支合并到基础分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> merge new-feature <span class=\"token comment\"># 将新功能分支（new-feature）合并到当前主分支</span></pre></td></tr></table></figure><p>Step 4 推送合并后的代码到远程仓库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main</pre></td></tr></table></figure><p><strong>补充：</strong><br>\n删除本地分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> new-feature</pre></td></tr></table></figure><p>删除远程分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> new-feature</pre></td></tr></table></figure><p><strong>补充：</strong><br>\n推荐练习 git 网站：<br>\n<a href=\"https://learngitbranching.js.org/?locale=en_US\">https://learngitbranching.js.org/?locale=en_US</a></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/01/20/JS/2025-2-23-TypeScript/",
            "url": "https://zhang3399.github.io/2025/01/20/JS/2025-2-23-TypeScript/",
            "title": "TypeScript学习",
            "date_published": "2025-01-19T17:39:00.000Z",
            "content_html": "<h1 id=\"基础类型8种\"><a class=\"markdownIt-Anchor\" href=\"#基础类型8种\">#</a> 基础类型 (8 种)</h1>\n<p><code>JavaScript</code>  语言（注意，不是  <code>TypeScript</code> ）将值分成 8 种类型。</p>\n<ul>\n<li><code>boolean</code>  布尔</li>\n<li><code>string</code>  字符串</li>\n<li><code>number</code>  数量</li>\n<li><code>bigint</code>  长整型数字</li>\n<li><code>symbol</code>  象征</li>\n<li><code>object</code>  对象</li>\n<li><code>undefined</code>  未定义的</li>\n<li><code>null</code>  零值</li>\n</ul>\n<p><code>TypeScript</code>  继承了  <code>JavaScript</code>  的类型设计，以上 <code>8种类型</code> 可以看作  <code>TypeScript</code>  的基本类型。<br>\n注意，上面所有类型的名称都是小写字母，首字母大写的<strong> Number、String、Boolean</strong> 等在  <code>JavaScript</code>  语言中都是<strong>内置对象</strong>，而不是类型名称。</p>\n<ol>\n<li>布尔值</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>字符串</li>\n</ol>\n<p>（普通字符串和模板字符串都属于 string 类型）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> str2<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>str1<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> world</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>number 类型</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> decLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> hexLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> binaryLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> octalLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>bigint 类型</li>\n</ol>\n<p>bigint 类型是 ES2020 标准引入的。 <code>JavaScript</code>  版本不能低于 ES2020<br>\nbigint 类型包含所有的大整数。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span>bigint <span class=\"token operator\">=</span> <span class=\"token number\">123n</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> y<span class=\"token operator\">:</span>bigint <span class=\"token operator\">=</span> <span class=\"token number\">0xffffn</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>bigint 与 number 类型不兼容。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span>bigint <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> y<span class=\"token operator\">:</span>bigint <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>symbol 类型</li>\n</ol>\n<p>symbol 类型包含所有的 Symbol 值。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>object 类型</li>\n</ol>\n<p>根据  <code>JavaScript</code>  的设计，object 类型包含了所有对象、数组和函数。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span>object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> y<span class=\"token operator\">:</span>object <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> z<span class=\"token operator\">:</span><span class=\"token function-variable function\">object</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，对象、数组、函数都属于 object 类型。</p>\n<p>关于数组，TypeScript 有专门类型定义。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一种写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>采用 <code>number[]</code>  定义了数组成员是动态的，可以增加、减少、修改成员，但成员类型必须为 number 类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第二种写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>undefined</li>\n<li>null</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意，如果没有声明类型的变量，被赋值为 <code>undefined</code>  或 <code>null</code> ，在关闭编译设置 noImplicitAny 和 strictNullChecks 时，它们的类型会被推断为 any。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 关闭 noImplicitAny 和 strictNullChecks</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// any</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// any</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// any</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// any</span></pre></td></tr></table></figure><p>如果希望避免这种情况，则需要打开编译选项 strictNullChecks。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 打开编译设置 strictNullChecks</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// null</span></pre></td></tr></table></figure><p>元组</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><p>any</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>notSure <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>notSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay, definitely a boolean</span></pre></td></tr></table></figure><h1 id=\"类型推论\"><a class=\"markdownIt-Anchor\" href=\"#类型推论\">#</a> 类型推论</h1>\n<p>变量初始化类型推断，如果没有明确声明类型， <code>TypeScript</code>  会根据变量初始值推断类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> someValue <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化时，根据赋值自动推断为 number 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>someValue <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化时，根据赋值自动推断为 number [] 类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr></table></figure><p>数组变量未声明类型，且为空数组，TypeScript 会推断为  <code>any[]</code>  类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 推断为 any []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值后，推断为 number [] 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 再次赋值，推断为 (number|string)[] 类型</span></pre></td></tr></table></figure><h1 id=\"只读数组const断言\"><a class=\"markdownIt-Anchor\" href=\"#只读数组const断言\">#</a> 只读数组，const 断言</h1>\n<p><code>JavaScript</code>  中， <code>const</code>  定义的变量，不能重新赋值，但可以修改其成员。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number[]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr></table></figure><p><code>TsypeScript</code>  允许声明只读数组，方法是在数组类型前加上 <code>redayonly</code>  关键字。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//readonly number[]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">delete</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr></table></figure><p><code>TsypeScript</code>  将 <code>readonly number[]</code>  视为 <code>number[]</code>  的父类，子类型具有父类行的特征并具有自己的特征 <code>pop\\push</code> , 所以子类可以赋值给父类型，反过来不行。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span><span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr2<span class=\"token operator\">:</span><span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//--------------------------</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span><span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//error, 等价于 getSum (s:number []=arr:readonly number [])</span></pre></td></tr></table></figure><p><code>number[]</code>  作为子类继承 <code>readonly number[]</code>  父类，而父类没有 <code>pop()</code> 、 <code>push()</code>  方法，所以两者并不完全等价。</p>\n<pre><code class=\"language-typescript\"></code></pre>\n<p>TypeScript 中，const 定义的变量，不能重新赋值，也不能修改其成员。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span></pre></td></tr></table></figure><h1 id=\"只读数组泛型写法\"><a class=\"markdownIt-Anchor\" href=\"#只读数组泛型写法\">#</a> 只读数组，泛型写法</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// error </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span><span class=\"token keyword\">readonly</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// method 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> a1<span class=\"token operator\">:</span>ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// method 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> a2<span class=\"token operator\">:</span>Readonly<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//method 3 使用 “const 断言” 实现</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><h1 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\">#</a> 类型断言</h1>\n<p>对于没有类型声明的值， <code>TypeScript</code>  会进行类型推断，很多时候得到的结果，未必是开发者想要的，类型断言可以用来告诉编译器变量的类型，可以避免编译器进行类型推断。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">|</span><span class=\"token string\">'b'</span><span class=\"token operator\">|</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//let bar:T = foo; //error bar 为 T 类型，foo 推断为 string 类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> bar<span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> foo <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok 断言 foo 为 T 类型</span></pre></td></tr></table></figure><h1 id=\"断言语法\"><a class=\"markdownIt-Anchor\" href=\"#断言语法\">#</a> 断言语法</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 语法一：`&lt; 类型 > 值`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span>value</pre></td></tr></table></figure><figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 语法二：`值 as 类型`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    value <span class=\"token keyword\">as</span> Type <span class=\"token comment\">// 推荐写法</span></pre></td></tr></table></figure><p>对象类型有严格字面量检查，如果存在额外的属性会报错.</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// error</span></pre></td></tr></table></figure><p>断言可以绕过字面量检查，存在类型断言，就没有严格字面量检查了，所以不报错。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> p0<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok 断言使得等号左右两边类型一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> p1<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok 断言使得等号左右两边类型一致</span></pre></td></tr></table></figure><h1 id=\"值类型\"><a class=\"markdownIt-Anchor\" href=\"#值类型\">#</a> 值类型</h1>\n<p>TypeScript 规定，单个值也是一种类型，称为 “值类型”。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>TypeScript 推断类型时，遇到 <code>const</code>  命令声明的变量，如果代码里面没有注明类型，就会推断该变量是值类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//x 的类型是 \"https\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'https'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//y 的类型是 string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样推断是合理的，因为 <code>const</code>  命令声明的变量，一旦声明就不能改变，相当于常量。值类型就意味着不能赋为其他值。</p>\n<p>注意， <code>const</code>  命令声明的变量，如果赋值为对象，并不会推断为值类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//x 的类型是 &#123;foo: number&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>变量 <code>x</code>  没有被推断为值类型，而是推断属性 <code>foo</code>  的类型是 <code>number</code> 。这是因为 <code> </code> JavaScript <code> </code> 里面， <code>const</code>  变量赋值为对象时，属性值是可以改变的。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>上面示例中，等号左侧的类型是数值 <code>5</code> ，等号右侧 <code>4 + 1</code>  的类型， <code>TypeScript</code>  推测为 <code>number</code> 。由于 <code>5</code>  是 <code>number</code>  的子类型， <code>number</code>  是 <code>5</code>  的父类型，父类型不能赋值给子类型，所以报错了.<br>\n 但是，反过来是可以的，子类型可以赋值给父类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr></table></figure><p>如果一定要让子类型可以赋值为父类型的值，就要用到类型断言</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr></table></figure><p>上面示例中，在 <code>4 + 1</code>  后面加上 <code>as 5</code> ，就是告诉编译器，可以把 <code>4 + 1</code>  的类型视为值类型 <code>5</code> ，这样就不会报错了。</p>\n<p>只包含单个值的值类型，用处不大。实际开发中，往往将多个值结合，作为联合类型使用。</p>\n<h1 id=\"联合类型\"><a class=\"markdownIt-Anchor\" href=\"#联合类型\">#</a> 联合类型</h1>\n<p>联合类型（union types）指的是多个类型组成的一个新类型，使用符号 | 表示。</p>\n<p>联合类型 <code>A|B</code>  表示，任何一个类型只要属于 <code>A</code>  或 <code>B</code> ，就属于联合类型 <code>A|B</code> 。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本类型的联合类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 值类型的联合类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> set <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Jerry'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Spike'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'blue'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打开编译选项 <code>strictNullChecks</code>  后，其他类型的变量不能赋值为 <code>undefined</code>  或 <code>nul</code> l。这时，如果某个变量确实可能包含空值，就可以采用联合类型的写法。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 多行书写联合类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">'one'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">'two'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">'three'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果一个变量有多种类型，读取该变量时，往往需要进行 “类型缩小”（type narrowing），区分该值到底属于哪一种类型，然后再进一步处理。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">|</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 类型缩小</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">|</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> id <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"交叉类型\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型\">#</a> 交叉类型</h1>\n<p>交叉类型（intersection types）指的多个类型组成的一个新类型，使用符号 <code>&amp;</code>  表示。</p>\n<p>交叉类型 <code>A&amp;B</code>  表示，任何一个类型必须同时属于 <code>A</code>  和 <code>B</code> ，才属于交叉类型 <code>A&amp;B</code> ，即交叉类型同时满足 A 和 B 的特征。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token operator\">&amp;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，变量 <code>x</code>  同时是数值和字符串，这当然是不可能的，所以 <code>TypeScript</code>  会认为 x 的类型实际是 <code>never</code> 。</p>\n<p>交叉类型的主要用途是表示对象的合成。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> bar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  foo<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  bar<span class=\"token operator\">:</span> <span class=\"token string\">'world'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，变量 <code>obj</code>  同时具有属性 <code>foo</code>  和属性 <code>bar</code> 。</p>\n<p>交叉类型常常用来为对象类型添加新属性。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> bar<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，类型 <code>B</code>  是一个交叉类型，用来在 <code>A</code>  的基础上增加了属性 <code>bar</code> 。</p>\n<h1 id=\"type-命令\"><a class=\"markdownIt-Anchor\" href=\"#type-命令\">#</a> type 命令</h1>\n<p>type 命令用来定义一个类型的别名。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span>Age <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>type</code>  命令为 <code>number</code>  类型定义了一个别名 <code>Age</code> 。这样就能像使用 <code>number</code>  一样，使用 <code>Age</code>  作为类型。</p>\n<p>别名的作用域是块级作用域。这意味着，代码块内部定义的别名，影响不到外部。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Color</span> <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Color</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>别名支持使用表达式，也可以在定义一个别名时，使用另一个别名，即别名允许嵌套。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">World</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>World<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"typeof-运算符\"><a class=\"markdownIt-Anchor\" href=\"#typeof-运算符\">#</a> typeof 运算符</h1>\n<p><code>JavaScript</code>  语言中， <code>typeof</code>  运算符是一个一元运算符，返回一个字符串，代表操作数的类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span></pre></td></tr></table></figure><p><code>JavaScript</code>  里面， <code>typeof</code>  运算符只可能返回八种结果，而且都是字符串。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">1337</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">127n</span> <span class=\"token comment\">// \"bigint\"</span></pre></td></tr></table></figure><p>由于编译时不会进行  <code>JavaScript</code>  的值运算，所以 <code>TypeScript</code>  规定，typeof 的参数只能是标识符，不能是需要运算的表达式。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>上面示例会报错，原因是  <code>typeof</code>  的参数不能是一个值的运算式，而 <code>Date()</code>  需要运算才知道结果。</p>\n<p>另外， <code>typeof</code>  命令的参数不能是类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><h1 id=\"块圾类型声明\"><a class=\"markdownIt-Anchor\" href=\"#块圾类型声明\">#</a> 块圾类型声明</h1>\n<p>TypeScript 支持块级类型声明，即类型可以声明在代码块（用大括号表示）里面，并且只在当前代码块有效。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> v<span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> v<span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"类型兼容\"><a class=\"markdownIt-Anchor\" href=\"#类型兼容\">#</a> 类型兼容</h1>\n<p>TypeScript 的类型存在兼容关系，某些类型可以兼容其他类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token operator\">|</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>TypeScript 的一个规则是，凡是可以使用父类型的地方，都可以使用子类型，但是反过来不行。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span><span class=\"token string\">'hi'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>上面示例中， <code>hi</code>  是 <code>string</code>  的子类型， <code>string</code>  是 <code>hi</code>  的父类型。所以，变量 <code>a</code>  可以赋值给变量 <code>b</code> ，但是反过来就会报错。</p>\n",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/08/08/C++/2024-8-8-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",
            "url": "https://zhang3399.github.io/2024/08/08/C++/2024-8-8-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",
            "title": "I/O多路复用",
            "date_published": "2024-08-08T12:00:00.000Z",
            "content_html": "<blockquote>\n<p><code>I/O多路复用</code> 是一种技术，允许一个进程同时监控多个文件描述符，并在其中任何一个文件描述符准备好进行 I/O 操作时通知进程。这种技术可以提高程序的性能和效率，特别是在需要同时处理多个网络连接或文件描述符的情况下。</p>\n</blockquote>\n<h1 id=\"select\"><a class=\"markdownIt-Anchor\" href=\"#select\">#</a> select</h1>\n<p>函数原型：使用 <code>select</code>  这种 <code>IO</code>  多路转接方式需要调用一个同名函数 <code>select</code> ，这个函数是跨平台的， <code>Linux</code> 、 <code>Windows</code> 、 <code>MacOS</code>  等操作系统都是支持的。该函数可以委托内核帮助我们检测若干个文件描述符的状态，其实就是检测这些文件描述符对应的读写缓冲区的状态。</p>\n<ul>\n<li>读缓冲区状态：检测里面是否有数据，如果有数据该缓冲区对应的文件描述符就绪</li>\n<li>写缓冲区状态：检测里面是否还有空闲空间，如果有空闲空间该缓冲区对应的文件描述符就绪</li>\n<li>读取异常状态：检测是否发生异常，比如网络异常、文件异常等，如果发生异常该缓冲区对应的文件描述符就绪</li>\n</ul>\n<p>委托检测的文件描述符遍历检测完毕之后，已就绪的这些满足的文件描述符会通过 select () 的参数分为 3 个集合传出，程序员得到这几个集合依次分情况依次处理即可。</p>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    time_t tv_sec<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 秒 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    suseconds_t tv_usec<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 微秒 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writefds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>exceptfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>nfds</code> ：需要检测的文件描述符的范围，即检测的文件描述符从 0 到 <code>nfds-1</code> ， <code>nfds</code>  的值通常为待检测的<em>最大文件描述符</em>加 1。(内核允许最大一般是 1024)\n<ul>\n<li>内核需要线程遍历这些集合中的文件描述符，这个值是循环结束的条件。</li>\n<li>在 windows 中，该参数是无效的，指定为 - 1 即可。</li>\n</ul>\n</li>\n<li><code>readfds</code> ：需要检测读状态的文件描述符集合，即检测这些文件描述符对应的读缓冲区状态。\n<ul>\n<li><code>传入传出参数</code> ，读集合一般情况下是需要检测的，这样测能直到通过哪些文件描述符接收数据。</li>\n</ul>\n</li>\n<li><code>writefds</code> ：需要检测写状态的文件描述符集合，即检测这些文件描述符对应的写缓冲区状态。\n<ul>\n<li><code>传入传出参数</code> ，如果不需要使用该参数可以指定为 NULL。</li>\n</ul>\n</li>\n<li><code>exceptfds</code> ：需要检测异常状态的文件描述符集合，即检测这些文件描述符对应的异常状态。\n<ul>\n<li><code>传入传出参数</code> ，如果不需要使用该参数可以指定为 NULL。</li>\n</ul>\n</li>\n<li><code>timeout</code> ：超时时间，即检测文件描述符状态的超时时间。</li>\n<li>函数返回值：\n<ul>\n<li>大于 <code>0</code> ：成功，返回集合中已就绪的文件描述符的个数。</li>\n<li>等于 <code>-1</code> ：则表示出错。</li>\n<li>等于 <code>0</code> ：则表示超时。</li>\n</ul>\n</li>\n</ul>\n<p><img loading=\"lazy\" src=\"/images/ioduolu.webp\" alt=\"\"></p>\n<p>另外初始化 <code>fd_set</code>  类型的参数还需要使用相关的一些列操作函数，具体如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span>fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的所有文件描述符对应的标志位都设置为 0，表示集合中没有文件描述符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的 fd 文件描述符对应的标志位设置为 1，表示集合中有该文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的 fd 文件描述符对应的标志位设置为 0，表示集合中没有该文件描述符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断 set 集合中的 fd 文件描述符对应的标志位是否为 1，如果为 1 则表示集合中有该文件描述符，否则表示集合中没有该文件描述符</span></pre></td></tr></table></figure><h1 id=\"poll\"><a class=\"markdownIt-Anchor\" href=\"#poll\">#</a> poll</h1>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 文件描述符 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">short</span> events<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 监控的事件 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">short</span> revents<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 实际发生的事件 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token operator\">*</span>fds<span class=\"token punctuation\">,</span> nfds_t nfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>fds</code> ：需要检测的文件描述符集合，即检测这些文件描述符对应的读缓冲区状态、写缓冲区状态、异常状态。\n<ul>\n<li><code>传入传出参数</code> ，读集合一般情况下是需要检测的，这样测能直到通过哪些文件描述符接收数据。</li>\n<li><code>pollfd</code>  结构体数组，每个 <code>pollfd</code>  结构体表示一个文件描述符的检测信息，包括文件描述符、检测的事件、实际发生的事件。</li>\n</ul>\n</li>\n<li><code>nfds</code> ：需要检测的文件描述符的个数，即检测的文件描述符从 0 到 <code>nfds-1</code> ， <code>nfds</code>  的值通常为待检测的<em>最大文件描述符</em>加 1。\n<ul>\n<li>内核需要线程遍历这些集合中的文件描述符，这个值是循环结束的条件。</li>\n</ul>\n</li>\n<li><code>timeout</code> ：超时时间，即检测文件描述符状态的超时时间。</li>\n<li>函数返回值：\n<ul>\n<li>大于 <code>0</code> ：成功，返回集合中已就绪的文件描述符的个数。</li>\n<li>等于 <code>-1</code> ：则表示出错。</li>\n<li>等于 <code>0</code> ：则表示超时。</li>\n</ul>\n</li>\n</ul>\n<p>创建监听的套接字 lfd = socket ();<br>\n 将监听的套接字和本地的 IP 和端口绑定 bind ()<br>\n 给监听的套接字设置监听 listen ()<br>\n 创建一个文件描述符集合 fd_set，用于存储需要检测读事件的所有的文件描述符<br>\n通过 FD_ZERO () 初始化<br>\n通过 FD_SET () 将监听的文件描述符放入检测的读集合中<br>\n循环调用 select ()，周期性的对所有的文件描述符进行检测<br>\n select () 解除阻塞返回，得到内核传出的满足条件的就绪的文件描述符集合<br>\n通过 FD_ISSET () 判断集合中的标志位是否为 1<br>\n 如果这个文件描述符是监听的文件描述符，调用 accept () 和客户端建立连接<br>\n将得到的新的通信的文件描述符，通过 FD_SET () 放入到检测集合中<br>\n如果这个文件描述符是通信的文件描述符，调用通信函数和客户端通信<br>\n如果客户端和服务器断开了连接，使用 FD_CLR () 将这个文件描述符从检测集合中删除<br>\n如果没有断开连接，正常通信即可</p>\n<p><strong>服务端并发实现：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IPV4, TCP, 默认协议</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定 IP 和端口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> saddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 IPV4</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 端口</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0=0.0.0.0 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saddr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>saddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置监听</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    fd_set redset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> maxfd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        fd_set temp <span class=\"token operator\">=</span> redset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>maxfd <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 判断是不是监听 fd</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 接受客户端的连接</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span> redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            maxfd <span class=\"token operator\">=</span> cfd <span class=\"token operator\">></span> maxfd <span class=\"token operator\">?</span>cfd<span class=\"token operator\">:</span>maxfd <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> maxfd<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>fd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client say : %s\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开连接。。\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 关闭文件描述符</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>select 与 poll 的并发性能比较：</p>\n<ul>\n<li><code>select</code>  函数的 <code>fd_set</code>  类型参数，在每次调用 <code>select</code>  函数时，都需要重新设置，而 <code>poll</code>  函数的 <code>pollfd</code>  类型参数，只需要在第一次调用 <code>poll</code>  函数时设置一次，之后每次调用 <code>poll</code>  函数时，只需要修改需要检测的文件描述符的 <code>pollfd</code>  结构体即可。</li>\n</ul>\n<h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h2 id=\"线程池\"><a class=\"markdownIt-Anchor\" href=\"#线程池\">#</a> 线程池</h2>\n<p><strong>函数指针在线程池中的应用</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义任务结构体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 线程池中的工作线程执行任务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">worker_thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span><span class=\"token operator\">*</span> task <span class=\"token operator\">=</span> <span class=\"token function\">get_task_from_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        task<span class=\"token operator\">-></span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行具体任务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>​灵活性</strong>：可以动态添加不同类型的任务（如网络请求、文件操作、计算任务）。</li>\n<li><strong>​解耦</strong>： 线程池代码无需知道任务具体内容，只需调用  <code>function(arg)</code> 。</li>\n</ul>\n",
            "tags": [
                "I/O多路复用"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/06/15/C++/2024-6-15-Socket/",
            "url": "https://zhang3399.github.io/2024/06/15/C++/2024-6-15-Socket/",
            "title": "Socket",
            "date_published": "2024-06-15T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>Socket 是网络编程的一个抽象概念，它是对 <code>TCP/IP</code>  协议的封装，提供了一组接口，使得程序员可以更方便地使用网络功能。</p>\n</blockquote>\n<h1 id=\"socket的原理\"><a class=\"markdownIt-Anchor\" href=\"#socket的原理\">#</a> Socket 的原理</h1>\n<p><code>Socket</code>  的原理是基于 <code>TCP/IP</code>  协议的，它通过 <code>TCP/IP</code>  协议来传输数据。 <code>TCP/IP</code>  协议是一种网络通信协议，它定义了计算机之间如何进行通信。</p>\n<h2 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p><code>TCP</code> （Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。它提供了一种可靠的、有序的、无重复的数据传输方式。 <code>TCP</code>  协议通过三次握手建立连接，通过四次挥手断开连接。在数据传输过程中， <code>TCP</code>  协议会进行流量控制和拥塞控制，以保证数据的可靠传输。</p>\n<p><strong>三次握手：</strong></p>\n<ul>\n<li>客户端向服务器发送一个 <code>SYN</code>  包，表示请求建立连接。</li>\n<li>服务器收到 <code>SYN</code>  包后，向客户端发送一个 <code>SYN-ACK</code>  包，表示同意建立连接。</li>\n<li>客户端收到 <code>SYN-ACK</code>  包后，向服务器发送一个 ACK 包，表示确认建立连接。</li>\n</ul>\n<p><strong>四次挥手：</strong></p>\n<ul>\n<li>客户端向服务器发送一个 <code>FIN</code>  包，表示请求断开连接。</li>\n<li>服务器收到 FIN 包后，向客户端发送一个 <code>ACK</code>  包，表示确认断开连接。</li>\n<li>服务器向客户端发送一个 FIN 包，表示请求断开连接。</li>\n<li>客户端收到 <code>FIN</code>  包后，向服务器发送一个 <code>ACK</code>  包，表示确认断开连接。</li>\n</ul>\n<p><img loading=\"lazy\" src=\"/images/tcp.webp\" alt=\"\"></p>\n<h1 id=\"socket的使用\"><a class=\"markdownIt-Anchor\" href=\"#socket的使用\">#</a> Socket 的使用</h1>\n<h2 id=\"服务器端通信流程\"><a class=\"markdownIt-Anchor\" href=\"#服务器端通信流程\">#</a> 服务器端通信流程</h2>\n<ol>\n<li>创建用于监听的套接字，这个套接字是一个文件描述符:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span> AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>socket</code>  接受三个参数，分别是 <code>地址族</code> 、 <code>套接字类型</code> 和 <code>协议类型</code> 。<br>\n <code>AF_INET</code>  表示使用 <code>IPv4</code>  协议， <code>SOCK_STREAM</code>  表示使用 <code>TCP</code>  协议， <code>0</code>  表示使用默认协议。</p>\n<ol start=\"2\">\n<li>绑定套接字到指定的 IP 地址和端口号:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用本地 IP 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用指定的端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>bind</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>地址结构体</code> 和 <code>地址结构体</code> 的大小。</p>\n<ol start=\"3\">\n<li>监听套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>listen 接受两个参数，分别是 <code>套接字描述符</code> 和 <code>监听队列的长度</code> 。</p>\n<ol start=\"4\">\n<li>接受客户端连接:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cli_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>socklen_t cli_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cli_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cli_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cli_len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>accept</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>客户端地址结构体</code> 和 <code>客户端地址结构体</code> 的大小。</p>\n<ol start=\"5\">\n<li>读取客户端发送的数据:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>read</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>缓冲区</code> 和 <code>缓冲区大小</code> 。</p>\n<ol start=\"6\">\n<li>发送数据给客户端:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>write</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>数据</code> 和 <code>数据大小</code> 。</p>\n<ol start=\"7\">\n<li>关闭套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span> lfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭监听套接字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span> cfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭客户端套接字</span></pre></td></tr></table></figure><p><code>close</code>  接受一个参数，即 <code>套接字描述符</code> 。</p>\n<p>服务端程序的完整代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建用于监听的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定套接字到指定的 IP 地址和端口号</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 3. 监听套接字</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 4. 接受客户端连接</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cli_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    socklen_t cli_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cli_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cli_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cli_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 5. 读取客户端发送的数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv buf: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 6. 发送数据给客户端</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 7. 关闭套接字</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"客户端通信流程\"><a class=\"markdownIt-Anchor\" href=\"#客户端通信流程\">#</a> 客户端通信流程</h2>\n<ol>\n<li>创建用于连接的套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span> AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>连接服务器:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用服务器的 IP 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用指定的端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>发送数据给服务器:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>读取服务器发送的数据:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>关闭套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span> cfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>客户端程序的完整代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建用于连接的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 连接服务器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 3. 发送数据给服务器</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 4. 读取服务器发送的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv buf: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 5. 关闭套接字</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Socket"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93/2023-10-12-SQL/",
            "url": "https://zhang3399.github.io/2024/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93/2023-10-12-SQL/",
            "title": "SQL",
            "date_published": "2024-06-15T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>SQL (Structured Query Language) 是用于管理和操作关系数据库的标准化编程语言。它允许用户执行各种操作，如查询、更新、插入和删除数据，以及管理数据库结构和权限。</p>\n</blockquote>\n<p><strong>SQL 分类：</strong></p>\n<ol>\n<li><code>DDL</code>  数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li><code>DML</code>  数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li><code>DQL</code>  数据查询语言，用来查询数据库中的记录</li>\n<li><code>DCL</code>  数据控制语言，用来创建数据库用户、控住数据库的访问权限</li>\n</ol>\n<h1 id=\"ddl-数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#ddl-数据库操作\">#</a> DDL - 数据库操作</h1>\n<p>查询：查询所有数据库   <code>SHOW DATABASES</code>  ; 查询当前数据库  <code>SELECT DATABASE()</code> ;<br>\n 创建： <code>CREATE DATABASE [IF NOT EXISTS]</code>  数据库名  <code>【DEFAULT CHARSET字符集】``【COLLATE排序规则】</code> ;<br>\n 删除： <code>DROP DATABASE【IF EXISTS】</code>  数据库名；<br>\n使用： <code>USE</code>  数据库名；</p>\n<p><strong>DDL - 表操作 - 查询</strong><br>\n查询当前数据库所有表 : <code>SHOW TABLES</code> ;<br>\n 查询表结构： <code>DESC</code>  表名；<br>\n查询指定表的建表语句： <code>SHOW CREATE TABLE</code>  表名；<br>\n<strong>DDL - 表操作 - 创建</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    字段<span class=\"token number\">1</span>\t字段<span class=\"token number\">1</span>类型 <span class=\"token keyword\">COMMENT</span> 字段<span class=\"token number\">1</span>注释，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段<span class=\"token number\">2</span>\t字段<span class=\"token number\">2</span>类型 <span class=\"token keyword\">COMMENT</span> 字段<span class=\"token number\">2</span>注释，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段<span class=\"token number\">3</span>\t字段<span class=\"token number\">3</span>类型 <span class=\"token keyword\">COMMENT</span> 字段<span class=\"token number\">3</span>注释，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    字段n\t字段n类型 <span class=\"token keyword\">COMMENT</span> 字段n注释</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> 表注释；      <span class=\"token comment\">## 注意：【...】为可选参数，最后一个字段后面没有逗号</span></pre></td></tr></table></figure><p><strong>DDL - 表操作 - 数值类型</strong><br>\n MySQL 中的数据类型很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p>\n<ul>\n<li>数值类型：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th>大小</th>\n<th style=\"text-align:center\">范围（有符号）</th>\n<th style=\"text-align:center\">范围（无符号）</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>TINYINT</code></td>\n<td>1 字节</td>\n<td style=\"text-align:center\">±(2^7)-1</td>\n<td style=\"text-align:center\">0~255</td>\n<td style=\"text-align:center\">小整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SMALLINT</code></td>\n<td>2 字节</td>\n<td style=\"text-align:center\">±(2^15)-1</td>\n<td style=\"text-align:center\">0~65 535</td>\n<td style=\"text-align:center\">大整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MEDIUMINT</code></td>\n<td>3 字节</td>\n<td style=\"text-align:center\">±(2^23)-1</td>\n<td style=\"text-align:center\">0~16 777 215</td>\n<td style=\"text-align:center\">大整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>INT或INTEGER</code></td>\n<td>4 字节</td>\n<td style=\"text-align:center\">±(2^31)-1</td>\n<td style=\"text-align:center\">0~4 294 967 295</td>\n<td style=\"text-align:center\">大整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BIGINT</code></td>\n<td>8 字节</td>\n<td style=\"text-align:center\">±(2^63)-1</td>\n<td style=\"text-align:center\">0~18 446 744 073 709 551 615</td>\n<td style=\"text-align:center\">极大整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>FLOAT</code></td>\n<td>4 字节</td>\n<td style=\"text-align:center\">±(1.175494351E-38)</td>\n<td style=\"text-align:center\">±(3.402823466E+38)</td>\n<td style=\"text-align:center\">单精度浮点数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DOUBLE</code></td>\n<td>8 字节</td>\n<td style=\"text-align:center\">±(2.2250738585072014E-308)</td>\n<td style=\"text-align:center\">±(1.7976931348623157E+308)</td>\n<td style=\"text-align:center\">双精度浮点数值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>字符串类型：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">大小</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>CHAR</code></td>\n<td style=\"text-align:center\">0~255 字节</td>\n<td style=\"text-align:center\">定长字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>VARCHAR</code></td>\n<td style=\"text-align:center\">0~65535 字节</td>\n<td style=\"text-align:center\">变长字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TINYBLOB</code></td>\n<td style=\"text-align:center\">0~255 字节</td>\n<td style=\"text-align:center\">不超过 255 个字符的二进制字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TINYTEXT</code></td>\n<td style=\"text-align:center\">0~255 字节</td>\n<td style=\"text-align:center\">短文本字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BLOB</code></td>\n<td style=\"text-align:center\">0~65 535 字节</td>\n<td style=\"text-align:center\">二进制形式的长文本数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TEXT</code></td>\n<td style=\"text-align:center\">0~65 535 字节</td>\n<td style=\"text-align:center\">长文本数据</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>日期时间类型：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">大小（字节）</th>\n<th style=\"text-align:center\">范围</th>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>DATE</code></td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">1000-01-01/9999-12-31</td>\n<td style=\"text-align:center\">YYYY-MM-DD</td>\n<td style=\"text-align:center\">日期值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TIME</code></td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">‘-838:59:59’/‘838:59:59’</td>\n<td style=\"text-align:center\">HH:MM:SS</td>\n<td style=\"text-align:center\">时间值或持续时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>YEAR</code></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1901/2155</td>\n<td style=\"text-align:center\">YYYY</td>\n<td style=\"text-align:center\">年份值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DATETIME</code></td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">1000-01-01 00:00:00/9999-12-31 23:59:59</td>\n<td style=\"text-align:center\">YYYY-MM-DD HH:MM:SS</td>\n<td style=\"text-align:center\">混合日期和时间值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TIMESTAMP</code></td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">1970-01-01 00:00:01/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td>\n<td style=\"text-align:center\">YYYY-MM-DD HH:MM:SS</td>\n<td style=\"text-align:center\">混合日期和时间值，时间戳</td>\n</tr>\n</tbody>\n</table>\n<p><strong>DDL - 表操作 - 修改</strong></p>\n<ol>\n<li>添加字段： <code>ALTER TABLE</code>  表名 <code>ADD</code>  字段名 类型（长度） <code>【COMMENT 注释】``【约束】</code> ;</li>\n<li>修改数据类型： <code>ALTER TABLE</code>  表名 <code>MODIFY</code>  字段名 新数据类型（长度）;</li>\n<li>修改字段名和字段类型： <code>ALTER TABLE</code>  表名 <code>CHANGE</code>  旧字段名 新字段名 类型（长度） <code>【COMMENT注释】``【约束】</code> ;</li>\n<li>删除字段： <code>ALTER TABLE</code>  表名 <code>DROP</code>  字段名；</li>\n<li>修改表名： <code>ALTER TABLE</code>  表名  <code>RENAME TO</code>  新表名；</li>\n<li>删除表： <code>DROP TABLE【IF EXISTS】</code> 表名；</li>\n<li>删除指定表，并重新创建该表： <code>TRUNCATE TABLE</code>  表名；</li>\n</ol>\n<h1 id=\"dml-介绍\"><a class=\"markdownIt-Anchor\" href=\"#dml-介绍\">#</a> DML - 介绍</h1>\n<blockquote>\n<p>DML 英文全称是 Data Manipulation Language (数据操作语言)，用来对数据库中的数据记录进行增删改操作。</p>\n</blockquote>\n<p><strong>DML - 添加数据：</strong></p>\n<ol>\n<li>给制定字段添加数据：<br>\n <code>INSERT INTO</code>  表名 (字段名 1，字段名 2，…)  <code>VALUES</code> （值 1，值 2，…）；</li>\n<li>给全部字段添加数据：<br>\n <code>INSERT INTO</code>  表名 <code>VALUES</code> （值 1，值 2，…）；</li>\n<li>批量添加数据：<br>\n <code>INSERT INTO</code>  表名（字段名 1，字段名 2，…） <code>VALUES</code> （值 1，值 2，…），（值 1，值 2，…）；<br>\n <code>INSERT INTO</code>  表名（值 1，值 2，…），（值 1，值 2，…），（值 1，值 2，…）；</li>\n<li>DML - 修改数据：<br>\n <code>UPDATE</code>  表名  <code>SET</code>   <code>字段名1 = 值1</code> ， <code>字段名2 = 值2</code> ，…【WHERE 条件】；</li>\n<li>DML - 删除数据：<br>\n <code>DELETE FROM</code>  表名【WHERE 条件】</li>\n</ol>\n<h1 id=\"dql-介绍\"><a class=\"markdownIt-Anchor\" href=\"#dql-介绍\">#</a> DQL - 介绍</h1>\n<blockquote>\n<p>DQL 英文全称是 Data Query Language (数据查询语言)，数据查询语言，用于查询数据库中表的记录。查询关键字：SELECT<br>\n<strong>DQL - 基本查询：</strong></p>\n</blockquote>\n<ol>\n<li>查询多个字段：<br>\n <code>SELECT</code>  字段，字段 2，字段 3 …  <code>FROM</code>  表名；<br>\n <code>SELECT</code>  *  <code>FROM</code>  表名；</li>\n<li>设置别名：<br>\n <code>SELECT</code>  字段 1【 <code>AS</code>  别名】，字段 2【 <code>AS</code>  别名】 …  <code>FROM</code>  表名；</li>\n<li>去除重复记录：<br>\n <code>SELECT DISTINCT</code>  字段列表  <code>FROM</code>  表名；</li>\n<li>DQL - 条件查询\n<ul>\n<li>语法：<br>\n <code>SELECT</code>  字段列表  <code>FROM</code>  表名  <code>WHERE</code>  条件列表；</li>\n<li>条件：<br>\n比较运算符:</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">比较运算符</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&gt;</code></td>\n<td style=\"text-align:center\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code></td>\n<td style=\"text-align:center\">大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td style=\"text-align:center\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;&gt;</code>  或 <code>!=</code></td>\n<td style=\"text-align:center\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BETWEEN…AND</code></td>\n<td style=\"text-align:center\">在某个范围之内（含最小、最大值）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>IN（…）</code></td>\n<td style=\"text-align:center\">在 IN 之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>LIKE</code>  占位符</td>\n<td style=\"text-align:center\">模糊匹配（… 匹配单个字符，% 匹配热议字符）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>IS NULL</code></td>\n<td style=\"text-align:center\">是 NULL</td>\n</tr>\n</tbody>\n</table>\n<p>逻辑运算符:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">逻辑运算符</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>AND</code>  或 <code>&amp;&amp;</code></td>\n<td style=\"text-align:center\">并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>OR</code>  或 <code>||</code></td>\n<td style=\"text-align:center\">或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>NOT</code>  或！</td>\n<td style=\"text-align:center\">非，不是</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"5\">\n<li>DQL- 聚合函数</li>\n</ol>\n<ul>\n<li>介绍：将一列数据作为一个整体，进行纵向计算。</li>\n<li>常见聚合函数：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>COUNT</code></td>\n<td style=\"text-align:center\">统计数量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MAX</code></td>\n<td style=\"text-align:center\">最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MIN</code></td>\n<td style=\"text-align:center\">最下值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>AVG</code></td>\n<td style=\"text-align:center\">平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SUM</code></td>\n<td style=\"text-align:center\">求和</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>语法：<br>\n <code>SELECT</code>  聚合函数（字段列表） <code>FROM</code>  表名；</li>\n</ul>\n<ol start=\"6\">\n<li>DQL - 分组查询</li>\n</ol>\n<ul>\n<li>语法<br>\n <code> SELECT</code>  字段列表  <code>FROM</code>  表名【WHERE 条件】 <code>GROUP BY</code>  分组字段名【HAVING 分组后过滤条件】；</li>\n<li><code>where</code>  与 <code>having</code>  区别:\n<ul>\n<li><strong>执行时机不同：</strong> where 是分组之前进行过滤，不满足 where 条件，不参与分组；而 having 是分组之后对结果进行过滤；</li>\n<li><strong>判断条件不同：</strong> where 不能对聚类函数进行判断，而 having 可以。<br>\n<strong>【注意】</strong><br>\n执行顺序：where &gt; 聚合函数 &gt; having<br>\n 分组之后，查询的字段一般为聚合函数和分组字段，那其他字段无任何意义</li>\n</ul>\n</li>\n</ul>\n<ol start=\"7\">\n<li>DQL - 排序查询</li>\n</ol>\n<ul>\n<li>语法\n<ul>\n<li><code>SELECT</code>  字段列表  <code>FROM</code>  表名  <code>ORDER BY</code>  字段 1 排序方式 1，字段 2 排序方式 2；</li>\n</ul>\n</li>\n<li>排序方式\n<ul>\n<li><code>ASC</code>  (ascend)：升序（默认）</li>\n<li><code>DESC</code>  (descend)：降序</li>\n</ul>\n</li>\n</ul>\n<p><strong>【注意】</strong> 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p>\n<ol start=\"8\">\n<li>DQL - 分页查询\n<ul>\n<li><code>LIMIT</code>  控制查询的起始位置和条目数:</li>\n<li><code>OFFSET</code>  指定起始索引， <code>LIMIT</code>  指定查询条目数：<br>\n <code>SELECT</code>  字段列表  <code>FROM</code>  表名  <code>LIMIT</code>  查询条目数  <code>OFFSET</code>  起始索引；</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p><strong>【注意】</strong></p>\n<ul>\n<li>起始索引从 0 开始，起始索引 = （查询页数 - 1）* 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同的数据库有不同的实现， <code>MYSQL</code>  中是 <code>LIMIT</code></li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写为 <code>limit 10</code></li>\n<li>如果查询无结果，会返回空的结果集，不会报错。</li>\n</ul>\n</blockquote>\n<h1 id=\"dcl-介绍\"><a class=\"markdownIt-Anchor\" href=\"#dcl-介绍\">#</a> DCL - 介绍</h1>\n<blockquote>\n<p>DCL 英文全称 Data Control Language (数据控制语言)，用来管理数据库用户、控制数据库的访问权限。</p>\n</blockquote>\n<ol>\n<li>DCL - 管理用户</li>\n</ol>\n<ul>\n<li>查询用户：<br>\n <code>USE</code>  mysql;<br>\n <code>SELECT</code>  *  <code>FROM</code>  user;</li>\n<li>创建用户<br>\n <code>CREATE USER</code>  ‘用户名’@‘主机名’  <code>IDENTIFIED BY</code>  ‘密码’；</li>\n<li>修改用户密码<br>\n <code>ALTER USER</code>  ‘用户名’@‘主机名’ <code>IDENTIFIED WITH</code>  mysql_native_password  <code>BY</code> ‘新密码’；</li>\n<li>删除用户<br>\n <code>DROP USER</code>  ‘用户名’@‘主机名’；<br>\n<strong>【注意】</strong></li>\n<li>主机名可以使用 % 通配，示例： <code>'root'@'localhost'</code>  表示只能在本地登录； <code>'root'@'%'</code>  表示可以在任意主机登录</li>\n<li>这类 SQL 开发人员操作的比较少，主要是 DBA（Database Administrator 数据库管理员）使用。</li>\n</ul>\n<ol start=\"2\">\n<li>DCL - 权限控制<br>\n MySQL 中定义了很多种权限，但是常用的就一下几种:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">权限</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ALL</code>  、 <code>ALL PRIVILEGES</code></td>\n<td style=\"text-align:center\">所有权限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SELECT</code></td>\n<td style=\"text-align:center\">查询数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>INSERT</code></td>\n<td style=\"text-align:center\">插入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>UPDATE</code></td>\n<td style=\"text-align:center\">修改数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DELETE</code></td>\n<td style=\"text-align:center\">删除数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ALTER</code></td>\n<td style=\"text-align:center\">修改表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DROP</code></td>\n<td style=\"text-align:center\">删除数据库 / 表 / 视图</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>CREATE</code></td>\n<td style=\"text-align:center\">创建数据库 / 表</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>查询权限<br>\n <code>SHOW</code>   <code>GRANTS</code>   <code>FOR</code>  ‘用户名’@‘主机名’；</li>\n<li>授予权限<br>\n <code>GRANT</code>  权限列表  <code>ON</code>  数据库名 表名  <code>TO</code>  ‘用户名’@‘主机名’；</li>\n<li>撤销权限<br>\n <code>REVOKE</code>  权限列表  <code>ON</code>  数据库名 表名  <code>FROM</code>  ‘用户名’@‘主机名’；</li>\n</ul>\n<p><strong>表插入数据：</strong></p>\n<ul>\n<li>给指定字段添加数据：<br>\n <code>INSERT INTO</code>  表名 (字段名 1，字段名 2，…)  <code>VALUES</code> （值 1，值 2，…）；</li>\n<li>给全部字段添加数据：<br>\n <code>INSERT INTO</code>  表名 <code>VALUES</code> （值 1，值 2，…）；</li>\n<li>批量添加数据：<br>\n <code>INSERT INTO</code>  表名（字段名 1，字段名 2，…） <code>VALUES</code> （值 1，值 2，…），（值 1，值 2，…）；<br>\n <code>INSERT INTO</code>  表名（值 1，值 2，…），（值 1，值 2，…），（值 1，值 2，…）；<br>\n<strong>表修改数据：</strong><br>\n <code>UPDATE</code>  表名  <code>SET</code>   <code>字段名1 = 值1</code> ， <code>字段名2 = 值2</code> ，…【WHERE 条件】；<br>\n<strong>表删除数据：</strong><br>\n <code>DELETE FROM</code>  表名【WHERE 条件】</li>\n</ul>\n<blockquote>\n<p><strong>【注意】</strong></p>\n<ul>\n<li>多个权限之间，使用逗号分隔</li>\n<li>授权书，数据库名和表名可以使用 * 进行通配，代表所有。</li>\n</ul>\n</blockquote>\n<p><strong>【函数】</strong><br>\n一段可以直接被另一程序调用的程序或代码<br>\n字符串函数：MySQL 中内置了很多字符串函数，常用的几个如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>CONCAT（S1,S2,..Sn）</code></td>\n<td style=\"text-align:center\">字符串拼接，将 S1,S2,…Sn 拼接成一个字符穿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>LOWER（str）</code></td>\n<td style=\"text-align:center\">将字符串 str 全部转为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>UPPER（str）</code></td>\n<td style=\"text-align:center\">将字符串 str 全部转为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>LPAD（str,n,pad）</code></td>\n<td style=\"text-align:center\">左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>RPAD（str，n，pad）</code></td>\n<td style=\"text-align:center\">右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TRIM（str）</code></td>\n<td style=\"text-align:center\">去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SUBSTRING(str,start,len)</code></td>\n<td style=\"text-align:center\">返回从字符串 str 从 start 位置的 len 个长度的字符串</td>\n</tr>\n</tbody>\n</table>\n<p><strong>数值函数：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>CEIL(X)</code></td>\n<td style=\"text-align:center\">向上取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>FLOOR(X)</code></td>\n<td style=\"text-align:center\">向下取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MOD(x,y)</code></td>\n<td style=\"text-align:center\">返回 x/y 的模</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>RAND()</code></td>\n<td style=\"text-align:center\">返回 0~1 内的随机数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ROUND(X,Y)</code></td>\n<td style=\"text-align:center\">求参数 x 的四舍五入的值，保留 y 位小数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>日期函数：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>CURDATE()</code></td>\n<td style=\"text-align:center\">返回当前日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>CURTIME()</code></td>\n<td style=\"text-align:center\">返回当前时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>NOW()</code></td>\n<td style=\"text-align:center\">返回当前日期和时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>YEAR(date)</code></td>\n<td style=\"text-align:center\">获取制定 date 的年份</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MONTH(date)</code></td>\n<td style=\"text-align:center\">获取指定 date 的月份</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DAY（date）</code></td>\n<td style=\"text-align:center\">获取指定 date 的日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DATE_ADD(date, INTERVAL expr type)</code></td>\n<td style=\"text-align:center\">返回日期 / 时间值加时间间隔 expr 后的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DATEDIFF(date1,date2)</code></td>\n<td style=\"text-align:center\">返回起始时间 date1 和结束 date2 之间天数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>流程函数：</strong><br>\n流程函数也是很常用的一类函数，可以在 SQL 语句中实现条件筛选，从而提高语句的效率。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>IF(value,t,f)</code></td>\n<td style=\"text-align:center\">如果 value 为 true, 则返回 t，否则返回 f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>IFNULL（value1,value2）</code></td>\n<td style=\"text-align:center\">如果 value1 不为空，返回 value1，否则返回 value2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>CASE</code>   <code>WHEN</code> 【val1】 <code>THEN</code> 【res1】… <code>ELSE</code> 【dafault】 <code>END</code></td>\n<td style=\"text-align:center\">如果 val1 为 true, 返回 res1,… 否则返回 default 默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>CASE</code> 【expr】 <code>WHEN</code> 【val1】 <code>THEN</code> 【res1】… <code>ELSE</code> 【default】 <code>END</code></td>\n<td style=\"text-align:center\">如果 expr 的值等于 val1, 返回 res1,… 否则返回 default 默认值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>约束</strong></p>\n<ul>\n<li>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</li>\n<li>目的：保证数据库中数据的正确、有效性和完整性<br>\n<strong>分类：</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">约束</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">非空约束</td>\n<td style=\"text-align:center\">限制该字段的数据不能为 NULL</td>\n<td style=\"text-align:center\">NOT NULL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">唯一约束</td>\n<td style=\"text-align:center\">保证该字段的所有数据都是唯一、不重复的</td>\n<td style=\"text-align:center\">UNIQUE</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">主键约束</td>\n<td style=\"text-align:center\">主键是一行数据的唯一标识、要求非空且唯一</td>\n<td style=\"text-align:center\">PRIMARY</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">默认约束</td>\n<td style=\"text-align:center\">保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td style=\"text-align:center\">DEFCK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">检查约束（8.0.16 版本之后）</td>\n<td style=\"text-align:center\">保证字段满足某一个条件</td>\n<td style=\"text-align:center\">CHECK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">外键约束</td>\n<td style=\"text-align:center\">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>\n<td style=\"text-align:center\">FOREIGN KEY</td>\n</tr>\n</tbody>\n</table>\n<p><strong>【注意】：约束是作用于表中字段上的，可以在创建表 / 修改表的时候添加约束。</strong><br>\n<strong>外键约束</strong></p>\n<ul>\n<li>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</li>\n<li>语法：\n<ul>\n<li>添加外键：</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名（</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t字段名 数据类型，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t…</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t【<span class=\"token keyword\">CONSTRAINT</span>】【外键名称】<span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> （外键字段名） <span class=\"token keyword\">REFERENCES</span> 主表（主表列名）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t）；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键名称 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> （外键字段名） <span class=\"token keyword\">REFERENCES</span> 主表（主表列名）；</pre></td></tr></table></figure><ul>\n<li>删除外键：<br>\n <code>ALTER TABLE</code>  表名  <code>DROP</code>   <code>FPREIGN</code>   <code>KEY</code>  外键名称；</li>\n<li>删除 / 更新行为：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">行为</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>NO ACTION</code></td>\n<td style=\"text-align:center\">当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新。（与 RESTRICT 一致）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>RESTRICT</code></td>\n<td style=\"text-align:center\">当父表中删除 / 更新记录时，首先检查记录是否有对应外键，如果有则不允许删除 / 更新。（与 NO ACTION 一致）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>CASCADE</code></td>\n<td style=\"text-align:center\">当父表中删除 / 更新记录时，首先检查记录是否有对应外键，如果有，则也删除 / 更新外键在子表中的记录。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SET NULL</code></td>\n<td style=\"text-align:center\">当父表中删除 / 更新记录时，首先检查记录是否有对应外键，如果有则设置子表中该外键值为 NULL（这就要求该外键允许取 NULL）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SET DEFAULT</code></td>\n<td style=\"text-align:center\">父表有变更时，子表将外键列设置成一个默认的值（lnnodb 不支持）</td>\n</tr>\n</tbody>\n</table>\n<p><code>ALTER TABLE</code>  表名  <code>ADD CONSTRAINT</code>  外键名称  <code>FOREIGN KEY</code>  (外键字段)  <code>REFERENCES</code>  主表名</p>\n<h1 id=\"多表查询\"><a class=\"markdownIt-Anchor\" href=\"#多表查询\">#</a> 多表查询</h1>\n<p><strong>多表关系</strong><br>\n项目开发中，在进行数据库表格结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本分为三种： 一对多（多对一）、多对多、一对一。</p>\n<ol>\n<li>一对多（多对一）：<br>\n案例：部门与员工的关系<br>\n关系：一个部门对应多个员工，一个员工对应一个部门<br>\n实现：在多的一方（员工表）建立外键，指向一的一方（部门表）的主键</li>\n<li>多对多：<br>\n案例：学生与课程的关系<br>\n关系：一个学生可以选修对门课程，一门课程也可以供多个学生选择<br>\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li>\n<li>一对一：<br>\n案例：用户与用户详情的关系<br>\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提高操作效率。<br>\n实现：在任意一方加入外键，关联另一方的主键，并且设置外键为唯一的（UNIQUE）<br>\n<strong>多表查询概述：</strong><br>\n概述：指从多张表中查询数据。<br>\n笛卡尔积：笛卡尔乘积是指在数学中，两个集合 A 集合和 B 集合的所有组合情况。（在多表查询时，需要消除无效的笛卡尔积）。<br>\n<strong>多表查询分类：</strong></li>\n<li>连接查询：\n<ul>\n<li>内连接：相当于查询 A、B 交集部分数据</li>\n<li>外连接：\n<ul>\n<li>左外连接：查询左表所有数据，以及两张表交集部分数据</li>\n<li>右外连接：查询右表所有数据，以及两张表交集部分数据</li>\n</ul>\n</li>\n<li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li>\n</ul>\n</li>\n<li>子查询：\n<ul>\n<li>连接查询 - 内连接（查询两表交集的部分）</li>\n</ul>\n</li>\n<li>内连接查询语法： <code>（A inner join B：AB两表值都存在）</code>\n<ul>\n<li>隐式内连接：\n<ul>\n<li>SELECT 字段列表 FROM 表 1，表 2 WHERE 条件…；</li>\n</ul>\n</li>\n<li>显示内连接：\n<ul>\n<li>SELECT 字段列表 FROM 表 1【INNER】JOIN 表 2 ON 连接条件…;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接查询 - 外连接： <code>（A 【outer】 join B：AB两表值可能存在null的情况）</code> <br>\n <code>A inner join B：</code> 取交集<br>\n <code>A left join B：</code> 取 A 全部，B 没有对应的值，则为 null<br>\n <code>A right join B：</code> 取 B 全部，A 没有对应的值，则为 null<br>\n <code>A full outer join B：</code> 取并集，彼此没有对应的值为 null</li>\n</ol>\n<ul>\n<li>外连接查询语法：\n<ul>\n<li>左外连接：\n<ul>\n<li><code>SELECT</code>  字段列表  <code>FROM</code>  表 1  <code>LEFT【OUTER】JOIN</code>  表 2  <code>ON</code>  条件…；</li>\n</ul>\n</li>\n<li>右外连接：\n<ul>\n<li>SELECT 字段列表 FROM 表 1  <code>RIGHT【OUTER】JOIN</code>  表 2  <code>ON</code>  条件…；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>连接查询 - 自连接：</li>\n</ol>\n<ul>\n<li>自连接查询语法：\n<ul>\n<li><code>SELECT</code>  字段列表  <code>FROM</code>  表 A 别名 A  <code>JOIN </code> 表 A 别名 B  <code>ON</code>  条件…；</li>\n</ul>\n</li>\n<li>自连接查询，可以是内连接查询，也可以是外连接查询。</li>\n</ul>\n<ol>\n<li>联合查询 - union,union all</li>\n</ol>\n<ul>\n<li>对于 union 查询，就是把多次查询结果联合起来，形成一个新的查询结果集</li>\n</ul>\n<h1 id=\"窗口函数\"><a class=\"markdownIt-Anchor\" href=\"#窗口函数\">#</a> 窗口函数</h1>\n<p>窗口函数又称为 OLAP 函数（Online Anallytical Processing，联机分析处理），可以对查询结果集中的每一行进行计算，并返回一个结果。窗口函数的返回值不依赖与查询中的其他行，只需要基于当前行通过 OVER 子句指定分析窗口即可。</p>\n<p><strong>窗口函数语法：</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>窗口函数<span class=\"token operator\">></span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>用于分组的类名:列<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 列<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>用于排序的列名<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li><code>PARTITION BY</code> ：指定分组列，即先按照某个字段进行分组。</li>\n<li><code>ORDER BY</code> ：指定排序的列，先按照某个字段进行排序。</li>\n<li><code>&lt;窗口函数&gt;</code> ：要使用的聚合函数或者专门的窗口函数。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>RANK() OVER()</code></td>\n<td style=\"text-align:center\">排名，相同排名会占用名次，名次不连续</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DENSE_RANK() OVER()</code></td>\n<td style=\"text-align:center\">排名，相同排名会占用名次，名次连续</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ROW_NUMBER() OVER()</code></td>\n<td style=\"text-align:center\">排名，相同排名也会占用名次，名次不连续</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>FIRST_VALUE() OVER()</code></td>\n<td style=\"text-align:center\">取分组内排序后，截止到当前行，第一个值</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"子查询\"><a class=\"markdownIt-Anchor\" href=\"#子查询\">#</a> 子查询</h1>\n<p>子查询是指嵌入在其他 SQL 语句中的 SELECT 语句，也叫嵌套查询。子查询可以嵌套在 SQL 语句中的 <code>WHERE</code> 、 <code>SELECT</code> 、 <code>FROM</code>  或 <code>HAVING</code>  子句中。<br>\n<strong>子查询语句分类：</strong></p>\n<ul>\n<li>单行子查询：子查询结果为单行单列，操作符有： <code>=</code> 、 <code>&lt;&gt;</code> 、 <code>&lt;</code> 、 <code>&lt;=</code> 、 <code>&gt;</code> 、 <code>&gt;=</code> 。</li>\n<li>多行子查询：子查询结果为多行单列或多行多列，操作符有： <code>IN</code> 、 <code>ANY</code> 、 <code>ALL</code> 。</li>\n</ul>\n",
            "tags": [
                "SQL"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/06/08/C++/2024-6-8-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://zhang3399.github.io/2024/06/08/C++/2024-6-8-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "数据处理及内存管理",
            "date_published": "2024-06-08T02:00:00.000Z",
            "content_html": "<h1 id=\"数据处理\"><a class=\"markdownIt-Anchor\" href=\"#数据处理\">#</a> 数据处理</h1>\n<h2 id=\"大小端转换\"><a class=\"markdownIt-Anchor\" href=\"#大小端转换\">#</a> 大小端转换</h2>\n<blockquote>\n<p>大端和小端是指字节序的存储方式，大端是指高位字节存储在低地址，小端是指低位字节存储在低地址。</p>\n</blockquote>\n<ol>\n<li>基本定义与存储方式<br>\n<strong>大端模式</strong>\n<ul>\n<li>高位字节存放在低地址上，低位字节存放在高地址上。</li>\n<li><code>0x12345678</code>  在内存中的存储方式为： <code>低地址--&gt; 0x12 0x34 0x56 0x78 --&gt;高地址</code> <br>\n<strong>小端模式</strong></li>\n<li>高位字节存放在高地址上，低位字节存放在低地址上。</li>\n<li><code>0x12345678</code>  在内存中的存储方式为：  <code>低地址--&gt;  0x78 0x56 0x34 0x12  --&gt;高地址</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>直观对比​（以 <code>0x1234</code>  为例）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>内存地址</th>\n<th>大端模式</th>\n<th>小端模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x4000</td>\n<td>0x12</td>\n<td>0x34</td>\n</tr>\n<tr>\n<td>0x4001</td>\n<td>0x34</td>\n<td>0x12</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>设计原因与应用场景</li>\n</ol>\n<p><strong>为何存在两种模式？</strong></p>\n<ul>\n<li><strong>硬件差异：</strong> 不同处理器架构对多字节数据的处理逻辑不同。例如，x86 架构（如 Intel/AMD CPU）采用小端模式，而 PowerPC、MIPS 等处理器多采用大端模式。</li>\n<li><strong>​效率考量：</strong> 小端模式在强制类型转换时无需调整字节顺序（直接截取低地址数据即可），而大端模式便于快速判断符号位（符号位位于低地址）</li>\n</ul>\n<p><strong>应用场景</strong></p>\n<ol>\n<li>\n<p><strong>网络通信</strong></p>\n<ul>\n<li><strong>网络传输：</strong> TCP/IP 协议规定数据传输采用大端模式 (网络字节序)，因此小端设备需通过 <code>htonl()</code>  等函数转换字节序传输。</li>\n<li>例如，发送 <code>0x12345678</code>  时，小端设备需先转换为大端模式 <code>0x78563412</code>  再传输，接收后需转回小端。</li>\n</ul>\n</li>\n<li>\n<p><strong>跨平台开发</strong></p>\n<ul>\n<li>文件存储（如二进制文件）需明确字节序，否则不同平台读取时可能出错。</li>\n<li>例如，嵌入式设备与服务器通信时需统一字节序。</li>\n</ul>\n</li>\n<li>\n<p><strong>判断当前系统的字节序</strong><br>\n可通过以下方法检测当前系统是大端还是小端：</p>\n</li>\n</ol>\n<ul>\n<li>** 联合体法：** 利用联合体的内存共享特性读取多字节数据的首字节。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isLittleEndian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">uint32_t</span> i<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">uint8_t</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x01020304</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> test<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为小端，则首字节为 0x04</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>** 宏定义法：** 利用宏定义计算多字节数据的值。<br>\n使用__BYTE_ORDER 宏（Linux/Unix）或 std::endian::native（C++20）直接判断</li>\n</ul>\n<ol start=\"4\">\n<li><strong>字节序转换函数</strong>\n<ul>\n<li><strong>大端转小端：</strong>\n<ul>\n<li><code>uint16_t ntohs(uint16_t netshort);</code> ：将 16 位无符号整数从网络字节序转换为主机字节序。(windows 下为 <code>htons</code> )</li>\n<li><code>uint32_t ntohl(uint32_t netlong);</code> ：将 32 位无符号整数从网络字节序转换为主机字节序。(windows 下为 <code>htonl</code> )</li>\n</ul>\n</li>\n<li><strong>小端转大端：</strong>\n<ul>\n<li><code>uint16_t htons(uint16_t hostshort);</code> ：将 16 位无符号整数从主机字节序转换到网络字节序。(windows 下为 <code>ntohs</code> )</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"野指针\"><a class=\"markdownIt-Anchor\" href=\"#野指针\">#</a> 野指针</h1>\n<blockquote>\n<p>指向无效内存地址（如未初始化、已释放或越界的内存）的指针，访问时可能导致程序崩溃或数据损坏</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//p 未初始化，指向随机地址（野指针）</span></pre></td></tr></table></figure><p><strong>野指针的常见成因:</strong></p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​未初始化指针</td>\n<td>指针变量未赋初值，默认指向随机内存区域</td>\n<td><code>int* p</code>  ;（未初始化为 NULL 或有效地址）</td>\n</tr>\n<tr>\n<td>​释放后未置空</td>\n<td><code>free</code>  或  <code>delete</code>  后未将指针设为  <code>NULL</code> ，仍指向已释放内存</td>\n<td><code>free(p)</code>  ; 后未执行  <code>p = NULL</code> ;</td>\n</tr>\n<tr>\n<td>​越界访问</td>\n<td>指针操作超出变量作用域（如返回局部变量地址）</td>\n<td>函数返回栈内存指针导致后续访问失效</td>\n</tr>\n</tbody>\n</table>\n<p><strong>规避野指针的最佳实践</strong></p>\n<ol>\n<li>初始化与置空\n<ul>\n<li>** 初始化：** 在声明指针时立即赋初值，避免指向随机内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化为 NULL</span></pre></td></tr></table></figure><ul>\n<li>** 置空：** 释放内存后立即将指针置为  <code>NULL</code> ，防止重复释放或访问已释放内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>作用域与生命周期管理\n<ul>\n<li><strong>作用域：</strong> 确保指针操作在变量有效作用域内，避免返回局部变量地址。</li>\n<li><strong>边界检查：</strong> 访问数组元素时进行边界检查，防止越界访问。</li>\n<li><strong>智能指针：</strong> 使用智能指针（如  <code>std::unique_ptr</code> 、 <code>std::shared_ptr</code> ）自动管理内存，避免手动释放内存带来的问题。</li>\n</ul>\n</li>\n<li>多线程环境下的防御措施\n<ul>\n<li><strong>隔离线程数据：</strong> 通过动态分配或线程局部存储（thread_local）为每个线程提供独立数据副本，避免数据竞争。</li>\n<li><strong>互斥锁：</strong> 在多线程访问共享数据时使用互斥锁（mutex）保护，防止并发访问导致的问题。</li>\n<li><strong>原子操作：</strong> 使用原子操作（atomic）确保对共享数据的访问是线程安全的。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"拷贝构造与运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造与运算符重载\">#</a> 拷贝构造与运算符重载</h1>\n<blockquote>\n<p>拷贝构造函数和赋值运算符重载是 C++ 中用于对象复制的两种机制，它们在对象创建和赋值时非常重要。</p>\n</blockquote>\n<h2 id=\"拷贝构造函数\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数\">#</a> 拷贝构造函数</h2>\n<p><strong>拷贝构造函数</strong>是一种特殊的构造函数，用于创建一个新对象，并将另一个对象的值复制到新对象中。它的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ClassName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ClassName<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>ClassName</code>  是类名， <code>other</code>  是另一个对象，类型为 <code>ClassName</code>  的引用。</p>\n<p><strong>拷贝构造函数的用途：</strong></p>\n<ol>\n<li><strong>对象初始化：</strong> 当使用一个已存在的对象来初始化另一个对象时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ClassName obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>函数参数传递：</strong> 当将一个对象作为函数参数传递时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ClassName obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>函数返回值：</strong> 当一个函数返回一个对象时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ClassName obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"赋值运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符重载\">#</a> 赋值运算符重载</h2>\n<p><strong>赋值运算符重载</strong>是一种运算符重载，用于将一个对象的值赋给另一个对象。它的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ClassName<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>ClassName</code>  是类名， <code>other</code>  是另一个对象，类型为 <code>ClassName</code>  的引用。</p>\n<p><strong>赋值运算符重载的用途：</strong></p>\n<ol>\n<li><strong>对象赋值：</strong> 当使用一个已存在的对象来赋值给另一个对象时，赋值运算符重载会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ClassName obj2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用赋值运算符重载</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>函数返回值：</strong> 当一个函数返回一个对象时，赋值运算符重载会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ClassName obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用赋值运算符重载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数与赋值运算符重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的区别\">#</a> 拷贝构造函数与赋值运算符重载的区别</h2>\n<ol>\n<li>\n<p><strong>调用时机：</strong></p>\n<ul>\n<li>拷贝构造函数在对象创建时调用，用于初始化新对象。   - 赋值运算符重载在对象赋值时调用，用于将一个对象的值赋给另一个对象。</li>\n<li>例如，当使用一个已存在的对象来初始化另一个对象时，会调用拷贝构造函数；当使用一个已存在的对象来赋值给另一个对象时，会调用赋值运算符重载。</li>\n</ul>\n</li>\n<li>\n<p><strong>参数类型：</strong></p>\n<ul>\n<li>拷贝构造函数的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。   - 赋值运算符重载的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。</li>\n<li>例如，拷贝构造函数的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象；赋值运算符重载的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。</li>\n</ul>\n</li>\n<li>\n<p><strong>返回值类型：</strong></p>\n<ul>\n<li>拷贝构造函数的返回值类型为 <code>ClassName</code> ，表示返回新对象。   - 赋值运算符重载的返回值类型为 <code>ClassName&amp;</code> ，表示返回对象的引用。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"拷贝构造函数与赋值运算符重载的示例\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的示例\">#</a> 拷贝构造函数与赋值运算符重载的示例</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 赋值运算符重载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数与赋值运算符重载的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的最佳实践\">#</a> 拷贝构造函数与赋值运算符重载的最佳实践</h2>\n<ol>\n<li><strong>避免浅拷贝：</strong> 在拷贝构造函数和赋值运算符重载中，应避免浅拷贝，即直接复制指针而不是复制指针指向的内容。如果需要复制指针指向的内容，可以使用深拷贝。</li>\n<li><strong>避免循环引用：</strong> 在拷贝构造函数和赋值运算符重载中，应避免循环引用，即两个对象相互引用对方。如果需要相互引用，可以使用智能指针（如 <code>std::shared_ptr</code> ）来管理对象的生命周期。</li>\n<li><strong>避免内存泄漏：</strong> 在拷贝构造函数和赋值运算符重载中，应避免内存泄漏，即释放内存后未将指针置为 <code>NULL</code> 。如果需要释放内存，应将指针置为 <code>NULL</code> 。</li>\n<li><strong>避免异常安全：</strong> 在拷贝构造函数和赋值运算符重载中，应确保异常安全，即当异常发生时，对象的状态应保持不变。可以使用 RAII（Resource Acquisition Is Initialization）模式来确保资源正确释放。</li>\n<li><strong>避免未定义行为：</strong> 在拷贝构造函数和赋值运算符重载中，应避免未定义行为，即访问未初始化的指针或释放已释放的内存。可以使用断言（assert）来检测指针是否为 <code>NULL</code> ，或使用智能指针来管理内存。</li>\n<li><strong>避免性能问题：</strong> 在拷贝构造函数和赋值运算符重载中，应避免性能问题，即复制大量数据或进行复杂的操作。可以使用移动语义（move semantics）来优化性能。</li>\n<li><strong>避免代码重复：</strong> 在拷贝构造函数和赋值运算符重载中，应避免代码重复，即重复编写相同的代码。可以使用模板函数或模板类来减少代码重复。</li>\n</ol>\n<h1 id=\"浅拷贝与深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝与深拷贝\">#</a> 浅拷贝与深拷贝</h1>\n<h2 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h2>\n<blockquote>\n<p>仅复制对象的顶层结构（如指针或引用），底层数据仍共享同一内存地址。修改拷贝后的对象会影响原对象</p>\n</blockquote>\n<p><strong>场景</strong></p>\n<ul>\n<li>默认拷贝构造函数：C++ 中类未重写拷贝构造函数时，默认进行浅拷贝。</li>\n<li>​数组 / 结构体赋值：直接复制数组或结构体时，引用类型成员共享地址</li>\n</ul>\n<p><strong>风险</strong></p>\n<ul>\n<li>**​数据竞争：** 多线程环境下共享数据可能引发不一致问题。</li>\n<li>**​双重释放：** 若共享内存被多次释放，可能导致内存泄漏或崩溃</li>\n</ul>\n<p>浅拷贝的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 浅拷贝构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 浅拷贝赋值运算符重载</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            ptr <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h2>\n<blockquote>\n<p>复制对象的顶层结构及底层数据，确保拷贝后的对象与原对象完全独立。修改拷贝后的对象不会影响原对象</p>\n</blockquote>\n<p><strong>实现方式</strong></p>\n<ul>\n<li><strong>手动递归复制：</strong> 对于复杂对象，手动递归复制每个成员变量。</li>\n<li><strong>拷贝构造函数：</strong> 重载拷贝构造函数，实现深拷贝。</li>\n<li><strong>赋值运算符重载：</strong> 重载赋值运算符重载，实现深拷贝。</li>\n</ul>\n<p><strong>优势</strong></p>\n<ul>\n<li><strong>数据独立：</strong> 拷贝后的对象与原对象完全独立，修改一个对象不影响另一个对象。</li>\n<li><strong>内存安全：</strong> 避免数据竞争和双重释放问题，确保内存安全。</li>\n</ul>\n<p><strong>劣势</strong></p>\n<ul>\n<li><strong>性能开销：</strong> 深拷贝需要复制大量数据，可能导致性能开销。</li>\n</ul>\n<p>深拷贝的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 深拷贝构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 深拷贝赋值运算符重载</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放原指针指向的内存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分配新内存并复制数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"浅拷贝与深拷贝的区别\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝与深拷贝的区别\">#</a> 浅拷贝与深拷贝的区别</h2>\n<p>| 特性  | 浅拷贝  | 深拷贝   |</p>\n<p>| :---- | :----- | :------ |</p>\n<p>| 复制方式 | 复制顶层结构，共享底层数据 | 复制顶层结构及底层数据，独立内存 |</p>\n<p>| 修改影响 | 修改拷贝后的对象会影响原对象 | 修改拷贝后的对象不影响原对象 |</p>\n<p>| 内存管理 | 共享内存，可能导致数据竞争或内存泄漏 | 独立内存，内存安全 |</p>\n<p>| 性能开销 | 较低，直接复制指针 | 较高，需要复制大量数据 |</p>\n",
            "tags": [
                "数据结构"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/04/10/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2024-4-18-LSTM/",
            "url": "https://zhang3399.github.io/2024/04/10/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2024-4-18-LSTM/",
            "title": "LSTM",
            "date_published": "2024-04-10T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>LSTM（Long Short-Term Memory）是一种特殊的循环神经网络（RNN），它通过引入门控机制来缓解梯度消失和梯度爆炸问题，从而能够更好地处理长序列数据。</p>\n</blockquote>\n<h2 id=\"lstm的结构\"><a class=\"markdownIt-Anchor\" href=\"#lstm的结构\">#</a> LSTM 的结构</h2>\n<p>LSTM 的基本结构包括三个门：输入门（input gate）、遗忘门（forget gate）和输出门（output gate），以及一个记忆单元（cell state）。这些门和单元共同作用，使得 LSTM 能够记住长序列中的信息。</p>\n<p>LSTM 的输入包括当前时间步的输入数据 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和前一时间步的隐藏状态 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">h_{t-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9028em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span>。输入门控制着当前时间步的输入数据如何更新记忆单元，遗忘门控制着前一时间步的记忆单元如何被遗忘，输出门控制着当前时间步的记忆单元如何被输出。</p>\n<p>LSTM 的输出包括当前时间步的隐藏状态 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和记忆单元 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。隐藏状态 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是 LSTM 的输出，可以用于后续的神经网络层。记忆单元 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是 LSTM 的记忆状态，可以保留长序列中的信息。</p>\n<h2 id=\"lstm的数学表达式\"><a class=\"markdownIt-Anchor\" href=\"#lstm的数学表达式\">#</a> LSTM 的数学表达式</h2>\n<p>LSTM 的输入门、遗忘门和输出门的计算公式如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>i</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><msub><mi>W</mi><mrow><mi>x</mi><mi>i</mi></mrow></msub><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><msub><mi>W</mi><mrow><mi>h</mi><mi>i</mi></mrow></msub><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>f</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><msub><mi>W</mi><mrow><mi>x</mi><mi>f</mi></mrow></msub><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><msub><mi>W</mi><mrow><mi>h</mi><mi>f</mi></mrow></msub><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mi>f</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>o</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><msub><mi>W</mi><mrow><mi>x</mi><mi>o</mi></mrow></msub><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><msub><mi>W</mi><mrow><mi>h</mi><mi>o</mi></mrow></msub><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mi>o</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\ni_t &amp;= \\sigma(W_{xi}x_t + W_{hi}h_{t-1} + b_i)\\\\\nf_t &amp;= \\sigma(W_{xf}x_t + W_{hf}h_{t-1} + b_f)\\\\\no_t &amp;= \\sigma(W_{xo}x_t + W_{ho}h_{t-1} + b_o)\\\\\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.5em;vertical-align:-2em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5em;\"><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">o</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5em;\"><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">hi</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">o</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">o</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> 是 sigmoid 函数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>x</mi><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{xi}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>h</mi><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{hi}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">hi</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>x</mi><mi>f</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{xf}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>h</mi><mi>f</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{hf}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>x</mi><mi>o</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{xo}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">o</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>h</mi><mi>o</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{ho}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">o</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>o</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_o</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是可学习的参数。</p>\n<p>LSTM 的记忆单元的更新公式如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>c</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>t</mi></msub><mo>∘</mo><msub><mi>c</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>i</mi><mi>t</mi></msub><mo>∘</mo><mi>tanh</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>W</mi><mrow><mi>x</mi><mi>c</mi></mrow></msub><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><msub><mi>W</mi><mrow><mi>h</mi><mi>c</mi></mrow></msub><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mi>c</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nc_t &amp;= f_t \\circ c_{t-1} + i_t \\circ \\tanh(W_{xc}x_t + W_{hc}h_{t-1} + b_c)\\\\\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5em;vertical-align:-0.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mop\">tanh</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∘</mo></mrow><annotation encoding=\"application/x-tex\">\\circ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∘</span></span></span></span> 是元素级乘积，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>tanh</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\tanh</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mop\">tanh</span></span></span></span> 是双曲正切函数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>x</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{xc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>h</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{hc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是可学习的参数。</p>\n<p>LSTM 的隐藏状态的更新公式如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>h</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msub><mi>o</mi><mi>t</mi></msub><mo>∘</mo><mi>tanh</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mi>t</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nh_t &amp;= o_t \\circ \\tanh(c_t)\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5em;vertical-align:-0.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">o</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mop\">tanh</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>tanh</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\tanh</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mop\">tanh</span></span></span></span> 是双曲正切函数。</p>\n<h2 id=\"lstm的应用\"><a class=\"markdownIt-Anchor\" href=\"#lstm的应用\">#</a> LSTM 的应用</h2>\n<p>LSTM 在许多领域都有广泛的应用，包括但不限于：</p>\n<ul>\n<li>自然语言处理：LSTM 可以用于文本分类、情感分析、机器翻译等任务。</li>\n<li>语音识别：LSTM 可以用于语音识别、语音合成等任务。</li>\n<li>时间序列预测：LSTM 可以用于股票价格预测、天气预测等任务。</li>\n</ul>\n",
            "tags": [
                "LSTM"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/03/29/linux/2024-6-15-%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C/",
            "url": "https://zhang3399.github.io/2024/03/29/linux/2024-6-15-%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C/",
            "title": "终端操作",
            "date_published": "2024-03-29T02:00:00.000Z",
            "content_html": "<h1 id=\"进程管理\"><a class=\"markdownIt-Anchor\" href=\"#进程管理\">#</a> 进程管理</h1>\n<p><strong>Windows</strong></p>\n<pre><code class=\"language-powerShell\"># 查找进程 PID\ntasklist | findstr &quot;uvicorn&quot;\n# 终止进程（将 12345 替换为实际 PID）\ntaskkill /F /PID 12345\n</code></pre>\n<p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找进程 PID</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 终止进程（将 12345 替换为实际 PID）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token number\">12345</span></pre></td></tr></table></figure><h1 id=\"文件操作\"><a class=\"markdownIt-Anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<p><strong>Windows</strong></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">dir</span> <span class=\"token operator\">/</span>s <span class=\"token operator\">/</span>p <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\*.pdf\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 删除文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">del</span> <span class=\"token operator\">/</span>s <span class=\"token operator\">/</span>q <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\*.pdf\"</span></pre></td></tr></table></figure><p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> /home/用户名/Downloads <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.pdf\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 删除文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /home/用户名/Downloads/*.pdf</pre></td></tr></table></figure><h1 id=\"解压文件\"><a class=\"markdownIt-Anchor\" href=\"#解压文件\">#</a> 解压文件</h1>\n<p><strong>Windows</strong></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 解压 zip 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>expand <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\file.zip\"</span> <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\file\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 解压 rar 文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rar x <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\file.rar\"</span> <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\file\"</span></pre></td></tr></table></figure><p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 解压 zip 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">unzip</span> <span class=\"token string\">\"file.zip\"</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"file\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 解压 rar 文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">unrar</span> x <span class=\"token string\">\"file.rar\"</span> <span class=\"token string\">\"file\"</span></pre></td></tr></table></figure><h1 id=\"移动文件\"><a class=\"markdownIt-Anchor\" href=\"#移动文件\">#</a> 移动文件</h1>\n<p><strong>Windows</strong></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 移动文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">move</span> <span class=\"token string\">\"C:\\Users\\用户名\\Downloads\\file\"</span> <span class=\"token string\">\"C:\\Users\\用户名\\Documents\"</span></pre></td></tr></table></figure><p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 移动文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token string\">\"file\"</span> <span class=\"token string\">\"Documents\"</span></pre></td></tr></table></figure><p><strong>Linux 常用指令</strong></p>\n<ol>\n<li>文件目录类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ls</code></td>\n<td style=\"text-align:center\"><code>ls -l</code></td>\n<td style=\"text-align:center\">列出目录内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>cd</code></td>\n<td style=\"text-align:center\"><code>cd Documents</code></td>\n<td style=\"text-align:center\">切换目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>pwd</code></td>\n<td style=\"text-align:center\"><code>pwd</code></td>\n<td style=\"text-align:center\">显示当前目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>mkdir</code></td>\n<td style=\"text-align:center\"><code>mkdir new_folder</code></td>\n<td style=\"text-align:center\">创建新目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>rmdir</code></td>\n<td style=\"text-align:center\"><code>rmdir empty_folder</code></td>\n<td style=\"text-align:center\">删除空目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>rm</code></td>\n<td style=\"text-align:center\"><code>rm file</code></td>\n<td style=\"text-align:center\">删除文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>cp</code></td>\n<td style=\"text-align:center\"><code>cp file1 file2</code></td>\n<td style=\"text-align:center\">复制文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>mv</code></td>\n<td style=\"text-align:center\"><code>mv file1 file2</code></td>\n<td style=\"text-align:center\">移动或重命名文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>find</code></td>\n<td style=\"text-align:center\"><code>find . -name &quot;*.txt&quot;</code></td>\n<td style=\"text-align:center\">查找文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>grep</code></td>\n<td style=\"text-align:center\"><code>grep &quot;text&quot; file.txt</code></td>\n<td style=\"text-align:center\">在文件中查找文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>cat</code></td>\n<td style=\"text-align:center\"><code>cat file.txt</code></td>\n<td style=\"text-align:center\">显示文件内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>more</code></td>\n<td style=\"text-align:center\"><code>more file.txt</code></td>\n<td style=\"text-align:center\">逐页显示文件内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>less</code></td>\n<td style=\"text-align:center\"><code>less file.txt</code></td>\n<td style=\"text-align:center\">逐页显示文件内容，可向上翻页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>head</code></td>\n<td style=\"text-align:center\"><code>head -n 10 file.txt</code></td>\n<td style=\"text-align:center\">显示文件前 10 行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>tail</code></td>\n<td style=\"text-align:center\"><code>tail -n 10 file.txt</code></td>\n<td style=\"text-align:center\">显示文件后 10 行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>chmod</code></td>\n<td style=\"text-align:center\"><code>chmod 755 file</code></td>\n<td style=\"text-align:center\">更改文件权限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>chown</code></td>\n<td style=\"text-align:center\"><code>chown user:group file</code></td>\n<td style=\"text-align:center\">更改文件所有者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>tar</code></td>\n<td style=\"text-align:center\"><code>tar -cvf archive.tar file1 file2</code></td>\n<td style=\"text-align:center\">创建 tar 归档文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>gzip</code></td>\n<td style=\"text-align:center\"><code>gzip file</code></td>\n<td style=\"text-align:center\">压缩文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>gunzip</code></td>\n<td style=\"text-align:center\"><code>gunzip file.gz</code></td>\n<td style=\"text-align:center\">解压 gzip 压缩文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>zip</code></td>\n<td style=\"text-align:center\"><code>zip archive.zip file1 file2</code></td>\n<td style=\"text-align:center\">创建 zip 压缩文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>unzip</code></td>\n<td style=\"text-align:center\"><code>unzip archive.zip</code></td>\n<td style=\"text-align:center\">解压 zip 压缩文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>mv</code></td>\n<td style=\"text-align:center\"><code>mv file1 file2</code></td>\n<td style=\"text-align:center\">移动或重命名文件</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>系统管理类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ps</code></td>\n<td style=\"text-align:center\"><code>ps -ef</code></td>\n<td style=\"text-align:center\">显示当前进程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>top</code></td>\n<td style=\"text-align:center\"><code>top</code></td>\n<td style=\"text-align:center\">实时显示系统资源使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>kill</code></td>\n<td style=\"text-align:center\"><code>kill -9 12345</code></td>\n<td style=\"text-align:center\">终止进程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>free</code></td>\n<td style=\"text-align:center\"><code>free -h</code></td>\n<td style=\"text-align:center\">显示内存使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>df</code></td>\n<td style=\"text-align:center\"><code>df -h</code></td>\n<td style=\"text-align:center\">显示磁盘使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>du</code></td>\n<td style=\"text-align:center\"><code>du -sh /path/to/directory</code></td>\n<td style=\"text-align:center\">显示目录大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>scp</code></td>\n<td style=\"text-align:center\"><code>scp file user@hostname:/path/to/destination</code></td>\n<td style=\"text-align:center\">远程复制文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>wget</code></td>\n<td style=\"text-align:center\"><code>wget http://example.com/file</code></td>\n<td style=\"text-align:center\">下载文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>curl</code></td>\n<td style=\"text-align:center\"><code>curl -O http://example.com/file</code></td>\n<td style=\"text-align:center\">下载文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>apt</code></td>\n<td style=\"text-align:center\"><code>apt-get install package</code></td>\n<td style=\"text-align:center\">安装软件包</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>用户管理类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>who</code></td>\n<td style=\"text-align:center\"><code>who</code></td>\n<td style=\"text-align:center\">显示当前登录用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>w</code></td>\n<td style=\"text-align:center\"><code>w</code></td>\n<td style=\"text-align:center\">显示当前登录用户及其活动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>id</code></td>\n<td style=\"text-align:center\"><code>id user</code></td>\n<td style=\"text-align:center\">显示用户信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>useradd</code></td>\n<td style=\"text-align:center\"><code>useradd newuser</code></td>\n<td style=\"text-align:center\">创建新用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>userdel</code></td>\n<td style=\"text-align:center\"><code>userdel newuser</code></td>\n<td style=\"text-align:center\">删除用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>passwd</code></td>\n<td style=\"text-align:center\"><code>passwd user</code></td>\n<td style=\"text-align:center\">更改用户密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>su</code></td>\n<td style=\"text-align:center\"><code>su - user</code></td>\n<td style=\"text-align:center\">切换用户</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>网络管理类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ifconfig</code></td>\n<td style=\"text-align:center\"><code>ifconfig</code></td>\n<td style=\"text-align:center\">显示网络接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ping</code></td>\n<td style=\"text-align:center\"><code>ping www.google.com</code></td>\n<td style=\"text-align:center\">测试网络连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>traceroute</code></td>\n<td style=\"text-align:center\"><code>traceroute www.google.com</code></td>\n<td style=\"text-align:center\">追踪网络路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>netstat</code></td>\n<td style=\"text-align:center\"><code>netstat -an</code></td>\n<td style=\"text-align:center\">显示网络连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ssh</code></td>\n<td style=\"text-align:center\"><code>ssh user@hostname</code></td>\n<td style=\"text-align:center\">远程登录</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Linux",
                "Windows"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/01/01/Tool/2024-1-1-md%E5%9B%BE%E6%A0%87/",
            "url": "https://zhang3399.github.io/2024/01/01/Tool/2024-1-1-md%E5%9B%BE%E6%A0%87/",
            "title": "md图标",
            "date_published": "2024-01-01T02:00:00.000Z",
            "content_html": "<h1 id=\"图标\"><a class=\"markdownIt-Anchor\" href=\"#图标\">#</a> 图标</h1>\n<h2 id=\"字符图标\"><a class=\"markdownIt-Anchor\" href=\"#字符图标\">#</a> 字符图标</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">样式</th>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">样式</th>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">样式</th>\n<th style=\"text-align:center\">字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">©</td>\n<td style=\"text-align:center\"><code>&amp;copy</code></td>\n<td style=\"text-align:center\">®</td>\n<td style=\"text-align:center\"><code>&amp;reg</code></td>\n<td style=\"text-align:center\">™</td>\n<td style=\"text-align:center\"><code>&amp;trade</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">¥</td>\n<td style=\"text-align:center\"><code>&amp;yen</code></td>\n<td style=\"text-align:center\">£</td>\n<td style=\"text-align:center\"><code>&amp;pound</code></td>\n<td style=\"text-align:center\">€</td>\n<td style=\"text-align:center\"><code>&amp;euro</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">¢</td>\n<td style=\"text-align:center\"><code>&amp;cent</code></td>\n<td style=\"text-align:center\">£</td>\n<td style=\"text-align:center\"><code>&amp;iexcl</code></td>\n<td style=\"text-align:center\">¿</td>\n<td style=\"text-align:center\"><code>&amp;iquest</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">§</td>\n<td style=\"text-align:center\"><code>&amp;sect</code></td>\n<td style=\"text-align:center\">¶</td>\n<td style=\"text-align:center\"><code>&amp;para</code></td>\n<td style=\"text-align:center\">¡</td>\n<td style=\"text-align:center\"><code>&amp;iexcl</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"彩色图标\"><a class=\"markdownIt-Anchor\" href=\"#彩色图标\">#</a> 彩色图标</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">样式</th>\n<th style=\"text-align:center\">样式</th>\n<th style=\"text-align:center\">样式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">😀 😃 🥰 😍 😘</td>\n<td style=\"text-align:center\">😚 😋 😛 😝 😜</td>\n<td style=\"text-align:center\">😎 😏 😒 😞 😔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">😟 😕 🙁 ☹️ 😣</td>\n<td style=\"text-align:center\">😖 😫 😩 😤 😠</td>\n<td style=\"text-align:center\">😡 😤 😈 👿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">👹 👺 👻 👽 👾</td>\n<td style=\"text-align:center\">👿 💀 👽 👾 💩</td>\n<td style=\"text-align:center\">💋 💦 💧 💨 💦</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🌿 🍃 🌾 🍀 🍁 🍂 🍄</td>\n<td style=\"text-align:center\">🍇 🍈 🍉 🍊 🍋 🍌 🍍 🍎</td>\n<td style=\"text-align:center\">🍏 🍐 🍑 🍒 🍓 🍅 🍆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🐋 🐬 🐶 🐱 🐭 🐹 🐰 🐻</td>\n<td style=\"text-align:center\">🐼 🐨 🐯 🦁 🐮 🐷 🐽 🐸</td>\n<td style=\"text-align:center\">🐵 🐴 🐔 🐧 🐦 🐣 🐤 🐥</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">❤️ ✨ ⭐  💔 💕 💖</td>\n<td style=\"text-align:center\">💝 💗 💘  💚 💛</td>\n<td style=\"text-align:center\">💞 💟 💡 💢 💣</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🛨 🛩 🛪</td>\n<td style=\"text-align:center\">🛫 🛬</td>\n<td style=\"text-align:center\">🛴 🛵 🛶</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">❎ ✅</td>\n<td style=\"text-align:center\">❌ ✓</td>\n<td style=\"text-align:center\">❗❓ ❕❔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⛪ ⛺ ⛲ ⛵ 🚀</td>\n<td style=\"text-align:center\">🚁 🚂 🚃 🚄 🚅</td>\n<td style=\"text-align:center\">🚆 🚇 🚈 🚉 🚊</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🚋 🚌 🚍 🚎 🚏</td>\n<td style=\"text-align:center\">🚐 🚑 🚒 🚓 🚔</td>\n<td style=\"text-align:center\">🚕 🚖 🚗 🚘 🚙</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🚚 🚛 🚜 🚲 🚳</td>\n<td style=\"text-align:center\">🚴 🚵 🚶 🚷 🚸</td>\n<td style=\"text-align:center\">🚹 🚺 🚻 🚼 🚽</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🚾 🛀 🛁 🛂 🛃</td>\n<td style=\"text-align:center\">🛄 🛅 🛠 🛡 🛢</td>\n<td style=\"text-align:center\">🛣 🛤 🛥 🛦 🛧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">❗ ❕ ❖</td>\n<td style=\"text-align:center\">❗ ❕ ❖</td>\n<td style=\"text-align:center\">❗ ❕ ❖</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">➕ ➖ ➗ ➘ ➙ ➚ ➛ ➜ ➝</td>\n<td style=\"text-align:center\">➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥</td>\n<td style=\"text-align:center\">➦ ➧ ➨ ➩ ➪ ➫</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 0️⃣ 🔟</td>\n<td style=\"text-align:center\">🔡 🔠 🔞</td>\n<td style=\"text-align:center\">🔣 🔤 🔢</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🔦 🔧 🔨 🔩</td>\n<td style=\"text-align:center\">🔪 🔫 🔬 🔭</td>\n<td style=\"text-align:center\">🔮 🔯 🔰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🔱 🔲 🔳 🔴</td>\n<td style=\"text-align:center\">🔵 🔶 🔷 🔸</td>\n<td style=\"text-align:center\">🔹 🔺 🔻</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">🔼 🔽 ⬆️ ⬇️</td>\n<td style=\"text-align:center\">⬅️ ⮕ ⬌ ⬍</td>\n<td style=\"text-align:center\">⬎ ⬏ ⬐ ⬑</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⚪ ⚫ ⬜ ⬛</td>\n<td style=\"text-align:center\">⬤ ⬣ ⬢ ⬡</td>\n<td style=\"text-align:center\">⬠ ⬡ ⬢ ⬣</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⚰ ⚱ ⚲ ⚳</td>\n<td style=\"text-align:center\">⚴ ⚵ ⚶ ⚷</td>\n<td style=\"text-align:center\">⚸ ⚹ ⚺ ⚻</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⚼ ⚽ ⚾ ⛀</td>\n<td style=\"text-align:center\">⛁ ⛂ ⛃ ⛄</td>\n<td style=\"text-align:center\">⛅ ⛆ ⛇ ⛈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⛉ ⛊ ⛋ ⛌</td>\n<td style=\"text-align:center\">⛍ ⛎ ⛏ ⛐</td>\n<td style=\"text-align:center\">⛑ ⛒ ⛓ ⛔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⛕ ⛖ ⛗ ⛘</td>\n<td style=\"text-align:center\">⛙ ⛚ ⛛ ⛜</td>\n<td style=\"text-align:center\">⛝ ⛞ ⛟ ⛠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⛡ ⛢ ⛣ ⛤</td>\n<td style=\"text-align:center\">⛥ ⛦ ⛧ ⛨</td>\n<td style=\"text-align:center\">⛩ ⛪ ⛫ ⛬</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⛭ ⛮ ⛯ ⛰</td>\n<td style=\"text-align:center\">⛱ ⛲ ⛳ ⛴</td>\n<td style=\"text-align:center\">⛵ ⛶ ⛷ ⛸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⛹ ⛺ ⛻ ⛼</td>\n<td style=\"text-align:center\">⛽ ⛾ ⛿ ⚀</td>\n<td style=\"text-align:center\">⚁ ⚂ ⚃ ⚄</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⚅ ⚆ ⚇ ⚈</td>\n<td style=\"text-align:center\">⚉ ⚊ ⚋ ⚌</td>\n<td style=\"text-align:center\">⚍ ⚎ ⚏ ⚐</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "md图标"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2021/10/29/python/2023-10-16-python%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/",
            "url": "https://zhang3399.github.io/2021/10/29/python/2023-10-16-python%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/",
            "title": "python进程、线程、协程",
            "date_published": "2021-10-29T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>python 多线程</p>\n</blockquote>\n<h1 id=\"进程和线程\"><a class=\"markdownIt-Anchor\" href=\"#进程和线程\">#</a> 进程和线程</h1>\n<ul>\n<li>进程：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</li>\n<li>线程：是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li>\n</ul>\n<h1 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\">#</a> 进程</h1>\n<p>含义：</p>\n<ul>\n<li>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li>\n<li>一个正在运行的程序就是一个进程，进程是系统资源分配的最小单位，是能独立运行的最小单位。<br>\n注意：进程可以创建多个线程，多进程也可以完成多任务</li>\n</ul>\n<h2 id=\"进程的状态\"><a class=\"markdownIt-Anchor\" href=\"#进程的状态\">#</a> 进程的状态</h2>\n<ol>\n<li>就绪状态：进程已经获得除 CPU 外的所有必要资源，等待分配 CPU。</li>\n<li>执行状态：进程已获得 CPU，正在执行。</li>\n<li>等待（阻塞）状态：等待某些条件满足，如一个程序 sleep 了，此时就是等待状态。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序开始，处于执行状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序暂停，处于等待状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序暂停，处于等待状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序继续执行，处于执行状态</span></pre></td></tr></table></figure><h2 id=\"进程语法结构\"><a class=\"markdownIt-Anchor\" href=\"#进程语法结构\">#</a> 进程语法结构</h2>\n<p>multiprocessing 模块提供了 Process 类来代表一个进程对象。</p>\n<ol>\n<li>process 类参数<br>\n参数：</li>\n</ol>\n<ul>\n<li><code>target</code> ：进程函数</li>\n<li><code>args</code> ：传递给进程函数的参数，类型为元组</li>\n<li><code>kwargs</code> ：传递给进程函数的参数，类型为字典</li>\n</ul>\n<ol start=\"2\">\n<li>process 类方法</li>\n</ol>\n<ul>\n<li><code>start()</code> ：启动进程，调用进程函数</li>\n<li><code>join(timeout=None)</code> ：阻塞主进程，直到子进程执行完毕，timeout 为等待时间，单位为秒</li>\n<li><code>is_alive()</code> ：判断进程是否在执行</li>\n<li><code>terminate()</code> ：强制终止进程</li>\n<li><code>close()</code> ：关闭进程</li>\n</ul>\n<ol start=\"3\">\n<li>常用属性<br>\n <code>name</code> ：当前进程名，默认为 Process-1,Process-2,Process-3…<br>\n <code>pid</code> ：当前进程 id</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># os.getpid () 获取当前进程 id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># os.getppid () 获取当前进程的父进程 id</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sing'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># os.getpid () 获取当前进程 id</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"dance子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># os.getppid () 获取当前进程的父进程 id</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dance'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>sing<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"子进程1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"子进程2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># 开启进程</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># 访问进程属性</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># 阻塞主进程，直到子进程执行完毕</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># 判断进程是否在执行</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># 强制终止进程</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\"># 关闭进程</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"主进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,主进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：  <code>cmd</code>  查看进程： <code>tasklist</code>  可以查看电脑所有进程</p>\n<p><strong>传参</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在唱歌\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"dance子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在跳舞\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p1 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>sing<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 传递参数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p2 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 传递参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 开启进程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1存活状态：\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2存活状态：\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"进程间不共享全局变量\"><a class=\"markdownIt-Anchor\" href=\"#进程间不共享全局变量\">#</a> 进程间不共享全局变量</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">wdata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rdata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"读取数据</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>li<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 1. 防止别人导入文件时执行 main 里面的方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 2. 防止 windows 系统递归创建子进程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p1 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>wdata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p2 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>rdata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 开启进程</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"进程间通信\"><a class=\"markdownIt-Anchor\" href=\"#进程间通信\">#</a> 进程间通信</h2>\n<p>进程间通信（Inter-Process Communication，IPC）是指进程之间进行数据交换的机制。</p>\n<h3 id=\"queue队列\"><a class=\"markdownIt-Anchor\" href=\"#queue队列\">#</a> Queue 队列</h3>\n<p>Queue 是 Python 中的一种数据结构，它是一种先进先出（FIFO）的数据结构，可以用来实现进程间的通信。<br>\n方法：</p>\n<ul>\n<li><code>Queue(maxsize=0)</code> ：创建一个队列对象，maxsize 为队列大小，0 表示队列大小无限制</li>\n<li><code>put(item, block=True, timeout=None)</code> ：将 item 放入队列，block 为是否阻塞，timeout 为等待时间，单位为秒</li>\n<li><code>get(block=True, timeout=None)</code> ：从队列中取出一个元素，block 为是否阻塞，timeout 为等待时间，单位为秒</li>\n<li><code>empty()</code> ：判断队列是否为空</li>\n<li><code>qsize()</code> ：返回队列中元素个数</li>\n<li><code>full()</code> ：判断队列是否已满</li>\n</ul>\n<p><strong>初始化一个队列</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>向队列中添加元素</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>从队列中取出元素</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获取队列中的元素，然后删除该元素</span></pre></td></tr></table></figure><p><strong>判断队列是否为空</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 判断队列是否为空，为空返回 True，否则返回 False</span></pre></td></tr></table></figure><p><strong>判断队列是否已满</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 判断队列是否已满，已满返回 True，否则返回 False</span></pre></td></tr></table></figure><p><strong>获取队列中元素个数</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获取队列中元素个数</span></pre></td></tr></table></figure><p><strong>阻塞和非阻塞</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>block<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 阻塞，等待 3 秒，如果 3 秒后队列中还有元素，则取出元素，否则抛出异常</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>block<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 非阻塞，如果队列中有元素，则取出元素，否则抛出异常</span></pre></td></tr></table></figure><p><strong>进程间通信</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">wdata</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">已经被放入\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入数据是：\"</span><span class=\"token punctuation\">,</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 读数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rdata</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取数据:\"</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取数据是：\"</span><span class=\"token punctuation\">,</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 创建队列</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>wdata<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>rdata<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h2 id=\"多线程实现\"><a class=\"markdownIt-Anchor\" href=\"#多线程实现\">#</a> 多线程实现</h2>\n<ol>\n<li>直接使用 threading 模块</li>\n</ol>\n<p>参数：</p>\n<ul>\n<li><code>target</code> ：线程函数</li>\n<li><code>args</code> ：传递给线程函数的参数，类型为元组</li>\n<li><code>kwargs</code> ：传递给线程函数的参数，类型为字典</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task done'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 守护线程，必须在线程启动前设置，否则无效</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 阻塞子线程，必须在线程启动后设置，否则无效</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 获取线程名字</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 更改线程名字</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>setName<span class=\"token punctuation\">(</span><span class=\"token string\">'线程1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>setName<span class=\"token punctuation\">(</span><span class=\"token string\">'线程2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"线程之间共享资源全局变量\"><a class=\"markdownIt-Anchor\" href=\"#线程之间共享资源全局变量\">#</a> 线程之间共享资源（全局变量）</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">global</span> num</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task done'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num:'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"资源竞争\"><a class=\"markdownIt-Anchor\" href=\"#资源竞争\">#</a> 资源竞争</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add1:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add2:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"线程同步\"><a class=\"markdownIt-Anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<p>两种方式：</p>\n<ol>\n<li>join 阻塞</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add1:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add2:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 阻塞 t1 线程，t1 执行完后再执行 t2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>互斥锁<br>\n概念：互斥锁为资源引入了一个状态：锁定 / 非锁定。某个线程要更改共享数据时，先要将该资源锁定，此时其他线程不能更改；直到该线程释放资源，其他线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</li>\n</ol>\n<ul>\n<li><code>acquire()</code> ：获取锁，如果锁已经被其他线程获取，那么调用该方法的线程会被阻塞，直到锁被释放为止</li>\n<li><code>release()</code> ：释放锁</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Lock</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add1:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 解锁</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add2:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：锁的粒度越细，性能越好，但锁的个数越多，性能越差。</p>\n<h1 id=\"协程\"><a class=\"markdownIt-Anchor\" href=\"#协程\">#</a> 协程</h1>\n<p>协程，又称微线程，纤程。英文名 Coroutine。协程是一种用户态的轻量级线程。</p>\n<p>协程拥有自己的 CPU 寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此，协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处的逻辑流中。</p>\n<p>协程的调用比线程的调用节省资源，因为协程不需要操作系统来进行调度，而是由程序员自己来控制协程的切换。</p>\n<h2 id=\"协程实现\"><a class=\"markdownIt-Anchor\" href=\"#协程实现\">#</a> 协程实现</h2>\n<h3 id=\"使用yield关键字\"><a class=\"markdownIt-Anchor\" href=\"#使用yield关键字\">#</a> 使用 yield 关键字</h3>\n<p><code>yield</code>  关键字可以将一个函数变成一个生成器，生成器是一种特殊的迭代器，可以通过 <code>next()</code>  函数来获取下一个值。<br>\n应用场景：</p>\n<ul>\n<li>如果一个线程里面 IO 操作比较多时，可以用协程</li>\n<li>适合高并发处理</li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'a'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'哈哈'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'b'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'嘿嘿'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1 <span class=\"token operator\">=</span> task1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    t2 <span class=\"token operator\">=</span> task2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"greenlet模块\"><a class=\"markdownIt-Anchor\" href=\"#greenlet模块\">#</a> greenlet 模块</h3>\n<p><code>greenlet</code>  模块是一个第三方模块，用于实现协程。<br>\n注意： <code>greenlet</code>  只能手动切换，当遇到 IO 操作时，程序会阻塞，需要手动切换到其他协程。</p>\n<p>格式：</p>\n<ul>\n<li><code>a = greenlet(函数名)</code>  创建一个协程对象</li>\n<li><code>xxx.switch()</code>  切换到下一个协程 <code>xxx</code></li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> greenlet <span class=\"token keyword\">import</span> greenlet</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singing end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dancing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dancing end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    g1 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    g2 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>dance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 切换到 g1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    g1<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># 切换到 g2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    g2<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"gevent模块\"><a class=\"markdownIt-Anchor\" href=\"#gevent模块\">#</a> gevent 模块</h3>\n<p><code>gevent</code>  模块是一个第三方模块，用于实现协程。<br>\n注意： <code>gevent</code>  可以自动切换，当遇到 IO 操作时，程序会自动切换到其他协程。<br>\n格式：</p>\n<ul>\n<li><code>gevent.spawn(函数名)</code>  创建一个协程对象</li>\n<li><code>gevent.sleep()</code>  耗时操作</li>\n<li><code>gevent.join()</code>  阻塞，等待某个协程执行完毕</li>\n<li><code>gevent.joinall()</code>  等待所有协程执行完毕，再退出，参数为协程列表</li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gevent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在唱歌\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唱歌结束\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在跳舞\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跳舞结束\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 创建协程对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    g1 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    g2 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>dance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 阻塞，等待某个协程执行完毕</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    g1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    g2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>gevent.joinall()</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gevent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        gevent<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在唱歌,第</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">次'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 创建协程对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    g1 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    g2 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 阻塞，等待所有协程执行完毕</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>joinall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>g1<span class=\"token punctuation\">,</span> g2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>monket 补丁</strong></p>\n<ul>\n<li>作用：拥有在模块运行时替换的功能</li>\n<li>注意：monkey.patch_all () 必须放在被打补丁的模块之前，否则无效</li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gevent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> gevent <span class=\"token keyword\">import</span> monkey</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>monkey<span class=\"token punctuation\">.</span>patch_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将所有的 IO 操作都变成 gevent 的协程，即将 time.sleep () 替换程 gevent 里面实现耗时操作的 gevent.sleep () 代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在唱歌,第</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">次'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 创建协程对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    g1 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    g2 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 阻塞，等待所有协程执行完毕</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>joinall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>g1<span class=\"token punctuation\">,</span> g2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>线程是 CPU 调度的基本单位，进程是资源分配的基本单位</li>\n<li>进程、线程和协程的区别</li>\n</ol>\n<ul>\n<li>进程：切换需要资源最大，效率最低</li>\n<li>线程：切换需要资源中等，效率中等</li>\n<li>协程：切换需要资源最小，效率最高</li>\n<li>进程和线程是操作系统调度的，协程是程序员调度的</li>\n</ul>\n<ol start=\"3\">\n<li>多线程适合 IO 密集型操作，多进程适合 CPU 密集型操作，协程适合 IO 密集型操作</li>\n<li>进程、线程和协程都可以完成多任务，根据自己实际开发需要选择使用。</li>\n</ol>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2021/10/06/python/2023-10-16-python%E8%BF%9B%E9%98%B6/",
            "url": "https://zhang3399.github.io/2021/10/06/python/2023-10-16-python%E8%BF%9B%E9%98%B6/",
            "title": "python进阶",
            "date_published": "2021-10-06T02:00:00.000Z",
            "content_html": "<h1 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<blockquote>\n<p>面向对象编程是一种编程范式或编程风格。它以类和对象为核心，将数据（属性）和操作（方法）封装在一起，通过继承和多态等机制实现代码的重用和扩展。</p>\n</blockquote>\n<h2 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h2>\n<p>类是面向对象编程中的基本概念，它是一种抽象的数据类型，用于定义对象的属性和行为。类可以看作是对象的模板，通过类可以创建多个具有相同属性和行为的对象。</p>\n<p><strong>类的定义</strong><br>\n在 Python 中，使用 <code>class</code>  关键字来定义一个类。</p>\n<p>注意：类名通常使用大写字母开头，遵循驼峰命名法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 基本格式：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># class 类名:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#     类的属性和方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 类的属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 类的方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method id：\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># self 是类实例的引用，用于访问类的属性和方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 实例化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance id is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>class_instance<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>class_instance id is: &lt;__main__.ClassName object at 0x000001CE2FEA9FD0></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>method id： &lt;__main__.ClassName object at 0x000001CE2FEA9FD0></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><ol>\n<li>构造函数 <code>__init__()</code>\n<ul>\n<li>构造函数是类的一个特殊方法，用于初始化对象的状态。当创建对象时，Python 会自动调用构造函数。</li>\n<li>构造函数的第一个参数必须是 <code>self</code> ，表示对象本身的引用。</li>\n<li>构造函数可以接受任意数量的参数，用于初始化对象的属性。</li>\n<li>构造函数可以返回任意类型的值，但通常返回 <code>None</code> 。</li>\n<li>构造函数可以包含任意数量的代码，用于执行初始化操作。</li>\n<li>构造函数可以调用其他方法，用于执行初始化操作。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#self-- 实例本身，name-- 实例属性（非类属性）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.name is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>析构函数 <code>__del__()</code>\n<ul>\n<li>析构函数是类的一个特殊方法，用于在对象被销毁时执行清理操作。当对象被销毁时，Python 会自动调用析构函数。</li>\n<li>析构函数的第一个参数必须是 <code>self</code> ，表示对象本身的引用。</li>\n<li>析构函数可以接受任意数量的参数，用于执行清理操作。</li>\n<li>析构函数可以返回任意类型的值，但通常返回 <code>None</code> 。</li>\n<li>析构函数可以包含任意数量的代码，用于执行清理操作。</li>\n<li>析构函数可以调用其他方法，用于执行清理操作。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"del ClassName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">del</span> class_instance <span class=\"token comment\"># 或者 class_instance = None (删除对象)</span></pre></td></tr></table></figure><h1 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h1>\n<p>封装：面向对象编程中的一个重要概念，它指的是将对象的属性和方法封装在一起，形成一个独立的单元。<br>\n目的：隐藏对象的内部实现细节，只对外提供必要的接口，从而提高代码的可维护性和安全性。</p>\n<p>在 Python 中，可以通过以下方式实现封装：</p>\n<h2 id=\"隐藏属性\"><a class=\"markdownIt-Anchor\" href=\"#隐藏属性\">#</a> 隐藏属性</h2>\n<p>使用 <code>__</code> 双下划线开头的属性名或方法名，表示私有，只能在类的内部访问。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __age <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.name is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.__age is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>__age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># × AttributeError: 'ClassName' object has no attribute '__age'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">## 隐藏属性实际上是将类名修改为： _类名__属性名 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.__age is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>_ClassName__age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr></table></figure><h2 id=\"私有属性方法\"><a class=\"markdownIt-Anchor\" href=\"#私有属性方法\">#</a> 私有属性 / 方法</h2>\n<ul>\n<li><code>xxx</code> ：普通属性 / 方法，可以在类的外部访问。</li>\n<li><code>_xxx</code> ：受保护的属性 / 方法，如果定义在类中，可以外部访问，也可以子类中访问。但是另外的 <code>.py</code>  文件通过 <code>from import *</code>  导入时， <code>_xxx</code>  属性 / 方法不会被导入。\n<ul>\n<li>这种一般是为了避免与 python 关键字冲突而采用的命名方法。</li>\n</ul>\n</li>\n<li><code>__xxx</code> ：双下划线开头，隐藏的属性 / 方法，只能在类的内部访问，如果定义在类中，子类不会继承。\n<ul>\n<li>这种命名一般是 python 中的魔法方法或者属性，都是有特殊含义和功能的，自己不要轻易定义。</li>\n</ul>\n</li>\n</ul>\n<p><strong>私有属性</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _age <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __sex <span class=\"token operator\">=</span> <span class=\"token string\">\"male\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.name is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance._age is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>_age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.__sex is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>__sex<span class=\"token punctuation\">)</span> <span class=\"token comment\"># × AttributeError: 'ClassName' object has no attribute '__sex'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance._ClassName__sex is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>_ClassName__sex<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr></table></figure><p><strong>隐藏方法</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write code\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\"># 内部调用私有方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 类内部调用私有方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Man<span class=\"token punctuation\">.</span>__play<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 类内部调用私有方法（不推荐）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>man <span class=\"token operator\">=</span> Man<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>man<span class=\"token punctuation\">.</span>funa<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √ 类内部调用私有方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>man<span class=\"token punctuation\">.</span>__play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># × AttributeError: 'Man' object has no attribute '__play'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>write code</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p><strong>私有方法</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Gril</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#私有方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"play game\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gril <span class=\"token operator\">=</span> Gril<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gril<span class=\"token punctuation\">.</span>_play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr></table></figure><h1 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>继承：面向对象编程中的一个重要概念，它指的是一个类可以继承另一个类的属性和方法，从而实现代码的重用和扩展。</p>\n<p>格式： <code>class 子类名(父类名):</code></p>\n<h2 id=\"单继承\"><a class=\"markdownIt-Anchor\" href=\"#单继承\">#</a> 单继承</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span> <span class=\"token comment\"># 占位符，表示不添加任何新的属性和方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student<span class=\"token punctuation\">.</span>sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sing</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"继承的传递多重继承\"><a class=\"markdownIt-Anchor\" href=\"#继承的传递多重继承\">#</a> 继承的传递（多重继承）</h2>\n<p>子类可以继承父类的属性和方法，也可以继承父类的父类的属性和方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>teacher <span class=\"token operator\">=</span> Teacher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>teacher<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>teacher<span class=\"token punctuation\">.</span>sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sing</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"重写\"><a class=\"markdownIt-Anchor\" href=\"#重写\">#</a> 重写</h2>\n<ol>\n<li>子类重写父类的方法<br>\n子类可以重写父类的方法，即在子类中定义一个与父类方法同名的方法，从而覆盖父类的方法。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat food\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat food</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>eat food</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>子类拓展父类的方法 (不会改变父类方法)<br>\n<strong> 写法 1</strong>：子类在需要拓展的父类方法下写 <code>父类名.方法名()</code></li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Persion<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat food\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#拓展父类方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat food</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 不会改变父类方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>stuent2 <span class=\"token operator\">=</span> Persion<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>stuent2<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>eat food</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p><strong>写法 2</strong>：子类在需要拓展的父类方法下写 <code>super().方法名()</code> <br>\n 注意： <code>super</code>  在 python 里面是一个特殊的类，super () 是使用 super 类创建的一个对象，这个对象是父类，但是不是父类的实例，而是父类的子类，所以 super () 可以调用父类的方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat food\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#拓展父类方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat food</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 不会改变父类方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>stuent2 <span class=\"token operator\">=</span> Persion<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>stuent2<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>eat food</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"新式类写法\"><a class=\"markdownIt-Anchor\" href=\"#新式类写法\">#</a> 新式类写法</h2>\n<p>python 中，类有两种写法：经典类和新式类。</p>\n<ul>\n<li><code>class A</code> <br>\n 经典类：不由任意内置类型派生的类。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 经典类：没有新的属性和方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 派生类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"play\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>class A()</code></li>\n<li><code>class A(object) </code> 新式类：继承了 object 类或者该类的子类都是新式类。 -- 推荐使用<br>\n <code>object</code>  类是所有类的基类，所有类都继承自 object 类，是 python 为所有对象提供的基类 (顶级父类)。</li>\n</ul>\n<p>注意：python3 中如果一个类没有继承任何类，则默认继承 <code>object</code>  类，所以 python3 中所有的类都是新式类。</p>\n<h2 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\">#</a> 多继承</h2>\n<p>一个类可以继承多个类，多个类之间用逗号分隔。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"study\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teach\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TeacherStudent</span><span class=\"token punctuation\">(</span>Teacher<span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>teacher_student <span class=\"token operator\">=</span> TeacherStudent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>teacher_student<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># study</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>teacher_student<span class=\"token punctuation\">.</span>teach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># teach</span></pre></td></tr></table></figure><p><strong>注意：</strong> 多个父类具有同名方法，则调用顺序为： <code>从左到右，深度优先</code> 。</p>\n<p><strong>方法的搜索顺序：</strong><br>\npython 中内置的 <code>__mro__</code> 属性可以查看类的继承顺序。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A.funa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funb</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B.funb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C.funa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>d <span class=\"token operator\">=</span> D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>d<span class=\"token punctuation\">.</span>funa<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># C.funa</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>输出：（从左到右，深度优先）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>(&lt;class '__main__.D'>, &lt;class '__main__.B'>, &lt;class '__main__.C'>, &lt;class '__main__.A'>, &lt;class 'object'>)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h1 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\">#</a> 多态</h1>\n<p>多态：面向对象编程中的一个重要概念，它指的是一个对象可以有多种形态，即同一个方法可以在不同的对象上调用，从而实现不同的功能。</p>\n<p>多态的前提：</p>\n<ul>\n<li>继承</li>\n<li>重写</li>\n</ul>\n<p>多态的体现：</p>\n<ul>\n<li>父类引用指向子类对象</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>animal<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>多态性：</p>\n<ul>\n<li>同一个方法，不同的对象调用，产生不同的结果。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    obg<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>funa<span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>funa<span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span> <span class=\"token comment\"># dog eat</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>funa<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span> <span class=\"token comment\"># cat eat</span></pre></td></tr></table></figure><h2 id=\"静态方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法\">#</a> 静态方法</h2>\n<p>静态方法：不需要实例化对象就可以直接调用的方法，使用 <code>@staticmethod</code>  装饰器来定义。</p>\n<p>静态方法的特点：</p>\n<ul>\n<li>不需要实例化对象就可以直接调用</li>\n<li>不需要 <code>self</code>  参数</li>\n<li>静态方法可以访问类变量和实例变量</li>\n<li>静态方法不能访问实例方法</li>\n</ul>\n<p>静态方法的使用场景：当方法不需要访问实例变量和类变量时，可以使用静态方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 静态方法既可以使用对象访问，也可以使用类名访问</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 实例对象访问</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 类名访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr></table></figure><p>注意：类方法可以直接方法时传参数，例如 Animal.say_hello (name)</p>\n<h2 id=\"类方法\"><a class=\"markdownIt-Anchor\" href=\"#类方法\">#</a> 类方法</h2>\n<p>类方法：使用 <code>@classmethod</code>  装饰器来定义，对于类方法，第一个参数必须是类对象，通常命名为 <code>cls</code> ，表示类本身。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"animal\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 类方法既可以使用对象访问，也可以使用类名访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 实例对象访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 类名访问</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr></table></figure><p>当方法中需要使用到类对象（如访问私有类属性时），定义类方法<br>\n类方法一般配合类属性使用</p>\n<p>总结：</p>\n<ul>\n<li>实例方法：方法内部访问实例属性，方法内部可以通过 <code>类名.类属性名</code> 来访问类属性。</li>\n<li>静态方法 <code>@staticmethod</code> ：方法内部，不需要访问实例属性和类属性。\n<ul>\n<li>如果需要访问类属性，方法内部可以通过 <code>类名.类属性名</code> 来访问，不能访问实例属性。</li>\n</ul>\n</li>\n<li>类方法 <code>@classmethod</code> ：方法内部只需要访问类属性，方法内部可以通过 <code>cls.类属性名</code> 来访问类属性，不能访问实例属性。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span> <span class=\"token comment\"># 类属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span> <span class=\"token comment\"># 实例属性：对象私有</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 实例方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># 在实例方法中访问类属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>Person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在玩游戏'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># 在实例方法中访问实例属性</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">岁'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 静态方法： 类中的函数，形参没有限制，没有 self 指向实例对象的概念</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>Person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">eat food\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 静态方法可访问类属性，但是无意义，静态方法既不传递类对象，也不传递实例对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># print (f\"&#123;self.age&#125; 岁\") # × 静态方法不能访问实例属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span> <span class=\"token comment\"># 类方法：针对类存在的方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 类方法：cls 代表类对象本身，不用类名。属性名 </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在说话'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># print (f\"&#123;self.age&#125; 岁\") # × 不能访问实例属性</span></pre></td></tr></table></figure><h1 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\">#</a> 单例模式</h1>\n<p>含义：一种常见的设计模式，用于确保一个类只有一个实例，并提供一个全局访问点。<br>\n优点：节省内存，避免重复创建对象。<br>\n弊端：多线程访问容易引发线程安全问题。</p>\n<p><strong>方式</strong></p>\n<ol>\n<li>通过 @classmethod 实现</li>\n<li>通过装饰器实现</li>\n<li>通过重写__new__方法实现</li>\n<li>通过模块导入实现</li>\n</ol>\n<h2 id=\"__new__方法\"><a class=\"markdownIt-Anchor\" href=\"#__new__方法\">#</a> __new__方法</h2>\n<p><code>__new__</code> 方法是 <code>object基类</code> 提供的内置的 <code>静态方法</code> ，它是在对象被创建之前调用的，用于创建对象。 <code>__new__</code> 方法返回一个对象，这个对象会被 <code>__init__</code> 方法初始化。</p>\n<p>作用：</p>\n<ul>\n<li>在内存中为对象分配空间</li>\n<li>返回对象的引用</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person.__init__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 重写 new 不再调用父类的 new 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person.__new__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># 对父类方法进行扩展 super (). 方法名 ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span> <span class=\"token comment\">#方法重写，res 里面保存的是实例对象的引用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Person.__new__</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"通过重写__new__方法实现单例模式\"><a class=\"markdownIt-Anchor\" href=\"#通过重写__new__方法实现单例模式\">#</a> 通过重写__new__方法实现单例模式</h2>\n<p>设计流程：</p>\n<ol>\n<li>定义一个类属性，初始化为 None，用来记录单利对象的引用</li>\n<li>重写__new__方法</li>\n<li>进行判断，如果类属性为 None，把__new__() 返回对象的引用保存进去</li>\n<li>返回类型属性中记录的对象引用</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __instance <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># 类属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__new__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__init__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s1 <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s2 <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token keyword\">is</span> s2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><h2 id=\"通过导入模块实现单例模式\"><a class=\"markdownIt-Anchor\" href=\"#通过导入模块实现单例模式\">#</a> 通过导入模块实现单例模式</h2>\n<p>模块的 <code>__init__.py</code>  文件中的代码在模块第一次被导入时执行，只会执行一次，因此可以利用这个特性来实现单例模式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># my_singleton.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__init__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__new__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>singleton <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># main.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> my_singleton <span class=\"token keyword\">import</span> singleton</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>singleton<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<ul>\n<li>\n<ol>\n<li>回收站对象</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>音乐播放器</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>开发游戏软件 场景管理器</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>数据库配置、数据库连接池的设计</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>线程池、连接池、缓存、日志对象</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"魔法方法魔法属性\"><a class=\"markdownIt-Anchor\" href=\"#魔法方法魔法属性\">#</a> 魔法方法 &amp; 魔法属性</h1>\n<p>魔法方法：在 Python 中，以双下划线开头和结尾的方法称为魔法方法，也称为特殊方法。魔法方法在特定的情况下自动调用，不需要手动调用。</p>\n<h2 id=\"__doc__属性\"><a class=\"markdownIt-Anchor\" href=\"#__doc__属性\">#</a> __doc__属性</h2>\n<p><code>__doc__</code> : 类、函数的描述信息</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"这是一个描述信息\"\"\"</span> <span class=\"token comment\"># 只能使用多行注释，单行注释无效</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这是一个描述信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"这是一个描述信息\"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这是一个描述信息</span></pre></td></tr></table></figure><h2 id=\"__modeule__属性\"><a class=\"markdownIt-Anchor\" href=\"#__modeule__属性\">#</a> __modeule__属性</h2>\n<p><code>__module__</code> : 类所属的模块名</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__module__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># __main__</span></pre></td></tr></table></figure><h2 id=\"__class__属性\"><a class=\"markdownIt-Anchor\" href=\"#__class__属性\">#</a> __class__属性</h2>\n<p><code>__class__</code> : 类所属的类名</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'type'></span></pre></td></tr></table></figure><h2 id=\"str方法\"><a class=\"markdownIt-Anchor\" href=\"#str方法\">#</a> <strong>str</strong> () 方法</h2>\n<p><code>__str__</code> : 当使用 print 输出对象时，自动调用 <code>__str__</code> 方法，返回一个字符串</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"这是一个Person对象\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这是一个 Person 对象</span></pre></td></tr></table></figure><h2 id=\"del方法\"><a class=\"markdownIt-Anchor\" href=\"#del方法\">#</a> <strong>del</strong> () 方法</h2>\n<p><code>__del__</code> : 当对象被销毁时，自动调用 <code>__del__</code> 方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person对象被销毁\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">del</span> person <span class=\"token comment\"># Person 对象被销毁</span></pre></td></tr></table></figure><h2 id=\"call方法\"><a class=\"markdownIt-Anchor\" href=\"#call方法\">#</a> <strong>call</strong> () 方法</h2>\n<p><code>__call__</code> : 当对象被当作函数调用时，自动调用 <code>__call__</code> 方法<br>\n callable: 判断对象是否可调用</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person对象被当作函数调用\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 调用一个可调用的实例对象，其实就是在调用它的__call__() 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 判断对象是否可调用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">callable</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><h2 id=\"__dict__属性\"><a class=\"markdownIt-Anchor\" href=\"#__dict__属性\">#</a> __dict__属性</h2>\n<p><code>__dict__</code> : 类或对象的属性字典</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'name': ' 小明 '&#125;</span></pre></td></tr></table></figure><h1 id=\"文件操作\"><a class=\"markdownIt-Anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<p>文件：存储在硬盘上的数据</p>\n<p>文件操作步骤：</p>\n<ul>\n<li>打开文件</li>\n<li>读写文件</li>\n<li>关闭文件</li>\n</ul>\n<h2 id=\"文件对象的方法\"><a class=\"markdownIt-Anchor\" href=\"#文件对象的方法\">#</a> 文件对象的方法</h2>\n<ol>\n<li>open () 函数</li>\n</ol>\n<p><code>open()</code>  创建一个 file 对象，默认是以只读模式打开。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>read(n)</li>\n</ol>\n<p><code>read()</code>  方法用于读取文件内容，n 表示读取的字符个数，如果不指定 n，则表示读取整个文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>write()</li>\n</ol>\n<p><code>write()</code>  方法用于向文件中写入内容。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"要写入的内容\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>close()</li>\n</ol>\n<p><code>close()</code>  方法用于关闭文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\">#</a> 属性</h2>\n<ol>\n<li>name<br>\n <code>name</code> : 返回要打开文件的文件名，可以包含具体的路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>mode<br>\n <code>mode</code> : 返回打开文件时使用的模式，如’r’、‘w’、'a’等。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>closed<br>\n <code>closed</code> : 返回文件是否已经关闭，True 表示已经关闭，False 表示已经打开。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>closed<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"读写操作\"><a class=\"markdownIt-Anchor\" href=\"#读写操作\">#</a> 读写操作</h2>\n<ol>\n<li>读操作</li>\n</ol>\n<ul>\n<li>read(size=-1)<br>\n <code>read(size=-1)</code> : 从文件中读取 size 个字符，如果 size 未指定或为负数，则读取剩余的所有字符。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>readline(size=-1)<br>\n <code>readline(size=-1)</code> : 从文件中读取一行，如果 size 未指定或为负数，则读取整行。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>readlines(hint=-1)<br>\n <code>readlines(hint=-1)</code> : 从文件中读取所有行，返回一个列表，如果 hint 未指定或为负数，则读取所有行。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"访问模式\"><a class=\"markdownIt-Anchor\" href=\"#访问模式\">#</a> 访问模式</h2>\n<p><code>open()</code>  函数的第二个参数，表示打开文件的模式，常用的模式有：</p>\n<ul>\n<li>‘r’: 只读模式，如果文件不存在，会抛出异常。</li>\n<li>‘w’: 写入模式，如果文件不存在，会创建文件；如果文件存在，会清空文件内容。</li>\n<li>‘a’: 追加模式，如果文件不存在，会创建文件；如果文件存在，会在文件末尾追加内容。</li>\n<li>‘b’: 二进制模式，可以与上述模式组合使用，如’rb’、‘wb’、'ab’等。</li>\n<li>‘+’:  读写模式，可以与上述模式组合使用，如’r+'、‘w+’、'a+' 等。\n<ul>\n<li>‘r+’: 读写模式，如果文件不存在，会抛出异常；如果文件存在，可以同时进行读写操作。</li>\n<li>‘w+’: 先写再读，文件存在就重新编辑文件，不存在就创建文件。</li>\n</ul>\n</li>\n</ul>\n<p><strong>文件指针</strong></p>\n<p>文件指针：文件指针是指向文件中某个位置的指针，文件指针的初始位置为文件的开头，每次读写操作都会改变文件指针的位置。</p>\n<ul>\n<li>tell()<br>\n <code>tell()</code> : 返回文件指针的当前位置。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>tell<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>seek(offset, whence=0)<br>\n <code>seek(offset, whence=0)</code> : 移动文件指针到指定的位置， <code>offset</code>  表示偏移量， <code>whence</code>  表示参考位置，默认为 0 作为起始位置，表示文件开头。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将文件指针移动到第 10 个字符的位置</span></pre></td></tr></table></figure><ul>\n<li>truncate(size=None)<br>\n <code>truncate(size=None)</code> : 截断文件，从文件指针的位置开始截断，截断后的文件大小为 size，如果 size 未指定，则截断到文件指针的位置。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>truncate<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将文件截断到第 10 个字符的位置</span></pre></td></tr></table></figure><ul>\n<li>with open</li>\n</ul>\n<p><code>with open</code>  语句可以自动关闭文件，不需要手动调用 <code>close()</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"编码格式\"><a class=\"markdownIt-Anchor\" href=\"#编码格式\">#</a> 编码格式</h2>\n<p>编码格式：文件的编码格式，常用的编码格式有 UTF-8、GBK 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"编码格式\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"导入模块\"><a class=\"markdownIt-Anchor\" href=\"#导入模块\">#</a> 导入模块</h1>\n<p>os 模块：提供了许多与操作系统交互的函数，如文件操作、目录操作、环境变量操作等。<br>\nimport os</p>\n<h2 id=\"文件重命名\"><a class=\"markdownIt-Anchor\" href=\"#文件重命名\">#</a> 文件重命名</h2>\n<p>指令： <code>os.rename(&quot;旧文件名&quot;, &quot;新文件名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span><span class=\"token string\">\"旧文件名.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新文件名.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<p>指令： <code>os.remove(&quot;文件名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"创建文件夹\"><a class=\"markdownIt-Anchor\" href=\"#创建文件夹\">#</a> 创建文件夹</h2>\n<p>指令： <code>os.mkdir(&quot;文件夹名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件夹名\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"删除文件夹\"><a class=\"markdownIt-Anchor\" href=\"#删除文件夹\">#</a> 删除文件夹</h2>\n<p>指令： <code>os.rmdir(&quot;文件夹名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>rmdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件夹名\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取当前工作目录\"><a class=\"markdownIt-Anchor\" href=\"#获取当前工作目录\">#</a> 获取当前工作目录</h2>\n<p>指令： <code>os.getcwd()</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取目录列表\"><a class=\"markdownIt-Anchor\" href=\"#获取目录列表\">#</a> 获取目录列表</h2>\n<p>指令： <code>os.listdir(&quot;目录路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"目录路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"切换目录\"><a class=\"markdownIt-Anchor\" href=\"#切换目录\">#</a> 切换目录</h2>\n<p>指令： <code>os.chdir(&quot;目录路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"目录路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"判断路径是否存在\"><a class=\"markdownIt-Anchor\" href=\"#判断路径是否存在\">#</a> 判断路径是否存在</h2>\n<p>指令： <code>os.path.exists(&quot;路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"判断是否为文件\"><a class=\"markdownIt-Anchor\" href=\"#判断是否为文件\">#</a> 判断是否为文件</h2>\n<p>指令： <code>os.path.isfile(&quot;路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token string\">\"路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"可迭代对象iterable\"><a class=\"markdownIt-Anchor\" href=\"#可迭代对象iterable\">#</a> 可迭代对象 Iterable</h1>\n<p>可迭代对象：可以被 for 循环遍历的对象，如列表、元组、字符串、字典、集合等。</p>\n<ol>\n<li>可迭代对象的条件：</li>\n</ol>\n<ul>\n<li>对象实现了__iter__() 方法</li>\n<li><strong>iter</strong> () 方法返回迭代对象</li>\n</ul>\n<ol start=\"2\">\n<li>for 循环工作原理</li>\n</ol>\n<ul>\n<li>先通过__iter__() 方法获取迭代器对象的迭代器</li>\n<li>然后通过迭代器对象的__next__() 方法获取下一个元素并赋值给临时变量</li>\n</ul>\n<ol start=\"3\">\n<li>isinstance () 方法</li>\n</ol>\n<ul>\n<li>判断一个对象是否是可迭代对象<br>\n <code>isinstance(o,t)</code>  o: 要判断的对象，t: 要判断的类型<br>\n <code>Iterable:</code>  可迭代对象</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 判断一个对象是否是可迭代对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p><strong>可迭代对象 Iterable 和迭代器 Iterator</strong></p>\n<p>凡是可以作用于 <code>for</code>  循环的对象都是 <code>可迭代对象</code>  Iterable 类型；<br>\n凡是可以作用于 <code>next()</code>  函数的对象都是 <code>迭代器</code>  Iterator 类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable<span class=\"token punctuation\">,</span>Iterator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 判断一个对象是否是可迭代对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 判断一个对象是否是迭代器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># iter () 函数将可迭代对象转换为迭代器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>可迭代对象不一定是迭代器，但迭代器一定是可迭代对象。</li>\n<li>iter () 函数可以将可迭代对象转换为迭代器。</li>\n<li>如果一个对象拥有 <code>__iter__()</code>  方法，那么它就是可迭代对象</li>\n<li>如果一个对象拥有 <code>__next__()</code>  方法，那么它就是迭代器</li>\n<li><code>dir()</code>  函数可以查看一个对象的所有属性和方法</li>\n</ul>\n<h2 id=\"迭代器协议\"><a class=\"markdownIt-Anchor\" href=\"#迭代器协议\">#</a> 迭代器协议</h2>\n<p>迭代器协议：迭代器协议是指迭代器对象必须实现 <code>__next__()</code>  方法， <code>__next__()</code>  方法返回下一个元素，如果没有元素了，会抛出 <code>StopIteration</code>  异常。</p>\n<h2 id=\"自定义迭代器类\"><a class=\"markdownIt-Anchor\" href=\"#自定义迭代器类\">#</a> 自定义迭代器类</h2>\n<p>两个特性： <code>__iter__()</code>  和 <code>__next__()</code>  方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyIterator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self <span class=\"token comment\"># 返回迭代器对象本身</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">raise</span> StopIteration <span class=\"token comment\"># 抛出 StopIteration 异常，表示迭代结束</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 使用自定义迭代器类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>my_iter <span class=\"token operator\">=</span> MyIterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_iter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"生成器-generator\"><a class=\"markdownIt-Anchor\" href=\"#生成器-generator\">#</a> 生成器 generator</h2>\n<p>python 中一边循环一边计算的机制，称为生成器（generator）。</p>\n<ol>\n<li>生成器表达式</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 等价于</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">5</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>gen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">5</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 列表推导式的 [] 改为 () 就是生成器表达式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 取值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"生成器函数\"><a class=\"markdownIt-Anchor\" href=\"#生成器函数\">#</a> 生成器函数</h2>\n<p>python 中，只要函数体内部包含 <code>yield</code>  关键字，那么这个函数就变成一个生成器函数，调用生成器函数会返回一个生成器对象。<br>\nyield 关键字的作用是：</p>\n<ul>\n<li>类似于 return, 将指定值或者多个值返回给调用者</li>\n<li>yield 语句一次返回一个结果，在每个结果中间，挂起函数，执行 next (), 再重新从挂起处开始执行</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gen <span class=\"token operator\">=</span> my_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_generator</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> a<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        a<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">yield</span> a</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生成器结束li:\"</span><span class=\"token punctuation\">,</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_generator<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_generator<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>生成器结束li: [0, 1, 2, 3, 4]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p>三者关系：</p>\n<ul>\n<li>可迭代对象：指实现了 python 迭代协议，可以通过 for…in… 循环遍历的对象，比如列表 list、元组 tuple、字典 dict、集合 set、字符串 str、迭代器、生成器等。</li>\n<li>迭代器：可以记住自己遍历位置的对象，直观体现就是可以 next () 函数返回值，迭代器只能往前，不能后退。（遍历完之后，再次调用 next () 会抛出 StopIteration 异常）</li>\n<li>生成器：一种特殊的迭代器，迭代器不一定是生成器，它是 python 提供的通过简单方法写出的迭代器的一种手段<br>\n包含关系：可迭代对象（Iterable）-&gt; 迭代器（Iterator）-&gt; 生成器（Generator）</li>\n</ul>\n<h1 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<p>正则表达式：用于匹配字符串的规则，可以用来查找、替换、验证字符串等操作。</p>\n<p>步骤：</p>\n<ol>\n<li>导入 re 模块</li>\n<li>使用 match () 函数进行匹配操作\n<ul>\n<li>re.match (pattern, string, flags=0), pattern: 正则表达式，string: 要匹配的字符串，flags: 标志位，用于控制正则表达式的匹配方式</li>\n<li>如果起始位置没有匹配成功，返回 None</li>\n</ul>\n</li>\n<li>如果上一步匹配成功，可以使用 Match 对象的 group () 方法获取匹配到的字符串</li>\n</ol>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 匹配字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"匹配失败\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"匹配单个字符\"><a class=\"markdownIt-Anchor\" href=\"#匹配单个字符\">#</a> 匹配单个字符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:left\">转义字符，用于匹配特殊字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ ]</td>\n<td style=\"text-align:left\">匹配括号中的任意一个字符，例如 [a-z] 匹配任意一个小写字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:left\">匹配字母、数字、下划线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:left\">匹配非字母、数字、下划线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">匹配任意空白字符，包括空格、制表符、换页符等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:left\">匹配非空白字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:left\">匹配数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:left\">匹配非数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:left\">匹配单词边界</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界</td>\n</tr>\n</tbody>\n</table>\n<p><strong>匹配任意字符</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 12</span></pre></td></tr></table></figure><p><strong> <code>[]</code>  匹配括号中的任意一个字符</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[abc]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># abc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[a-z]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr></table></figure><p>** <code>\\d</code>  匹配数字</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr></table></figure><h2 id=\"匹配多个字符\"><a class=\"markdownIt-Anchor\" href=\"#匹配多个字符\">#</a> 匹配多个字符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">匹配前面的字符 0 次或多次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">匹配前面的字符 1 次或多次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">匹配前面的字符 0 次或 1 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" m=\"\"></td>\n<td style=\"text-align:left\">匹配前面的字符 m 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" m,n=\"\"></td>\n<td style=\"text-align:left\">匹配前面的字符 m 到 n 次</td>\n</tr>\n</tbody>\n</table>\n<p><strong> <code>*</code>  匹配前面的字符 0 次或多次</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># aaa</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>re3 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re3<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"\"</span></pre></td></tr></table></figure><p><strong> <code>+</code>  匹配前面的字符 1 次或多次</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># aaa</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>re3 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re3<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr></table></figure><p><strong> <code>?</code>  匹配前面的字符 0 次或 1 次</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr></table></figure><h2 id=\"匹配开头和结尾\"><a class=\"markdownIt-Anchor\" href=\"#匹配开头和结尾\">#</a> 匹配开头和结尾</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">匹配字符串的结尾</td>\n</tr>\n</tbody>\n</table>\n<p><strong> <code>^</code>  匹配字符串的开头</strong><br>\n注意： <code>^</code>  符号在 <code>[]</code>  中是取反的意思</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr></table></figure><p><strong> <code>$</code>  匹配字符串的结尾</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># c</span></pre></td></tr></table></figure><h2 id=\"匹配分组\"><a class=\"markdownIt-Anchor\" href=\"#匹配分组\">#</a> 匹配分组</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">匹配左右任意一个表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(ab)</td>\n<td style=\"text-align:left\">将括号中的字符作为一个分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\num</td>\n<td style=\"text-align:left\">引用分组 <code>num</code>  匹配到的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P<name>…)</td>\n<td style=\"text-align:left\">分组起别名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:left\">引用别名为 <code>name</code>  分组匹配到的字符串</td>\n</tr>\n</tbody>\n</table>\n<p><strong> <code>|</code>  匹配左右任意一个表达式</strong><br>\n注意：优先从左到右匹配</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a|b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a|b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b</span></pre></td></tr></table></figure><p><strong> <code>(ab)</code>  将括号中的字符作为一个分组</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\w*@(qq|163|126).com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123@163.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123@163.com</span></pre></td></tr></table></figure><p><strong> <code>\\num</code>  引用分组 num 匹配到的字符串</strong><br>\n应用：常在匹配标签时使用，例如匹配 <code>&lt;html&gt;</code>  标签</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;(\\w*)>\\w*&lt;/\\\\1>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;html>login&lt;/html>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;html>login&lt;/html></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;(\\w*)>&lt;(\\w*)>.*&lt;/\\2>&lt;/\\1>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;html>&lt;body>login&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr></table></figure><p><strong> <code>(?P&lt;name&gt;...)</code>  分组起别名</strong><br>\n<strong> <code>(?P=name)</code>  引用别名为 name 分组匹配到的字符串</strong><br>\n使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;(?P&lt;l1>\\w*)>&lt;(?P&lt;l2>\\w*)>.*&lt;/(?P=l2)>&lt;/(?P=l1)>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;html>&lt;body>login&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr></table></figure><p>示例：匹配网址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># res = re.match('www(\\.)\\w*\\\\1(com|cn|org)', 'www.baidu.com')</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># print(res.group()) </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'www.baidu.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.google.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.sina.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.163.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.qq.com'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www(\\.)\\w*\\\\1(com|cn|org)'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"高级用法\"><a class=\"markdownIt-Anchor\" href=\"#高级用法\">#</a> 高级用法</h2>\n<p><code>search()</code>  函数：<br>\n在字符串中搜索匹配的子串，返回第一个匹配的子串，如果没有匹配的子串，则返回 None。<br>\n示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></pre></td></tr></table></figure><p><code>findall()</code>  函数：<br>\n在字符串中搜索匹配的子串，返回所有匹配的子串，以列表形式返回。<br>\n示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['1', '2', '3']</span></pre></td></tr></table></figure><p><code>sub()</code>  函数：<br>\n在字符串中搜索匹配的子串，并替换为指定的字符串。<br>\n参数格式：<br>\n <code>sub(pattern, repl, string, count=0)</code></p>\n<ul>\n<li><code>pattern:</code>  正则表达式，用于匹配子串</li>\n<li><code>repl:</code>  替换字符串</li>\n<li><code>string:</code>  要替换的字符串</li>\n<li><code>count:</code>  最大替换次数，0 表示无限制</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># abc000</span></pre></td></tr></table></figure><p><code>split()</code>  函数：<br>\n在字符串中搜索匹配的子串，并按照匹配的子串将字符串分割成多个子串，以列表形式返回。<br>\n参数格式：<br>\n <code>split(pattern, string, maxsplit=0, flags=0)</code></p>\n<ul>\n<li><code>pattern:</code>  正则表达式，用于匹配子串</li>\n<li><code>string:</code>  要替换的字符串</li>\n<li><code>maxsplit:</code>  最大分割次数，0 表示无限制</li>\n<li><code>flags:</code>  标志位，用于控制正则表达式的匹配方式，0 表示默认值<br>\n示例：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['abc', '']</span></pre></td></tr></table></figure><p><code>compile()</code>  函数：<br>\n将正则表达式编译成一个正则表达式对象，可以用于多次匹配操作。<br>\n参数格式：<br>\ncompile(pattern, flags=0)<br>\n 示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>res <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['1', '2', '3']</span></pre></td></tr></table></figure><h2 id=\"贪婪匹配和懒惰匹配\"><a class=\"markdownIt-Anchor\" href=\"#贪婪匹配和懒惰匹配\">#</a> 贪婪匹配和懒惰匹配</h2>\n<p>贪婪匹配：尽可能多的匹配字符<br>\n懒惰匹配：尽可能少的匹配字符</p>\n<ol>\n<li>贪婪匹配 (默认)</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123456</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>懒惰匹配<br>\n使用 <code>?</code>  符号，表示懒惰匹配<br>\n示例：</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d+?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></pre></td></tr></table></figure><h2 id=\"原生字符串\"><a class=\"markdownIt-Anchor\" href=\"#原生字符串\">#</a> 原生字符串</h2>\n<p>在正则表达式中， <code>\\</code>  符号用于转义特殊字符，例如 <code>\\d</code>  表示匹配数字， <code>\\w</code>  表示匹配字母或数字。<br>\n但是在 Python 中， <code>\\</code>  符号也是转义字符，例如 <code>\\n</code>  表示换行符， <code>\\t</code>  表示制表符。因此，在正则表达式中使用 <code>\\</code>  符号时，需要使用双反斜杠 <code>\\\\</code>  来转义。<br>\n例如， <code>\\d</code>  需要写成 <code>\\\\d</code> 。<br>\n为了避免这种麻烦，可以使用原生字符串，即在字符串前加上 <code>r</code>  或 <code>R</code> ，例如 <code>r'\\d'</code> 。<br>\n示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\d+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123456</span></pre></td></tr></table></figure><p>注意：在正则表达式中，匹配字符串中的字符 <code>\\</code>  时，需要 <code>\\\\\\\\</code> , 加入原生字符串， <code>\\\\</code>  代表 <code>\\</code></p>\n<h1 id=\"os模块\"><a class=\"markdownIt-Anchor\" href=\"#os模块\">#</a> os 模块</h1>\n<h2 id=\"os模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#os模块介绍\">#</a> os 模块介绍</h2>\n<p>os 模块是 Python 标准库中的一个模块，提供了许多与 <code>操作系统交互</code> 的函数。使用 <code>os</code>  模块，可以执行文件和目录操作，如创建、删除、重命名文件和目录，获取文件和目录的属性等。</p>\n<h2 id=\"os模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#os模块常用函数\">#</a> os 模块常用函数</h2>\n<ol>\n<li><code>os.name</code> ：获取操作系统的名称，例如 <code>posix</code>  表示 <code>Linux</code>  或 <code>Mac</code>   <code>OS</code>   <code>X</code> ， <code>nt</code>  表示 Windows。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># posix</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>os.getenv(key)</code> ：获取环境变量的值 (环境变量名称)。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">'PATH'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>os.path.split(path)</code> ：将路径分割成目录和文件名，以元组的形式接收，第一参数为目录，第二参数为文件名。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('/home/user', 'test.txt')</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>os.path.dirname(path)</code> ：获取路径中的目录名。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /home/user</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>os.path.basename(path)</code> ：获取路径中的文件名。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># test.txt</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>os.path.exists(path)</code> ：判断路径 (文件或目录) 是否存在。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>os.path.isfile(path)</code> ：判断路径是否为文件。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"8\">\n<li><code>os.path.isdir(path)</code> ：判断路径是否为目录。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><code>os.path.abspath(path)</code> ：获取绝对路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /home/user/test.txt</span></pre></td></tr></table></figure><ol start=\"10\">\n<li><code>os.path.isabs(path)</code> ：判断路径是否为绝对路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isabs<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isabs<span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"11\">\n<li><code>os.path.join(path, *paths)</code> ：将多个路径组合成一个路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /home/user/test.txt</span></pre></td></tr></table></figure><ol start=\"12\">\n<li><code>os.path.getsize(path)</code> ：获取文件大小，单位为字节。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 12345</span></pre></td></tr></table></figure><h2 id=\"sys模块\"><a class=\"markdownIt-Anchor\" href=\"#sys模块\">#</a> sys 模块</h2>\n<p>sys 模块是 Python 标准库中的一个模块，提供了许多与 <code>Python解释器交互</code> 的函数。使用 <code>sys</code>  模块，可以获取 Python 解释器的信息，如版本号、命令行参数等，还可以控制 Python 解释器的行为，如退出程序、改变标准输入输出等。</p>\n<h2 id=\"sys模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#sys模块常用函数\">#</a> sys 模块常用函数</h2>\n<ol>\n<li><code>sys.getdefaultencoding()</code> ：获取 Python 解释器的默认编码。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getdefaultencoding<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># utf-8</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>sys.path()</code> ：获取 Python 解释器的命令行参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['/home/user', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/dist-packages']</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>sys.platform()</code> ：获取 Python 解释器的平台信息。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span> <span class=\"token comment\"># linux</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>sys.version()</code> ：获取 Python 解释器的版本信息。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3.8.10 (default, Jun  4 2021, 15:09:15)</span></pre></td></tr></table></figure><h1 id=\"time模块\"><a class=\"markdownIt-Anchor\" href=\"#time模块\">#</a> time 模块</h1>\n<p>time 模块是 Python 标准库中的一个模块，提供了许多与 <code>时间</code> 相关的函数。使用 <code>time</code>  模块，可以获取当前时间、格式化时间、时间戳等。</p>\n<p>时间表示方式：</p>\n<ol>\n<li>时间戳：从 1970 年 1 月 1 日 00:00:00 开始计算的秒数。</li>\n<li>时间元组：包含年、月、日、时、分、秒、星期、年中的第几天等信息的元组。</li>\n<li>字符串时间：按照指定格式表示时间的字符串。</li>\n</ol>\n<h2 id=\"time模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#time模块常用函数\">#</a> time 模块常用函数</h2>\n<ol>\n<li><code>time.time()</code> ：获取当前时间的时间戳。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1634567890.123456</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>time.localtime([secs])</code> ：将时间戳转换为本地时间的时间元组。<br>\n返回元组元素：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>元素</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td><code>tm_year</code></td>\n<td>年</td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>tm_mon</code></td>\n<td>月</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>tm_mday</code></td>\n<td>日</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>tm_hour</code></td>\n<td>时</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>tm_min</code></td>\n<td>分</td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>tm_sec</code></td>\n<td>秒</td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>tm_wday</code></td>\n<td>星期几 (0-6,0 表示周一)</td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>tm_yday</code></td>\n<td>一年中的第几天 (1-366)</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>tm_isdst</code></td>\n<td>是否为夏令时 (0-1,0 表示不是)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2021-10-15 10:30:45</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># time.struct_time(tm_year=2021, tm_mon=10, tm_mday=15, tm_hour=10, tm_min=30, tm_sec=45, tm_wday=4, tm_yday=288, tm_isdst=0)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>time.sleep(secs)</code> ：暂停程序执行 secs 秒。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>time.asctime(time_tuple)</code> ：将时间元组转换为字符串时间。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>asctime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Fri Oct 15 10:30:45 2021</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>time.ctime()</code> ：获取当前时间的时间戳。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>ctime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Fri Oct 15 10:30:45 2021</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>time.strftime(format, time_tuple)</code> ：将时间元组转换为指定格式的字符串时间。<br>\n格式化符号：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%Y</code></td>\n<td>年 (4 位)</td>\n</tr>\n<tr>\n<td><code>%m</code></td>\n<td>月 (2 位)</td>\n</tr>\n<tr>\n<td><code>%d</code></td>\n<td>日 (2 位)</td>\n</tr>\n<tr>\n<td><code>%H</code></td>\n<td>时 (24 小时制，2 位)</td>\n</tr>\n<tr>\n<td><code>%M</code></td>\n<td>分 (2 位)</td>\n</tr>\n<tr>\n<td><code>%S</code></td>\n<td>秒 (2 位)</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>星期几 (0-6,0 表示周一)</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>一年中的第几天 (1-366)</td>\n</tr>\n<tr>\n<td><code>%a</code></td>\n<td>星期几的简写 (例如：Mon)</td>\n</tr>\n<tr>\n<td><code>%A</code></td>\n<td>星期几的全称 (例如：Monday)</td>\n</tr>\n<tr>\n<td><code>%b</code></td>\n<td>月份的简写 (例如：Jan)</td>\n</tr>\n<tr>\n<td><code>%B</code></td>\n<td>月份的全称 (例如：January)</td>\n</tr>\n<tr>\n<td><code>%z</code></td>\n<td>时区 (例如：+0800)</td>\n</tr>\n<tr>\n<td><code>%Z</code></td>\n<td>时区名称 (例如：CST)</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>日期的字符串表示 (例如：10/15/21)</td>\n</tr>\n<tr>\n<td><code>%X</code></td>\n<td>时间的字符串表示 (例如：10:30:45)</td>\n</tr>\n<tr>\n<td><code>%c</code></td>\n<td>日期和时间的字符串表示 (例如：Fri Oct 15 10:30:45 2021)</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>一年中的第几周 (以周日为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>一年中的第几周 (以周一为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%V</code></td>\n<td>一年中的第几周 (以 ISO 8601 标准定义的一周为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>一年中的第几天 (1-366)</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>一年中的第几周 (以周日为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>一年中的第几周 (以周一为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%V</code></td>\n<td>一年中的第几周 (以 ISO 8601 标准定义的一周为一周的第一天)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2021-10-15 10:30:45</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>time.strptime(string, format)</code> ：将字符串时间转换为时间元组。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span><span class=\"token string\">'2021-10-15 10:30:45'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># time.struct_time(tm_year=2021, tm_mon=10, tm_mday=15, tm_hour=10, tm_min=30, tm_sec=45, tm_wday=4, tm_yday=288, tm_isdst=-1)</span></pre></td></tr></table></figure><h1 id=\"logging模块\"><a class=\"markdownIt-Anchor\" href=\"#logging模块\">#</a> logging 模块</h1>\n<p>logging 模块是 Python 标准库中的一个模块，提供了许多与 <code>日志</code> 相关的函数。使用 <code>logging</code>  模块，可以记录程序的运行信息，如错误、警告、调试信息等，方便程序调试和问题排查。<br>\n等级：</p>\n<table>\n<thead>\n<tr>\n<th>level</th>\n<th>等级</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NOTSET</code></td>\n<td>0</td>\n<td>不设置级别，按照父 looger 的级别显示日志，如果 root logger, 那么会显示所有的</td>\n</tr>\n<tr>\n<td><code>DEBUG</code></td>\n<td>10</td>\n<td>调试信息，一般用于开发阶段</td>\n</tr>\n<tr>\n<td><code>INFO</code></td>\n<td>20</td>\n<td>一般信息，用于记录程序正常运行的信息</td>\n</tr>\n<tr>\n<td><code>WARNING</code></td>\n<td>30</td>\n<td>警告信息，用于记录可能的问题，但不影响程序的正常运行</td>\n</tr>\n<tr>\n<td><code>ERROR</code></td>\n<td>40</td>\n<td>错误信息，用于记录程序运行中出现的错误，但不影响程序的继续运行</td>\n</tr>\n<tr>\n<td><code>CRITICAL(FATAL)</code></td>\n<td>50</td>\n<td>严重错误信息，用于记录程序运行中出现的严重错误，可能导致程序崩溃</td>\n</tr>\n</tbody>\n</table>\n<p>排序：NOTSET &lt; DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">'debug message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'info message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>logging<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'warning message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>logging<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logging<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span><span class=\"token string\">'critical message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DEBUG:root:debug message</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>INFO:root:info message</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>WARNING:root:warning message</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ERROR:root:error message</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CRITICAL:root:critical message</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># logging 默认的级别是 WARNING，所以只有 WARNING 级别以上的日志才会被输出</span></pre></td></tr></table></figure><h1 id=\"logging模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#logging模块常用函数\">#</a> logging 模块常用函数</h1>\n<ol>\n<li><code>logging.basicConfig(**kwargs)</code> ：配置 root logger 的参数，设置日志级别、日志格式、日志输出位置等。</li>\n</ol>\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>level</code></td>\n<td>设置日志级别，默认为 WARNING 及以上</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>设置日志格式，默认为’%(asctime) s - %(name) s - %(levelname) s - %(message) s’</td>\n</tr>\n<tr>\n<td><code>datefmt</code></td>\n<td>设置日期格式，默认为’% Y-% m-% d % H:% M:% S’</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>设置日志输出文件名，默认为 None，表示输出到控制台</td>\n</tr>\n<tr>\n<td><code>filemode</code></td>\n<td>设置日志输出文件模式，默认为’a’，表示追加；'w’表示覆盖</td>\n</tr>\n<tr>\n<td><code>stream</code></td>\n<td>设置日志输出流，默认为 sys.stderr，表示输出到控制台</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span><span class=\"token string\">'log.log'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>logging<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'warning message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>logging<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logging<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span><span class=\"token string\">'critical message'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"random模块\"><a class=\"markdownIt-Anchor\" href=\"#random模块\">#</a> random 模块</h1>\n<p>random 模块是 Python 标准库中的一个模块，提供了许多与 <code>随机数</code> 相关的函数。使用 <code>random</code>  模块，可以生成随机数、随机选择、随机打乱等操作。</p>\n<h2 id=\"random模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#random模块常用函数\">#</a> random 模块常用函数</h2>\n<ol>\n<li><code>random.random()</code> ：生成一个 0 到 1 之间的随机浮点数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0.123456789</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>random.randint(a, b)</code> ：生成一个 a 到 b 之间的随机整数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>random.choice(seq)</code> ：从序列 seq 中随机选择一个元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># apple</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>random.sample(population, k)</code> ：从 population 中随机选择 k 个不重复的元素，返回一个列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>random.shuffle(x[, random])</code> ：将序列 x 中的元素随机打乱。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 1, 5, 2, 4]</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>random.uniform(a, b)</code> ：生成一个 a 到 b 之间的随机浮点数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5.123456789</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>random.randrange(start, stop[, step])</code> ：生成一个从 start 到 stop 之间的随机整数，步长为 step。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></pre></td></tr></table></figure><h1 id=\"format方法\"><a class=\"markdownIt-Anchor\" href=\"#format方法\">#</a> format 方法</h1>\n<p>format 方法是一种字符串格式化方法，用于将字符串中的占位符替换为指定的值。format 方法可以接受多个参数，也可以接受关键字参数。</p>\n<h2 id=\"format方法语法\"><a class=\"markdownIt-Anchor\" href=\"#format方法语法\">#</a> format 方法语法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li><code>*args</code> ：位置参数，可以接受任意数量的位置参数，按照顺序替换占位符。</li>\n<li><code>**kwargs</code> ：关键字参数，可以接受任意数量的关键字参数，按照关键字替换占位符。</li>\n</ul>\n<h2 id=\"位置参数\"><a class=\"markdownIt-Anchor\" href=\"#位置参数\">#</a> 位置参数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'Alice'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is &#123;0&#125;, I am &#123;1&#125; years old.'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># My name is Alice, I am 20 years old.</span></pre></td></tr></table></figure><h2 id=\"关键字参数\"><a class=\"markdownIt-Anchor\" href=\"#关键字参数\">#</a> 关键字参数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'Alice'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is &#123;name&#125;, I am &#123;age&#125; years old.'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># My name is Alice, I am 20 years old.</span></pre></td></tr></table></figure><h2 id=\"占位符\"><a class=\"markdownIt-Anchor\" href=\"#占位符\">#</a> 占位符</h2>\n<p>占位符的语法为 <code>&#123;&#125;</code> ，可以包含以下内容：</p>\n<ul>\n<li><code>:</code> ：指定格式化方式，例如 <code>&#123;0:.2f&#125;</code>  表示将第一个参数格式化为保留两位小数的浮点数。</li>\n<li><code>!</code> ：指定转换方式，例如 <code>&#123;0!r&#125;</code>  表示将第一个参数转换为字符串表示。</li>\n<li><code>#</code> ：指定进制，例如 <code>&#123;0:#x&#125;</code>  表示将第一个参数格式化为十六进制表示。</li>\n<li><code>*</code> ：指定宽度，例如 <code>&#123;0:*&lt;10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，左对齐。</li>\n<li><code>+</code> ：指定符号，例如 <code>&#123;0:+&#125;</code>  表示将第一个参数格式化为带符号的整数。</li>\n<li><code>-</code> ：指定对齐方式，例如 <code>&#123;0:-&lt;10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，左对齐。</li>\n<li><code>=</code> ：指定填充字符，例如 <code>&#123;0:=^10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，居中对齐，填充字符为 <code>=</code> 。</li>\n<li><code>0</code> ：指定填充字符，例如 <code>&#123;0:0&gt;10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，右对齐，填充字符为 <code>0</code> 。</li>\n<li><code>,</code> ：指定千位分隔符，例如 <code>&#123;0:,&#125;</code>  表示将第一个参数格式化为带千位分隔符的整数。</li>\n<li><code>b</code> ：将整数格式化为二进制表示。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">1234567890</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:,&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 1,234,567,890</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 111010110111100110100010010</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:#x&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 0x499602d2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:0>10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 0000004996</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:*&lt;10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 499602d2****</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:+&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is +1234567890</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:-&lt;10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 1234567890-----</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:=^10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is =1234567890==</span></pre></td></tr></table></figure>",
            "tags": [
                "python进阶"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2021/10/01/python/2023-10-12-python%E5%9F%BA%E7%A1%80/",
            "url": "https://zhang3399.github.io/2021/10/01/python/2023-10-12-python%E5%9F%BA%E7%A1%80/",
            "title": "python基本语法",
            "date_published": "2021-10-01T02:00:00.000Z",
            "content_html": "<h1 id=\"变量和标识符\"><a class=\"markdownIt-Anchor\" href=\"#变量和标识符\">#</a> 变量和标识符</h1>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>变量是用于存储数据的容器，变量名可以包含字母、数字和下划线，但不能以数字开头。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<p>标识符是用于标识变量、函数、类、模块等的名称。标识符的命名规则如下：</p>\n<ul>\n<li>标识符可以包含字母、数字和下划线，但不能以数字开头。</li>\n<li>标识符不能包含空格和特殊字符。</li>\n<li>标识符区分大小写。</li>\n<li>标识符不能是 Python 的关键字。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合法的标识符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_variable <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>my_variable_2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>my_variable3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 非法的标识符</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># my-variable = 10 # 包含空格</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 2my_variable = 10 # 以数字开头</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># my-variable-2 = 20 # 包含特殊字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># class = 10 # 是 Python 关键字</span></pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"整数int\"><a class=\"markdownIt-Anchor\" href=\"#整数int\">#</a> 整数 (int)</h2>\n<p>整数是用于表示整数的类型，例如 1、2、3 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><h2 id=\"浮点数float\"><a class=\"markdownIt-Anchor\" href=\"#浮点数float\">#</a> 浮点数 (float)</h2>\n<p>浮点数是用于表示小数的类型，例如 1.0、2.5、3.14 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr></table></figure><h2 id=\"字符串str\"><a class=\"markdownIt-Anchor\" href=\"#字符串str\">#</a> 字符串 (str)</h2>\n<p>字符串是用于表示文本的类型，例如 &quot;hello&quot;、&quot;world&quot; 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string2 <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span></pre></td></tr></table></figure><p>字符串常见操作：</p>\n<ol>\n<li>字符串拼接：使用  <code>+</code>  运算符将两个字符串连接起来。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token comment\"># a=\"helloworld\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>字符串重复：使用  <code>*</code>  运算符将字符串重复指定次数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token comment\"># a=\"hellohellohello\"</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>字符串长度：使用  <code>len()</code>  函数获取字符串的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>字符串切片：使用  <code>[:]</code>  运算符获取字符串的子串。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"el\"</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>字符串查找：使用  <code>find()</code>  函数查找子串在字符串中的位置。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 2</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>字符串替换：使用  <code>replace()</code>  函数替换字符串中的子串。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"hexxo\"</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>字符串分割：使用  <code>split()</code>  函数将字符串分割成子串列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [\"hello\", \"world\"]</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>字符串大小写转换：使用  <code>upper()</code> 、 <code>lower()</code> 、 <code>capitalize()</code> 、 <code>title()</code>  函数进行大小写转换。</li>\n</ol>\n<ul>\n<li><code>upper()</code> ：将字符串转换为大写。</li>\n<li><code>lower()</code> ：将字符串转换为小写。</li>\n<li><code>capitalize()</code> ：将字符串的首字母转换为大写。</li>\n<li><code>title()</code> ：将字符串的每个单词的首字母转换为大写。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"HELLO\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"Hello\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"Hello\"</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>字符串格式化：使用  <code>%</code>  运算符或  <code>format()</code>  函数进行字符串格式化。</li>\n</ol>\n<ul>\n<li><code>%</code>  运算符：使用  <code>%</code>  运算符进行字符串格式化，格式化字符串中的  <code>%s</code> 、 <code>%d</code>  等占位符会被后面的参数替换。</li>\n<li><code>format()</code>  函数：使用  <code>format()</code>  函数进行字符串格式化，格式化字符串中的  <code>&#123;&#125;</code>  占位符会被后面的参数替换。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is %s and I am %d years old.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"My name is Alice and I am 25 years old.\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is &#123;&#125; and I am &#123;&#125; years old.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"My name is Alice and I am 25 years old.\"</span></pre></td></tr></table></figure><ol>\n<li>字符串拼接：使用  <code>join()</code>  函数将列表中的字符串拼接成一个字符串。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"hello world\"</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>字符串判断：使用  <code>startswith()</code> 、 <code>endswith()</code> 、 <code>isalpha()</code> 、 <code>isdigit()</code> 、 <code>isalnum()</code> 、 <code>isspace()</code>  函数判断字符串的属性。</li>\n</ol>\n<ul>\n<li><code>startswith()</code> ：判断字符串是否以指定子串开头。</li>\n<li><code>endswith()</code> ：判断字符串是否以指定子串结尾。</li>\n<li><code>isalpha()</code> ：判断字符串是否只包含字母。</li>\n<li><code>isdigit()</code> ：判断字符串是否只包含数字。</li>\n<li><code>isalnum()</code> ：判断字符串是否只包含字母和数字。</li>\n<li><code>isspace()</code> ：判断字符串是否只包含空白字符。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isspace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 False</span></pre></td></tr></table></figure><h1 id=\"列表list\"><a class=\"markdownIt-Anchor\" href=\"#列表list\">#</a> 列表 (list)</h1>\n<p>列表是用于存储多个元素的有序集合，可以包含不同类型的元素。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>初始化:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 空列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>empty_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>empty_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 初始化带元素的列表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用列表推导式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>even_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 使用构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>from_iterable <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['h', 'e', 'l', 'l', 'o']</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>from_range <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># [0, 1, 2, 3, 4]</span></pre></td></tr></table></figure><p>列表常见操作：</p>\n<ol>\n<li>访问列表元素：使用索引访问列表中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改列表元素：使用索引修改列表中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [10, 2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>删除列表元素：使用  <code>del</code>  语句删除列表中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>列表切片：使用  <code>[:]</code>  运算符获取列表的子列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 3]</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>列表长度：使用  <code>len()</code>  函数获取列表的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>列表追加：使用  <code>append()</code>  方法将元素追加到列表末尾。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3, 4, 5, 6]</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>列表插入：使用  <code>insert()</code>  方法将元素插入到列表指定位置。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 10, 2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>列表删除：使用  <code>remove()</code>  方法删除列表中指定值的第一个元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 4, 5]</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>列表排序：使用  <code>sort()</code>  方法对列表进行排序。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>列表反转：使用  <code>reverse()</code>  方法将列表中的元素反转。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [5, 4, 3, 2, 1]</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>列表合并：使用  <code>+</code>  运算符将两个列表合并成一个列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3, 4, 5, 6]</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>列表复制：使用  <code>copy()</code>  方法复制列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3]</span></pre></td></tr></table></figure><ol start=\"13\">\n<li>查找列表中元素：使用  <code>in</code>  运算符判断元素是否在列表中。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 1. 检查元素是否存在</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'watermelon'</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 2. 使用 not in 检查不存在</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'kiwi'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kiwi is not in the list\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 会执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 使用 count () 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 统计元素出现次数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>count <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><ol start=\"16\">\n<li>添加元素的方法</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 追加元素到末尾：append ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fruits<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在末尾添加单个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'orange']</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 2. 插入元素到指定位置：insert ()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fruits<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在索引 1 位置插入元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'mango', 'banana']</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 添加多个元素：extend ()</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fruits<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在末尾添加多个元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'orange', 'grape']</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 4. 使用 + 运算符连接列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>more_fruits <span class=\"token operator\">=</span> fruits <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kiwi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 创建新列表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>more_fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'kiwi', 'pear']</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 5. 使用 += 运算符原地扩展</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>fruits <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kiwi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 原地添加多个元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'kiwi', 'pear']</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 6. 列表推导式（添加特定元素）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>doubled_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 创建新列表</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doubled_numbers<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2, 4, 6]</span></pre></td></tr></table></figure><h1 id=\"元组tuple\"><a class=\"markdownIt-Anchor\" href=\"#元组tuple\">#</a> 元组 (tuple)</h1>\n<p>元组是用于存储多个元素的有序集合，与列表类似，但元组是不可变的、有序的集合，用圆括号 () 表示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>初始化</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 空元组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>empty_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>empty_tuple <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 初始化带元素的元组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>coordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 单元素元组（需要逗号）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>single_element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 注意逗号，否则会被认为是整数 42</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>not_a_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 这不是元组，是整数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 使用构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>from_list <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1, 2, 3)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>from_string <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('a', 'b', 'c')</span></pre></td></tr></table></figure><p><strong>元组常见操作：</strong></p>\n<ol>\n<li>访问元组元素：使用索引访问元组中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>列表切片：使用  <code>[:]</code>  运算符获取元组的子元组。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 (2, 3)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>元组长度：使用  <code>len()</code>  函数获取元组的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>元组解包：使用  <code>=</code>  运算符将元组中的元素赋值给多个变量。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>查找元组中元素：使用  <code>in</code>  运算符判断元素是否在元组中。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 使用 in 关键字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span> <span class=\"token keyword\">in</span> colors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'purple'</span> <span class=\"token keyword\">in</span> colors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 2. 使用 count () 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> colors<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue is in the tuple\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 使用 index () 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    position <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Green found at position </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>position<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Green not found\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>添加元素的方法</li>\n</ol>\n<p>元组不可变，不能直接添加元素，但可以创建新元组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>original <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 通过连接操作添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_tuple <span class=\"token operator\">=</span> original <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 注意：单个元素需要加逗号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_tuple<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: (1, 2, 3, 4)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 通过解包再创建</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>another <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>original<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>another<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: (1, 2, 3, 5, 6)</span></pre></td></tr></table></figure><h1 id=\"字典dict\"><a class=\"markdownIt-Anchor\" href=\"#字典dict\">#</a> 字典 (dict)</h1>\n<p>字典是用于存储键值对的集合，键值对之间用冒号分隔，键值对之间用逗号分隔，字典用花括号 {} 表示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>初始化:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 空字典</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>empty_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>empty_dict <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 初始化带键值对的字典</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 使用字典推导式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># &#123;0:0, 1:1, 2:4, 3:9, 4:16&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>word_counts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cherry'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用构造函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>from_list <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>from_keys <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'a':0, 'b':0, 'c':0&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 使用关键字参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">'London'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>字典常见操作：</strong></p>\n<ol>\n<li>访问字典元素：使用键访问字典中的值。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"Alice\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 25</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"New York\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改字典元素：使用键修改字典中的值。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;\"name\": \"Alice\", \"age\": 26, \"city\": \"New York\"&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>删除字典元素：使用  <code>del</code>  语句删除字典中的键值对。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;\"name\": \"Alice\", \"city\": \"New York\"&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>字典长度：使用  <code>len()</code>  函数获取字典的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>字典遍历：使用  <code>for</code>  循环遍历字典中的键值对。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>查找字典中元素：使用  <code>in</code>  运算符判断键是否在字典中。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 检查键是否存在（最常用）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 检查键是否存在</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 2. 检查值是否存在</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New York'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'London'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 3. 检查特定键值对</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>添加元素的方法</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 添加键值对：直接赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">[</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"New York\"</span>  <span class=\"token comment\"># 添加新键值对</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Alice', 'age': 30, 'city': 'New York'&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 2. 批量添加：update ()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>person<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Paris\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加多个键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Alice', 'age': 30, 'city': 'Paris'&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 设置默认值：setdefault ()</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 添加新键（如果不存在）并设置默认值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Alice', 'age': 25&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 4. 字典推导式（添加新元素）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">*</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 创建新字典</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;1: 1, 2: 4, 3: 9, 4: 16, 5: 25&#125;</span></pre></td></tr></table></figure><h1 id=\"集合set\"><a class=\"markdownIt-Anchor\" href=\"#集合set\">#</a> 集合 (set)</h1>\n<p>集合是用于存储多个元素的集合，元素不重复且无序。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>集合常见操作：</p>\n<ol>\n<li>添加元素：使用  <code>add()</code>  方法向集合中添加元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3, 4, 5, 6&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>删除元素：使用  <code>remove()</code>  方法从集合中删除指定元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 4, 5&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>集合长度：使用  <code>len()</code>  函数获取集合的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>集合遍历：使用  <code>for</code>  循环遍历集合中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>集合交集：使用  <code>&amp;</code>  运算符计算两个集合的交集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;4, 5&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>集合并集：使用  <code>|</code>  运算符计算两个集合的并集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>集合差集：使用  <code>-</code>  运算符计算两个集合的差集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3&#125;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>集合对称差集：使用  <code>^</code>  运算符计算两个集合的对称差集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3, 6, 7, 8&#125;</span></pre></td></tr></table></figure><h2 id=\"布尔值\"><a class=\"markdownIt-Anchor\" href=\"#布尔值\">#</a> 布尔值</h2>\n<p>布尔值是用于表示真假的类型，只有两个值：True 和 False。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><h1 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<h2 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h2>\n<p>算术运算符用于执行基本的数学运算，例如加法、减法、乘法、除法等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token comment\"># c=30</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b <span class=\"token comment\"># d=-10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token comment\"># e=200</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b <span class=\"token comment\"># f=0.5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>g <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b <span class=\"token comment\"># g=10</span></pre></td></tr></table></figure><h2 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符</h2>\n<p>比较运算符用于比较两个值的大小关系，例如大于、小于、等于、不等于等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> b  <span class=\"token comment\"># c=False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;</span> b  <span class=\"token comment\"># d=True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> a <span class=\"token operator\">==</span> b <span class=\"token comment\"># e=False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f <span class=\"token operator\">=</span> a <span class=\"token operator\">!=</span> b <span class=\"token comment\"># f=True</span></pre></td></tr></table></figure><h2 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<p>逻辑运算符用于执行逻辑运算，例如与、或、非等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token keyword\">and</span> b <span class=\"token comment\"># c=False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token keyword\">or</span> b  <span class=\"token comment\"># d=True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> a   <span class=\"token comment\"># e=False</span></pre></td></tr></table></figure><h2 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h2>\n<p>赋值运算符用于将一个值赋给一个变量，例如等于、加等于、减等于等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> b <span class=\"token comment\"># a=20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">+=</span> b <span class=\"token comment\"># a=40</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">-=</span> b <span class=\"token comment\"># a=20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">*=</span> b <span class=\"token comment\"># a=400</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">/=</span> b <span class=\"token comment\"># a=2.0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">%=</span> b <span class=\"token comment\"># a=0</span></pre></td></tr></table></figure><h2 id=\"位运算\"><a class=\"markdownIt-Anchor\" href=\"#位运算\">#</a> 位运算</h2>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n<td>两个位都为 1 时，结果为 1</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或</td>\n<td>两个位都为 0 时，结果为 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n<td>两个位不同时，结果为 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反</td>\n<td>将所有位取反</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>将所有位向左移动指定的位数</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>将所有位向右移动指定的位数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token comment\"># 60 = 0011 1100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">13</span> <span class=\"token comment\"># 13 = 0000 1101</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b <span class=\"token comment\"># c = 0000 1100 = 12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b <span class=\"token comment\"># d = 0011 1101 = 61</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b <span class=\"token comment\"># e = 0011 0001 = 49</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>a    <span class=\"token comment\"># f = 1100 0011 = -61</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>g <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token comment\"># g = 1111 0000 = 240</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>h <span class=\"token operator\">=</span> a <span class=\"token operator\">>></span> <span class=\"token number\">2</span> <span class=\"token comment\"># h = 0000 1111 = 15</span></pre></td></tr></table></figure><h1 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"条件语句\"><a class=\"markdownIt-Anchor\" href=\"#条件语句\">#</a> 条件语句</h2>\n<p>条件语句用于根据条件执行不同的代码块，例如 if 语句、if-else 语句、if-elif-else 语句等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a大于b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">elif</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a小于b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a等于b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h2>\n<p>循环语句用于重复执行一段代码，例如 for 循环、while 循环等。</p>\n<ul>\n<li><code>for</code>  循环：用于遍历一个可迭代对象，例如 <code>列表</code> 、 <code>元组</code> 、 <code>字符串</code> 等。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> ceil <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ceil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>while 循环：用于在满足条件时重复执行一段代码。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>函数是一段可重复使用的代码块，可以接受参数并返回结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"函数文档字符串\"><a class=\"markdownIt-Anchor\" href=\"#函数文档字符串\">#</a> 函数文档字符串</h2>\n<p>函数文档字符串用于描述函数的功能和用法，可以使用三引号  <code>&quot;&quot;&quot;</code>  包围。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    This function adds two numbers.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Parameters:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a (int): The first number.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    b (int): The second number.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Returns:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    int: The sum of the two numbers.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr></table></figure><h2 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\">#</a> 函数参数</h2>\n<p>函数参数用于传递数据给函数。</p>\n<ol>\n<li>位置参数：按照参数的顺序传递参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>默认参数：为参数指定默认值。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>可变参数：使用 <code>*</code>  传递可变数量的参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 以元组类型接 args = (1, 2, 3, 4, 5) </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        result <span class=\"token operator\">+=</span> i</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><p>注意：函数接收可变数量的参数，使用 <code>*args</code>  接收参数， <code>args</code>  是一个元组类型 <code>()</code> 。</p>\n<ol start=\"4\">\n<li>关键字参数：通过 <code>**</code>  传递关键字参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fund</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 以字典类型接 kwargs = &#123;\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fund<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：函数接收关键字参数，使用 <code>**kwargs</code>  接收参数， <code>kwargs</code>  是一个字典类型 <code>&#123;&#125;</code> 。</p>\n<h2 id=\"函数返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数返回值\">#</a> 函数返回值</h2>\n<p>函数返回值用于返回函数执行的结果，可以使用 <code>return</code>  语句。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><h2 id=\"函数嵌套\"><a class=\"markdownIt-Anchor\" href=\"#函数嵌套\">#</a> 函数嵌套</h2>\n<ol>\n<li>嵌套调用</li>\n</ol>\n<p>函数嵌套调用是指在一个函数内部调用另一个函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>result <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 9</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>嵌套定义<br>\n函数嵌套是指在一个函数内部定义另一个函数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is inner function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    inner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>outer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"匿名函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数\">#</a> 匿名函数</h2>\n<p>匿名函数是指没有名字的函数，使用 <code>lambda</code>  关键字定义。</p>\n<p>格式： <code>函数名 = lambda 参数列表: 表达式(返回值)</code></p>\n<ol>\n<li>无参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>有参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>带默认参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>带可变参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>带关键字参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">:</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 6</span></pre></td></tr></table></figure><h2 id=\"内置函数\"><a class=\"markdownIt-Anchor\" href=\"#内置函数\">#</a> 内置函数</h2>\n<p>内置函数是指 Python 语言自带的函数，例如 <code>len()</code> 、 <code>max()</code> 、 <code>min()</code>  等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr></table></figure><p>查看所有内置函数： <code>dir(__builtins__)</code> <br>\n <code>dir</code>  函数用于返回一个列表，包含指定对象的所有属性和方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 大写的为常量，小写的为函数</span></pre></td></tr></table></figure><h3 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\">#</a> map 函数</h3>\n<p>map 函数用于将一个函数应用于可迭代对象的每个元素，并返回一个迭代器。</p>\n<p>格式： <code>map(函数, 可迭代对象)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将每个元素乘以 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 4, 6, 8, 10]</span></pre></td></tr></table></figure><h3 id=\"filter函数\"><a class=\"markdownIt-Anchor\" href=\"#filter函数\">#</a> filter 函数</h3>\n<p>filter 函数用于过滤可迭代对象中的元素，并返回一个迭代器。</p>\n<p>格式： <code>filter(函数, 可迭代对象)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 过滤出偶数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 4]</span></pre></td></tr></table></figure><h3 id=\"reduce函数\"><a class=\"markdownIt-Anchor\" href=\"#reduce函数\">#</a> reduce 函数</h3>\n<p>reduce 函数用于将一个函数应用于可迭代对象的每个元素，并返回一个值。<br>\n格式： <code>reduce(函数, 可迭代对象)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将每个元素相加</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><h3 id=\"zip函数\"><a class=\"markdownIt-Anchor\" href=\"#zip函数\">#</a> zip 函数</h3>\n<p>zip 函数用于将多个可迭代对象中的元素打包成一个个元组，并返回一个迭代器。</p>\n<p>格式： <code>zip(可迭代对象1, 可迭代对象2, ...)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将每个元素打包成元组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [(1, 'a'), (2, 'b'), (3, 'c')]</span></pre></td></tr></table></figure><h3 id=\"拆包\"><a class=\"markdownIt-Anchor\" href=\"#拆包\">#</a> 拆包</h3>\n<p>对于函数中的多个返回数据，去掉元组，列表或者字典的括号，直接赋值给多个变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> arr</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><h2 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p>闭包是指在一个函数内部定义另一个函数，并且内部函数可以访问外部函数的变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>closure <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>closure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 10</span></pre></td></tr></table></figure><h1 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<p>作用域是指变量可访问的范围，分为全局作用域和局部作用域。</p>\n<ol>\n<li>全局作用域：在函数外部定义的变量，可以在整个程序中访问。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>局部作用域：在函数内部定义的变量，只能在函数内部访问。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 报错，c 未定义</span></pre></td></tr></table></figure><p>** 注意：** 局部变量 <code>c</code>  只能在 <code>add</code>  函数内部访问，不能在函数外部访问。</p>\n<p>局部变量升级为全局变量：使用 <code>global</code>  关键字声明变量为全局变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><p>局部变量 <code>a</code>  升级为全局变量，可以在函数外部访问。</p>\n<h1 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\">#</a> 异常</h1>\n<p>异常是指程序运行过程中出现的错误。</p>\n<p>异常种类：</p>\n<table>\n<thead>\n<tr>\n<th>异常类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ZeroDivisionError</code></td>\n<td>除数为 0</td>\n</tr>\n<tr>\n<td><code>TypeError</code></td>\n<td>类型错误</td>\n</tr>\n<tr>\n<td><code>ValueError</code></td>\n<td>值错误</td>\n</tr>\n<tr>\n<td><code>IndexError</code></td>\n<td>索引错误</td>\n</tr>\n<tr>\n<td><code>KeyError</code></td>\n<td>键错误</td>\n</tr>\n<tr>\n<td><code>NameError</code></td>\n<td>名称错误</td>\n</tr>\n<tr>\n<td><code>AttributeError</code></td>\n<td>属性错误</td>\n</tr>\n<tr>\n<td><code>SyntaxError</code></td>\n<td>语法错误</td>\n</tr>\n<tr>\n<td><code>IndentationError</code></td>\n<td>缩进错误</td>\n</tr>\n<tr>\n<td><code>IOError</code></td>\n<td>输入输出错误</td>\n</tr>\n<tr>\n<td><code>EOFError</code></td>\n<td>文件结束错误</td>\n</tr>\n<tr>\n<td><code>ImportError</code></td>\n<td>导入错误</td>\n</tr>\n<tr>\n<td><code>ModuleNotFoundError</code></td>\n<td>模块未找到错误</td>\n</tr>\n<tr>\n<td><code>AssertionError</code></td>\n<td>断言错误</td>\n</tr>\n<tr>\n<td><code>KeyboardInterrupt</code></td>\n<td>键盘中断</td>\n</tr>\n<tr>\n<td><code>SystemExit</code></td>\n<td>系统退出</td>\n</tr>\n<tr>\n<td><code>Exception</code></td>\n<td>所有异常的基类</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"捕获异常\"><a class=\"markdownIt-Anchor\" href=\"#捕获异常\">#</a> 捕获异常。</h2>\n<ul>\n<li>格式一： <code>try-except</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"除数不能为0\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>格式二： <code>try-except-else</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 没有异常时执行的代码</span></pre></td></tr></table></figure><ul>\n<li>格式三：try-except-finally</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 无论是否出现异常都会执行的代码</span></pre></td></tr></table></figure><ul>\n<li>格式四：try-except-else-finally</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 没有异常时执行的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 无论是否出现异常都会执行的代码</span></pre></td></tr></table></figure><h2 id=\"抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#抛出异常\">#</a> 抛出异常</h2>\n<p>使用 <code>raise</code>  关键字抛出异常。</p>\n<p>格式： <code>raise 异常类型(异常信息)</code> <br>\n 示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">raise</span> ZeroDivisionError<span class=\"token punctuation\">(</span><span class=\"token string\">\"除数不能为0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    result <span class=\"token operator\">=</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\">#</a> 模块</h1>\n<p>模块是包含一组函数、类和变量的文件，可以导入到其他文件中使用。</p>\n<h2 id=\"内置模块\"><a class=\"markdownIt-Anchor\" href=\"#内置模块\">#</a> 内置模块</h2>\n<p>Python 内置了一些模块，可以直接使用，例如 <code>math</code> 、 <code>random</code> 、 <code>datetime</code>  等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><h2 id=\"第三方模块第三方库\"><a class=\"markdownIt-Anchor\" href=\"#第三方模块第三方库\">#</a> 第三方模块（第三方库）</h2>\n<p>第三方模块是指由其他开发者编写的模块，需要先安装才能使用。</p>\n<p>安装第三方模块：使用 <code>pip</code>  命令安装。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install 模块名</pre></td></tr></table></figure><p>使用第三方模块：使用 <code>import</code>  关键字导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> 模块名</pre></td></tr></table></figure><p>使用第三方模块中的函数：使用 <code>模块名.函数名()</code>  调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><h2 id=\"自定义模块\"><a class=\"markdownIt-Anchor\" href=\"#自定义模块\">#</a> 自定义模块</h2>\n<p>自定义模块是指用户自己编写的模块，需要先定义一个 <code>.py</code>  文件，然后在其他文件中导入使用。</p>\n<p>注意：自定义模块的文件名不能与 Python 内置模块的文件名相同。</p>\n<h2 id=\"导入模块\"><a class=\"markdownIt-Anchor\" href=\"#导入模块\">#</a> 导入模块</h2>\n<ol>\n<li>导入模块：使用 <code>import</code>  关键字导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> 模块名</pre></td></tr></table></figure><ol start=\"2\">\n<li>使用模块中的函数：使用 <code>模块名.函数名()</code>  调用。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>导入模块中的特定函数：使用 <code>from 模块名 import 函数名</code> 导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sqrt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>导入模块中的所有函数：使用 <code>from 模块名 import *</code>  导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>导入模块中的特定变量：使用 <code>from 模块名 import 变量名</code> 导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3.141592653589793</span></pre></td></tr></table></figure><h2 id=\"起别名\"><a class=\"markdownIt-Anchor\" href=\"#起别名\">#</a> 起别名</h2>\n<h3 id=\"模块起别名\"><a class=\"markdownIt-Anchor\" href=\"#模块起别名\">#</a> 模块起别名</h3>\n<p>使用 <code>as</code>  关键字给模块起别名。</p>\n<p>语法： <code>import 模块名 as 别名</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math <span class=\"token keyword\">as</span> m</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><h3 id=\"功能起别名\"><a class=\"markdownIt-Anchor\" href=\"#功能起别名\">#</a> 功能起别名</h3>\n<p>使用 <code>as</code>  关键字给功能起别名。</p>\n<p>语法： <code>from 模块名 import 功能 as 别名</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sqrt <span class=\"token keyword\">as</span> s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><p>注意：导入多个功能时，可以使用‘，’隔开，后面功能也可以使用取别名： <code>from math import sqrt as s, pi as p</code></p>\n<h2 id=\"内置全局变量\"><a class=\"markdownIt-Anchor\" href=\"#内置全局变量\">#</a> 内置全局变量</h2>\n<p>语法：<br>\nif <strong>name</strong> == “<strong>main</strong>”:</p>\n<p>作用：用来控制 py 文件在不同应用场景下执行不同的逻辑，当模块被直接运行时， <code>__name__</code> 的值为 <code>&quot;__main__&quot;</code> ，当模块被导入时， <code>__name__</code> 的值为模块名。<br>\n例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接运行\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"被导入\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接运行该文件输出：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接运行</pre></td></tr></table></figure><p>被导入该文件输出：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>被导入</pre></td></tr></table></figure><p>总结：导入不会执行 <code>if __name__ == &quot;__main__&quot;:</code>  下的代码，只有直接运行该文件才会执行 <code>if __name__ == &quot;__main__&quot;:</code>  下的代码。</p>\n<h2 id=\"包\"><a class=\"markdownIt-Anchor\" href=\"#包\">#</a> 包</h2>\n<p>包是指包含一组模块的文件夹，文件夹中必须包含一个 <code>__init__.py</code>  文件，用于标识该文件夹是一个包。</p>\n<h3 id=\"initpy\"><a class=\"markdownIt-Anchor\" href=\"#initpy\">#</a> <strong>init</strong>.py</h3>\n<p>使用包：使用 <code>import 包名.模块名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> mypackage<span class=\"token punctuation\">.</span>mymodule</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mypackage<span class=\"token punctuation\">.</span>mymodule<span class=\"token punctuation\">.</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的特定模块：使用 <code>from 包名 import 模块名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage <span class=\"token keyword\">import</span> mymodule</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mymodule<span class=\"token punctuation\">.</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的特定函数：使用 <code>from 包名.模块名 import 函数名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage<span class=\"token punctuation\">.</span>mymodule <span class=\"token keyword\">import</span> myfunction</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的特定变量：使用 <code>from 包名.模块名 import 变量名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage<span class=\"token punctuation\">.</span>mymodule <span class=\"token keyword\">import</span> myvariable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myvariable<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的所有函数：使用 <code>from 包名.模块名 import *</code>  导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage<span class=\"token punctuation\">.</span>mymodule <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myvariable<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的所有变量：使用 <code>from 包名.模块名 import *</code>  导入。</p>\n<p>注意：导包会默认执行 <code>__init__.py </code> 文件中的代码。</p>\n<h3 id=\"all\"><a class=\"markdownIt-Anchor\" href=\"#all\">#</a> <strong>all</strong></h3>\n<p><code>__all__</code> 是一个列表，用于指定包中可以被导入的模块。</p>\n<p>语法： <code>__all__ = [&quot;模块名1&quot;, &quot;模块名2&quot;, ...]</code></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mypackage/__init__.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mymodule1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mymodule2\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>使用包中的特定模块：使用 <code>from 包名 import 模块名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage <span class=\"token keyword\">import</span> mymodule1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mymodule1<span class=\"token punctuation\">.</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"闭包-2\"><a class=\"markdownIt-Anchor\" href=\"#闭包-2\">#</a> 闭包</h2>\n<p>闭包是指在一个函数内部定义的函数，它可以访问外部函数的局部变量。<br>\n实现：</p>\n<ol>\n<li>函数嵌套（内部函数定义在外部函数内部）</li>\n<li>内部函数访问外部函数的局部变量</li>\n<li>外部函数返回内部函数</li>\n</ol>\n<p>语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> 外部函数<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    变量 <span class=\"token operator\">=</span> 值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> 内部函数<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>变量<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> 内部函数</pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function <span class=\"token comment\"># 返回内部函数的引用，即地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>my_function <span class=\"token operator\">=</span> outer_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>my_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 10</span></pre></td></tr></table></figure><p>注意：闭包可以访问外部函数的局部变量，但是不能修改外部函数的局部变量。</p>\n<h3 id=\"函数引用\"><a class=\"markdownIt-Anchor\" href=\"#函数引用\">#</a> 函数引用</h3>\n<p>函数引用是指将函数赋值给一个变量，然后通过变量调用函数。</p>\n<p>语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量 <span class=\"token operator\">=</span> 函数名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>my_function_ref <span class=\"token operator\">=</span> my_function</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>my_function_ref<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 Hello, World!</span></pre></td></tr></table></figure><h3 id=\"闭包变量\"><a class=\"markdownIt-Anchor\" href=\"#闭包变量\">#</a> 闭包变量</h3>\n<p>闭包变量是指在闭包中使用的变量，闭包变量实际上只有一份，每次开启内函数都是在使用同一份闭包变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer_function:\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner_function:\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> m</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>out <span class=\"token operator\">=</span> outer_function<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># outer_function: 10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>out<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inner_function: 20</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inner_function: 20 30</span></pre></td></tr></table></figure><h2 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h2>\n<p>作用：在不修改原有函数代码的情况下，给函数增加新的功能。</p>\n<ol>\n<li>标准装饰器</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 闭包三要素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 1. 函数嵌套</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 2. 内部函数使用外部函数的变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 3. 外部函数返回内部函数的函数名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 装饰器函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>out <span class=\"token operator\">=</span> outer_function<span class=\"token punctuation\">(</span>send<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>out<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>语法糖装饰器</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>被装饰的函数有参数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件给\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>多个装饰器</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第一个装饰器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function1</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 第二个装饰器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function2</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 被装饰的函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件给\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：Python 的装饰器应用顺序是 ​ <code>​自底向上​​</code>  的，即靠近 <code>函数定义</code> 的装饰器（ <code>@outer_function2</code> ）先被应用，外层装饰器（ <code>@outer_function1</code> ）后应用。<br>\n以上可以看做：  <code>send = outer_function1(outer_function2(send))</code></p>\n",
            "tags": [
                "python"
            ]
        }
    ]
}