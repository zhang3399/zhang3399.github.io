{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"python\" category",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2021/10/29/python/2023-10-16-python%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/",
            "url": "https://zhang3399.github.io/2021/10/29/python/2023-10-16-python%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/",
            "title": "python进程、线程、协程",
            "date_published": "2021-10-29T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>python 多线程</p>\n</blockquote>\n<h1 id=\"进程和线程\"><a class=\"markdownIt-Anchor\" href=\"#进程和线程\">#</a> 进程和线程</h1>\n<ul>\n<li>进程：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</li>\n<li>线程：是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li>\n</ul>\n<h1 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\">#</a> 进程</h1>\n<p>含义：</p>\n<ul>\n<li>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li>\n<li>一个正在运行的程序就是一个进程，进程是系统资源分配的最小单位，是能独立运行的最小单位。<br>\n注意：进程可以创建多个线程，多进程也可以完成多任务</li>\n</ul>\n<h2 id=\"进程的状态\"><a class=\"markdownIt-Anchor\" href=\"#进程的状态\">#</a> 进程的状态</h2>\n<ol>\n<li>就绪状态：进程已经获得除 CPU 外的所有必要资源，等待分配 CPU。</li>\n<li>执行状态：进程已获得 CPU，正在执行。</li>\n<li>等待（阻塞）状态：等待某些条件满足，如一个程序 sleep 了，此时就是等待状态。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序开始，处于执行状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序暂停，处于等待状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序暂停，处于等待状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 程序继续执行，处于执行状态</span></pre></td></tr></table></figure><h2 id=\"进程语法结构\"><a class=\"markdownIt-Anchor\" href=\"#进程语法结构\">#</a> 进程语法结构</h2>\n<p>multiprocessing 模块提供了 Process 类来代表一个进程对象。</p>\n<ol>\n<li>process 类参数<br>\n参数：</li>\n</ol>\n<ul>\n<li><code>target</code> ：进程函数</li>\n<li><code>args</code> ：传递给进程函数的参数，类型为元组</li>\n<li><code>kwargs</code> ：传递给进程函数的参数，类型为字典</li>\n</ul>\n<ol start=\"2\">\n<li>process 类方法</li>\n</ol>\n<ul>\n<li><code>start()</code> ：启动进程，调用进程函数</li>\n<li><code>join(timeout=None)</code> ：阻塞主进程，直到子进程执行完毕，timeout 为等待时间，单位为秒</li>\n<li><code>is_alive()</code> ：判断进程是否在执行</li>\n<li><code>terminate()</code> ：强制终止进程</li>\n<li><code>close()</code> ：关闭进程</li>\n</ul>\n<ol start=\"3\">\n<li>常用属性<br>\n <code>name</code> ：当前进程名，默认为 Process-1,Process-2,Process-3…<br>\n <code>pid</code> ：当前进程 id</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># os.getpid () 获取当前进程 id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># os.getppid () 获取当前进程的父进程 id</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sing'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># os.getpid () 获取当前进程 id</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"dance子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># os.getppid () 获取当前进程的父进程 id</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dance'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>sing<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"子进程1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"子进程2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># 开启进程</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># 访问进程属性</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># 阻塞主进程，直到子进程执行完毕</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># 判断进程是否在执行</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># 强制终止进程</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\"># 关闭进程</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"主进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,主进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：  <code>cmd</code>  查看进程： <code>tasklist</code>  可以查看电脑所有进程</p>\n<p><strong>传参</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在唱歌\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"dance子进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sing子进程的父进程id:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在跳舞\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p1 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>sing<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 传递参数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p2 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 传递参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 开启进程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1存活状态：\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2存活状态：\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>is_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"进程间不共享全局变量\"><a class=\"markdownIt-Anchor\" href=\"#进程间不共享全局变量\">#</a> 进程间不共享全局变量</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">wdata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rdata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"读取数据</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>li<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 1. 防止别人导入文件时执行 main 里面的方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 2. 防止 windows 系统递归创建子进程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p1 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>wdata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p2 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>rdata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 开启进程</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"进程间通信\"><a class=\"markdownIt-Anchor\" href=\"#进程间通信\">#</a> 进程间通信</h2>\n<p>进程间通信（Inter-Process Communication，IPC）是指进程之间进行数据交换的机制。</p>\n<h3 id=\"queue队列\"><a class=\"markdownIt-Anchor\" href=\"#queue队列\">#</a> Queue 队列</h3>\n<p>Queue 是 Python 中的一种数据结构，它是一种先进先出（FIFO）的数据结构，可以用来实现进程间的通信。<br>\n方法：</p>\n<ul>\n<li><code>Queue(maxsize=0)</code> ：创建一个队列对象，maxsize 为队列大小，0 表示队列大小无限制</li>\n<li><code>put(item, block=True, timeout=None)</code> ：将 item 放入队列，block 为是否阻塞，timeout 为等待时间，单位为秒</li>\n<li><code>get(block=True, timeout=None)</code> ：从队列中取出一个元素，block 为是否阻塞，timeout 为等待时间，单位为秒</li>\n<li><code>empty()</code> ：判断队列是否为空</li>\n<li><code>qsize()</code> ：返回队列中元素个数</li>\n<li><code>full()</code> ：判断队列是否已满</li>\n</ul>\n<p><strong>初始化一个队列</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>向队列中添加元素</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>从队列中取出元素</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获取队列中的元素，然后删除该元素</span></pre></td></tr></table></figure><p><strong>判断队列是否为空</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 判断队列是否为空，为空返回 True，否则返回 False</span></pre></td></tr></table></figure><p><strong>判断队列是否已满</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 判断队列是否已满，已满返回 True，否则返回 False</span></pre></td></tr></table></figure><p><strong>获取队列中元素个数</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获取队列中元素个数</span></pre></td></tr></table></figure><p><strong>阻塞和非阻塞</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>block<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 阻塞，等待 3 秒，如果 3 秒后队列中还有元素，则取出元素，否则抛出异常</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>block<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 非阻塞，如果队列中有元素，则取出元素，否则抛出异常</span></pre></td></tr></table></figure><p><strong>进程间通信</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">wdata</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">已经被放入\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入数据是：\"</span><span class=\"token punctuation\">,</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 读数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rdata</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取数据:\"</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取数据是：\"</span><span class=\"token punctuation\">,</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 创建队列</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>wdata<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>rdata<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h2 id=\"多线程实现\"><a class=\"markdownIt-Anchor\" href=\"#多线程实现\">#</a> 多线程实现</h2>\n<ol>\n<li>直接使用 threading 模块</li>\n</ol>\n<p>参数：</p>\n<ul>\n<li><code>target</code> ：线程函数</li>\n<li><code>args</code> ：传递给线程函数的参数，类型为元组</li>\n<li><code>kwargs</code> ：传递给线程函数的参数，类型为字典</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task done'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 守护线程，必须在线程启动前设置，否则无效</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 阻塞子线程，必须在线程启动后设置，否则无效</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 获取线程名字</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 更改线程名字</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>setName<span class=\"token punctuation\">(</span><span class=\"token string\">'线程1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>setName<span class=\"token punctuation\">(</span><span class=\"token string\">'线程2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"线程之间共享资源全局变量\"><a class=\"markdownIt-Anchor\" href=\"#线程之间共享资源全局变量\">#</a> 线程之间共享资源（全局变量）</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">global</span> num</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task done'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num:'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"资源竞争\"><a class=\"markdownIt-Anchor\" href=\"#资源竞争\">#</a> 资源竞争</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add1:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add2:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"线程同步\"><a class=\"markdownIt-Anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<p>两种方式：</p>\n<ol>\n<li>join 阻塞</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add1:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add2:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 阻塞 t1 线程，t1 执行完后再执行 t2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>互斥锁<br>\n概念：互斥锁为资源引入了一个状态：锁定 / 非锁定。某个线程要更改共享数据时，先要将该资源锁定，此时其他线程不能更改；直到该线程释放资源，其他线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</li>\n</ol>\n<ul>\n<li><code>acquire()</code> ：获取锁，如果锁已经被其他线程获取，那么调用该方法的线程会被阻塞，直到锁被释放为止</li>\n<li><code>release()</code> ：释放锁</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Lock</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add1:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 解锁</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add2:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>add2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：锁的粒度越细，性能越好，但锁的个数越多，性能越差。</p>\n<h1 id=\"协程\"><a class=\"markdownIt-Anchor\" href=\"#协程\">#</a> 协程</h1>\n<p>协程，又称微线程，纤程。英文名 Coroutine。协程是一种用户态的轻量级线程。</p>\n<p>协程拥有自己的 CPU 寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此，协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处的逻辑流中。</p>\n<p>协程的调用比线程的调用节省资源，因为协程不需要操作系统来进行调度，而是由程序员自己来控制协程的切换。</p>\n<h2 id=\"协程实现\"><a class=\"markdownIt-Anchor\" href=\"#协程实现\">#</a> 协程实现</h2>\n<h3 id=\"使用yield关键字\"><a class=\"markdownIt-Anchor\" href=\"#使用yield关键字\">#</a> 使用 yield 关键字</h3>\n<p><code>yield</code>  关键字可以将一个函数变成一个生成器，生成器是一种特殊的迭代器，可以通过 <code>next()</code>  函数来获取下一个值。<br>\n应用场景：</p>\n<ul>\n<li>如果一个线程里面 IO 操作比较多时，可以用协程</li>\n<li>适合高并发处理</li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'a'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'哈哈'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'b'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token string\">'嘿嘿'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t1 <span class=\"token operator\">=</span> task1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    t2 <span class=\"token operator\">=</span> task2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"greenlet模块\"><a class=\"markdownIt-Anchor\" href=\"#greenlet模块\">#</a> greenlet 模块</h3>\n<p><code>greenlet</code>  模块是一个第三方模块，用于实现协程。<br>\n注意： <code>greenlet</code>  只能手动切换，当遇到 IO 操作时，程序会阻塞，需要手动切换到其他协程。</p>\n<p>格式：</p>\n<ul>\n<li><code>a = greenlet(函数名)</code>  创建一个协程对象</li>\n<li><code>xxx.switch()</code>  切换到下一个协程 <code>xxx</code></li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> greenlet <span class=\"token keyword\">import</span> greenlet</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singing end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dancing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dancing end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    g1 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    g2 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>dance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 切换到 g1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    g1<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># 切换到 g2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    g2<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"gevent模块\"><a class=\"markdownIt-Anchor\" href=\"#gevent模块\">#</a> gevent 模块</h3>\n<p><code>gevent</code>  模块是一个第三方模块，用于实现协程。<br>\n注意： <code>gevent</code>  可以自动切换，当遇到 IO 操作时，程序会自动切换到其他协程。<br>\n格式：</p>\n<ul>\n<li><code>gevent.spawn(函数名)</code>  创建一个协程对象</li>\n<li><code>gevent.sleep()</code>  耗时操作</li>\n<li><code>gevent.join()</code>  阻塞，等待某个协程执行完毕</li>\n<li><code>gevent.joinall()</code>  等待所有协程执行完毕，再退出，参数为协程列表</li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gevent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在唱歌\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唱歌结束\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在跳舞\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跳舞结束\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 创建协程对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    g1 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    g2 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>dance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 阻塞，等待某个协程执行完毕</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    g1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    g2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>gevent.joinall()</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gevent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        gevent<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在唱歌,第</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">次'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 创建协程对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    g1 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    g2 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 阻塞，等待所有协程执行完毕</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>joinall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>g1<span class=\"token punctuation\">,</span> g2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>monket 补丁</strong></p>\n<ul>\n<li>作用：拥有在模块运行时替换的功能</li>\n<li>注意：monkey.patch_all () 必须放在被打补丁的模块之前，否则无效</li>\n</ul>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gevent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> gevent <span class=\"token keyword\">import</span> monkey</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>monkey<span class=\"token punctuation\">.</span>patch_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将所有的 IO 操作都变成 gevent 的协程，即将 time.sleep () 替换程 gevent 里面实现耗时操作的 gevent.sleep () 代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在唱歌,第</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">次'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 创建协程对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    g1 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    g2 <span class=\"token operator\">=</span> gevent<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span>sing<span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 阻塞，等待所有协程执行完毕</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    gevent<span class=\"token punctuation\">.</span>joinall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>g1<span class=\"token punctuation\">,</span> g2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>线程是 CPU 调度的基本单位，进程是资源分配的基本单位</li>\n<li>进程、线程和协程的区别</li>\n</ol>\n<ul>\n<li>进程：切换需要资源最大，效率最低</li>\n<li>线程：切换需要资源中等，效率中等</li>\n<li>协程：切换需要资源最小，效率最高</li>\n<li>进程和线程是操作系统调度的，协程是程序员调度的</li>\n</ul>\n<ol start=\"3\">\n<li>多线程适合 IO 密集型操作，多进程适合 CPU 密集型操作，协程适合 IO 密集型操作</li>\n<li>进程、线程和协程都可以完成多任务，根据自己实际开发需要选择使用。</li>\n</ol>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2021/10/06/python/2023-10-16-python%E8%BF%9B%E9%98%B6/",
            "url": "https://zhang3399.github.io/2021/10/06/python/2023-10-16-python%E8%BF%9B%E9%98%B6/",
            "title": "python进阶",
            "date_published": "2021-10-06T02:00:00.000Z",
            "content_html": "<h1 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<blockquote>\n<p>面向对象编程是一种编程范式或编程风格。它以类和对象为核心，将数据（属性）和操作（方法）封装在一起，通过继承和多态等机制实现代码的重用和扩展。</p>\n</blockquote>\n<h2 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h2>\n<p>类是面向对象编程中的基本概念，它是一种抽象的数据类型，用于定义对象的属性和行为。类可以看作是对象的模板，通过类可以创建多个具有相同属性和行为的对象。</p>\n<p><strong>类的定义</strong><br>\n在 Python 中，使用 <code>class</code>  关键字来定义一个类。</p>\n<p>注意：类名通常使用大写字母开头，遵循驼峰命名法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 基本格式：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># class 类名:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#     类的属性和方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 类的属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 类的方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method id：\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># self 是类实例的引用，用于访问类的属性和方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 实例化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance id is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>class_instance<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>class_instance id is: &lt;__main__.ClassName object at 0x000001CE2FEA9FD0></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>method id： &lt;__main__.ClassName object at 0x000001CE2FEA9FD0></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><ol>\n<li>构造函数 <code>__init__()</code>\n<ul>\n<li>构造函数是类的一个特殊方法，用于初始化对象的状态。当创建对象时，Python 会自动调用构造函数。</li>\n<li>构造函数的第一个参数必须是 <code>self</code> ，表示对象本身的引用。</li>\n<li>构造函数可以接受任意数量的参数，用于初始化对象的属性。</li>\n<li>构造函数可以返回任意类型的值，但通常返回 <code>None</code> 。</li>\n<li>构造函数可以包含任意数量的代码，用于执行初始化操作。</li>\n<li>构造函数可以调用其他方法，用于执行初始化操作。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#self-- 实例本身，name-- 实例属性（非类属性）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.name is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>析构函数 <code>__del__()</code>\n<ul>\n<li>析构函数是类的一个特殊方法，用于在对象被销毁时执行清理操作。当对象被销毁时，Python 会自动调用析构函数。</li>\n<li>析构函数的第一个参数必须是 <code>self</code> ，表示对象本身的引用。</li>\n<li>析构函数可以接受任意数量的参数，用于执行清理操作。</li>\n<li>析构函数可以返回任意类型的值，但通常返回 <code>None</code> 。</li>\n<li>析构函数可以包含任意数量的代码，用于执行清理操作。</li>\n<li>析构函数可以调用其他方法，用于执行清理操作。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"del ClassName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">del</span> class_instance <span class=\"token comment\"># 或者 class_instance = None (删除对象)</span></pre></td></tr></table></figure><h1 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h1>\n<p>封装：面向对象编程中的一个重要概念，它指的是将对象的属性和方法封装在一起，形成一个独立的单元。<br>\n目的：隐藏对象的内部实现细节，只对外提供必要的接口，从而提高代码的可维护性和安全性。</p>\n<p>在 Python 中，可以通过以下方式实现封装：</p>\n<h2 id=\"隐藏属性\"><a class=\"markdownIt-Anchor\" href=\"#隐藏属性\">#</a> 隐藏属性</h2>\n<p>使用 <code>__</code> 双下划线开头的属性名或方法名，表示私有，只能在类的内部访问。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __age <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.name is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.__age is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>__age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># × AttributeError: 'ClassName' object has no attribute '__age'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">## 隐藏属性实际上是将类名修改为： _类名__属性名 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.__age is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>_ClassName__age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr></table></figure><h2 id=\"私有属性方法\"><a class=\"markdownIt-Anchor\" href=\"#私有属性方法\">#</a> 私有属性 / 方法</h2>\n<ul>\n<li><code>xxx</code> ：普通属性 / 方法，可以在类的外部访问。</li>\n<li><code>_xxx</code> ：受保护的属性 / 方法，如果定义在类中，可以外部访问，也可以子类中访问。但是另外的 <code>.py</code>  文件通过 <code>from import *</code>  导入时， <code>_xxx</code>  属性 / 方法不会被导入。\n<ul>\n<li>这种一般是为了避免与 python 关键字冲突而采用的命名方法。</li>\n</ul>\n</li>\n<li><code>__xxx</code> ：双下划线开头，隐藏的属性 / 方法，只能在类的内部访问，如果定义在类中，子类不会继承。\n<ul>\n<li>这种命名一般是 python 中的魔法方法或者属性，都是有特殊含义和功能的，自己不要轻易定义。</li>\n</ul>\n</li>\n</ul>\n<p><strong>私有属性</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _age <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __sex <span class=\"token operator\">=</span> <span class=\"token string\">\"male\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>class_instance <span class=\"token operator\">=</span> ClassName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.name is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance._age is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>_age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance.__sex is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>__sex<span class=\"token punctuation\">)</span> <span class=\"token comment\"># × AttributeError: 'ClassName' object has no attribute '__sex'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class_instance._ClassName__sex is:\"</span><span class=\"token punctuation\">,</span> class_instance<span class=\"token punctuation\">.</span>_ClassName__sex<span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr></table></figure><p><strong>隐藏方法</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write code\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\"># 内部调用私有方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 类内部调用私有方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Man<span class=\"token punctuation\">.</span>__play<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 类内部调用私有方法（不推荐）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>man <span class=\"token operator\">=</span> Man<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>man<span class=\"token punctuation\">.</span>funa<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √ 类内部调用私有方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>man<span class=\"token punctuation\">.</span>__play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># × AttributeError: 'Man' object has no attribute '__play'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>write code</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p><strong>私有方法</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Gril</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#私有方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"play game\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gril <span class=\"token operator\">=</span> Gril<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gril<span class=\"token punctuation\">.</span>_play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr></table></figure><h1 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>继承：面向对象编程中的一个重要概念，它指的是一个类可以继承另一个类的属性和方法，从而实现代码的重用和扩展。</p>\n<p>格式： <code>class 子类名(父类名):</code></p>\n<h2 id=\"单继承\"><a class=\"markdownIt-Anchor\" href=\"#单继承\">#</a> 单继承</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span> <span class=\"token comment\"># 占位符，表示不添加任何新的属性和方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student<span class=\"token punctuation\">.</span>sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sing</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"继承的传递多重继承\"><a class=\"markdownIt-Anchor\" href=\"#继承的传递多重继承\">#</a> 继承的传递（多重继承）</h2>\n<p>子类可以继承父类的属性和方法，也可以继承父类的父类的属性和方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>teacher <span class=\"token operator\">=</span> Teacher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>teacher<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>teacher<span class=\"token punctuation\">.</span>sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># √</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sing</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"重写\"><a class=\"markdownIt-Anchor\" href=\"#重写\">#</a> 重写</h2>\n<ol>\n<li>子类重写父类的方法<br>\n子类可以重写父类的方法，即在子类中定义一个与父类方法同名的方法，从而覆盖父类的方法。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat food\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat food</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>eat food</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>子类拓展父类的方法 (不会改变父类方法)<br>\n<strong> 写法 1</strong>：子类在需要拓展的父类方法下写 <code>父类名.方法名()</code></li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Persion<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat food\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#拓展父类方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat food</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 不会改变父类方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>stuent2 <span class=\"token operator\">=</span> Persion<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>stuent2<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>eat food</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p><strong>写法 2</strong>：子类在需要拓展的父类方法下写 <code>super().方法名()</code> <br>\n 注意： <code>super</code>  在 python 里面是一个特殊的类，super () 是使用 super 类创建的一个对象，这个对象是父类，但是不是父类的实例，而是父类的子类，所以 super () 可以调用父类的方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Persion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat food\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#拓展父类方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat food</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 不会改变父类方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>stuent2 <span class=\"token operator\">=</span> Persion<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>stuent2<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>eat food</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>eat</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"新式类写法\"><a class=\"markdownIt-Anchor\" href=\"#新式类写法\">#</a> 新式类写法</h2>\n<p>python 中，类有两种写法：经典类和新式类。</p>\n<ul>\n<li><code>class A</code> <br>\n 经典类：不由任意内置类型派生的类。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 经典类：没有新的属性和方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 派生类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"play\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>class A()</code></li>\n<li><code>class A(object) </code> 新式类：继承了 object 类或者该类的子类都是新式类。 -- 推荐使用<br>\n <code>object</code>  类是所有类的基类，所有类都继承自 object 类，是 python 为所有对象提供的基类 (顶级父类)。</li>\n</ul>\n<p>注意：python3 中如果一个类没有继承任何类，则默认继承 <code>object</code>  类，所以 python3 中所有的类都是新式类。</p>\n<h2 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\">#</a> 多继承</h2>\n<p>一个类可以继承多个类，多个类之间用逗号分隔。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"study\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teach\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TeacherStudent</span><span class=\"token punctuation\">(</span>Teacher<span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>teacher_student <span class=\"token operator\">=</span> TeacherStudent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>teacher_student<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># study</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>teacher_student<span class=\"token punctuation\">.</span>teach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># teach</span></pre></td></tr></table></figure><p><strong>注意：</strong> 多个父类具有同名方法，则调用顺序为： <code>从左到右，深度优先</code> 。</p>\n<p><strong>方法的搜索顺序：</strong><br>\npython 中内置的 <code>__mro__</code> 属性可以查看类的继承顺序。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A.funa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funb</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B.funb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C.funa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>d <span class=\"token operator\">=</span> D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>d<span class=\"token punctuation\">.</span>funa<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># C.funa</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>输出：（从左到右，深度优先）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>(&lt;class '__main__.D'>, &lt;class '__main__.B'>, &lt;class '__main__.C'>, &lt;class '__main__.A'>, &lt;class 'object'>)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h1 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\">#</a> 多态</h1>\n<p>多态：面向对象编程中的一个重要概念，它指的是一个对象可以有多种形态，即同一个方法可以在不同的对象上调用，从而实现不同的功能。</p>\n<p>多态的前提：</p>\n<ul>\n<li>继承</li>\n<li>重写</li>\n</ul>\n<p>多态的体现：</p>\n<ul>\n<li>父类引用指向子类对象</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>animal<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>多态性：</p>\n<ul>\n<li>同一个方法，不同的对象调用，产生不同的结果。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat eat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">funa</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    obg<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>funa<span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span> <span class=\"token comment\"># eat</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>funa<span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span> <span class=\"token comment\"># dog eat</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>funa<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span> <span class=\"token comment\"># cat eat</span></pre></td></tr></table></figure><h2 id=\"静态方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法\">#</a> 静态方法</h2>\n<p>静态方法：不需要实例化对象就可以直接调用的方法，使用 <code>@staticmethod</code>  装饰器来定义。</p>\n<p>静态方法的特点：</p>\n<ul>\n<li>不需要实例化对象就可以直接调用</li>\n<li>不需要 <code>self</code>  参数</li>\n<li>静态方法可以访问类变量和实例变量</li>\n<li>静态方法不能访问实例方法</li>\n</ul>\n<p>静态方法的使用场景：当方法不需要访问实例变量和类变量时，可以使用静态方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 静态方法既可以使用对象访问，也可以使用类名访问</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 实例对象访问</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 类名访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr></table></figure><p>注意：类方法可以直接方法时传参数，例如 Animal.say_hello (name)</p>\n<h2 id=\"类方法\"><a class=\"markdownIt-Anchor\" href=\"#类方法\">#</a> 类方法</h2>\n<p>类方法：使用 <code>@classmethod</code>  装饰器来定义，对于类方法，第一个参数必须是类对象，通常命名为 <code>cls</code> ，表示类本身。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"animal\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 类方法既可以使用对象访问，也可以使用类名访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 实例对象访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 类名访问</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Animal<span class=\"token punctuation\">.</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr></table></figure><p>当方法中需要使用到类对象（如访问私有类属性时），定义类方法<br>\n类方法一般配合类属性使用</p>\n<p>总结：</p>\n<ul>\n<li>实例方法：方法内部访问实例属性，方法内部可以通过 <code>类名.类属性名</code> 来访问类属性。</li>\n<li>静态方法 <code>@staticmethod</code> ：方法内部，不需要访问实例属性和类属性。\n<ul>\n<li>如果需要访问类属性，方法内部可以通过 <code>类名.类属性名</code> 来访问，不能访问实例属性。</li>\n</ul>\n</li>\n<li>类方法 <code>@classmethod</code> ：方法内部只需要访问类属性，方法内部可以通过 <code>cls.类属性名</code> 来访问类属性，不能访问实例属性。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span> <span class=\"token comment\"># 类属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span> <span class=\"token comment\"># 实例属性：对象私有</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 实例方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># 在实例方法中访问类属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>Person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在玩游戏'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># 在实例方法中访问实例属性</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">岁'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 静态方法： 类中的函数，形参没有限制，没有 self 指向实例对象的概念</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>Person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">eat food\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 静态方法可访问类属性，但是无意义，静态方法既不传递类对象，也不传递实例对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># print (f\"&#123;self.age&#125; 岁\") # × 静态方法不能访问实例属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span> <span class=\"token comment\"># 类方法：针对类存在的方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 类方法：cls 代表类对象本身，不用类名。属性名 </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">在说话'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># print (f\"&#123;self.age&#125; 岁\") # × 不能访问实例属性</span></pre></td></tr></table></figure><h1 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\">#</a> 单例模式</h1>\n<p>含义：一种常见的设计模式，用于确保一个类只有一个实例，并提供一个全局访问点。<br>\n优点：节省内存，避免重复创建对象。<br>\n弊端：多线程访问容易引发线程安全问题。</p>\n<p><strong>方式</strong></p>\n<ol>\n<li>通过 @classmethod 实现</li>\n<li>通过装饰器实现</li>\n<li>通过重写__new__方法实现</li>\n<li>通过模块导入实现</li>\n</ol>\n<h2 id=\"__new__方法\"><a class=\"markdownIt-Anchor\" href=\"#__new__方法\">#</a> __new__方法</h2>\n<p><code>__new__</code> 方法是 <code>object基类</code> 提供的内置的 <code>静态方法</code> ，它是在对象被创建之前调用的，用于创建对象。 <code>__new__</code> 方法返回一个对象，这个对象会被 <code>__init__</code> 方法初始化。</p>\n<p>作用：</p>\n<ul>\n<li>在内存中为对象分配空间</li>\n<li>返回对象的引用</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person.__init__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 重写 new 不再调用父类的 new 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person.__new__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># 对父类方法进行扩展 super (). 方法名 ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span> <span class=\"token comment\">#方法重写，res 里面保存的是实例对象的引用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Person.__new__</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><h2 id=\"通过重写__new__方法实现单例模式\"><a class=\"markdownIt-Anchor\" href=\"#通过重写__new__方法实现单例模式\">#</a> 通过重写__new__方法实现单例模式</h2>\n<p>设计流程：</p>\n<ol>\n<li>定义一个类属性，初始化为 None，用来记录单利对象的引用</li>\n<li>重写__new__方法</li>\n<li>进行判断，如果类属性为 None，把__new__() 返回对象的引用保存进去</li>\n<li>返回类型属性中记录的对象引用</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __instance <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># 类属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__new__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__init__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s1 <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s2 <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token keyword\">is</span> s2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><h2 id=\"通过导入模块实现单例模式\"><a class=\"markdownIt-Anchor\" href=\"#通过导入模块实现单例模式\">#</a> 通过导入模块实现单例模式</h2>\n<p>模块的 <code>__init__.py</code>  文件中的代码在模块第一次被导入时执行，只会执行一次，因此可以利用这个特性来实现单例模式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># my_singleton.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__init__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton.__new__\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>singleton <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># main.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> my_singleton <span class=\"token keyword\">import</span> singleton</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>singleton<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<ul>\n<li>\n<ol>\n<li>回收站对象</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>音乐播放器</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>开发游戏软件 场景管理器</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>数据库配置、数据库连接池的设计</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>线程池、连接池、缓存、日志对象</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"魔法方法魔法属性\"><a class=\"markdownIt-Anchor\" href=\"#魔法方法魔法属性\">#</a> 魔法方法 &amp; 魔法属性</h1>\n<p>魔法方法：在 Python 中，以双下划线开头和结尾的方法称为魔法方法，也称为特殊方法。魔法方法在特定的情况下自动调用，不需要手动调用。</p>\n<h2 id=\"__doc__属性\"><a class=\"markdownIt-Anchor\" href=\"#__doc__属性\">#</a> __doc__属性</h2>\n<p><code>__doc__</code> : 类、函数的描述信息</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"这是一个描述信息\"\"\"</span> <span class=\"token comment\"># 只能使用多行注释，单行注释无效</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这是一个描述信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"这是一个描述信息\"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这是一个描述信息</span></pre></td></tr></table></figure><h2 id=\"__modeule__属性\"><a class=\"markdownIt-Anchor\" href=\"#__modeule__属性\">#</a> __modeule__属性</h2>\n<p><code>__module__</code> : 类所属的模块名</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__module__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># __main__</span></pre></td></tr></table></figure><h2 id=\"__class__属性\"><a class=\"markdownIt-Anchor\" href=\"#__class__属性\">#</a> __class__属性</h2>\n<p><code>__class__</code> : 类所属的类名</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'type'></span></pre></td></tr></table></figure><h2 id=\"str方法\"><a class=\"markdownIt-Anchor\" href=\"#str方法\">#</a> <strong>str</strong> () 方法</h2>\n<p><code>__str__</code> : 当使用 print 输出对象时，自动调用 <code>__str__</code> 方法，返回一个字符串</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"这是一个Person对象\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这是一个 Person 对象</span></pre></td></tr></table></figure><h2 id=\"del方法\"><a class=\"markdownIt-Anchor\" href=\"#del方法\">#</a> <strong>del</strong> () 方法</h2>\n<p><code>__del__</code> : 当对象被销毁时，自动调用 <code>__del__</code> 方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person对象被销毁\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">del</span> person <span class=\"token comment\"># Person 对象被销毁</span></pre></td></tr></table></figure><h2 id=\"call方法\"><a class=\"markdownIt-Anchor\" href=\"#call方法\">#</a> <strong>call</strong> () 方法</h2>\n<p><code>__call__</code> : 当对象被当作函数调用时，自动调用 <code>__call__</code> 方法<br>\n callable: 判断对象是否可调用</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person对象被当作函数调用\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 调用一个可调用的实例对象，其实就是在调用它的__call__() 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 判断对象是否可调用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">callable</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><h2 id=\"__dict__属性\"><a class=\"markdownIt-Anchor\" href=\"#__dict__属性\">#</a> __dict__属性</h2>\n<p><code>__dict__</code> : 类或对象的属性字典</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'name': ' 小明 '&#125;</span></pre></td></tr></table></figure><h1 id=\"文件操作\"><a class=\"markdownIt-Anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<p>文件：存储在硬盘上的数据</p>\n<p>文件操作步骤：</p>\n<ul>\n<li>打开文件</li>\n<li>读写文件</li>\n<li>关闭文件</li>\n</ul>\n<h2 id=\"文件对象的方法\"><a class=\"markdownIt-Anchor\" href=\"#文件对象的方法\">#</a> 文件对象的方法</h2>\n<ol>\n<li>open () 函数</li>\n</ol>\n<p><code>open()</code>  创建一个 file 对象，默认是以只读模式打开。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>read(n)</li>\n</ol>\n<p><code>read()</code>  方法用于读取文件内容，n 表示读取的字符个数，如果不指定 n，则表示读取整个文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>write()</li>\n</ol>\n<p><code>write()</code>  方法用于向文件中写入内容。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"要写入的内容\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>close()</li>\n</ol>\n<p><code>close()</code>  方法用于关闭文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\">#</a> 属性</h2>\n<ol>\n<li>name<br>\n <code>name</code> : 返回要打开文件的文件名，可以包含具体的路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>mode<br>\n <code>mode</code> : 返回打开文件时使用的模式，如’r’、‘w’、'a’等。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>closed<br>\n <code>closed</code> : 返回文件是否已经关闭，True 表示已经关闭，False 表示已经打开。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>closed<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"读写操作\"><a class=\"markdownIt-Anchor\" href=\"#读写操作\">#</a> 读写操作</h2>\n<ol>\n<li>读操作</li>\n</ol>\n<ul>\n<li>read(size=-1)<br>\n <code>read(size=-1)</code> : 从文件中读取 size 个字符，如果 size 未指定或为负数，则读取剩余的所有字符。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>readline(size=-1)<br>\n <code>readline(size=-1)</code> : 从文件中读取一行，如果 size 未指定或为负数，则读取整行。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>readlines(hint=-1)<br>\n <code>readlines(hint=-1)</code> : 从文件中读取所有行，返回一个列表，如果 hint 未指定或为负数，则读取所有行。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"访问模式\"><a class=\"markdownIt-Anchor\" href=\"#访问模式\">#</a> 访问模式</h2>\n<p><code>open()</code>  函数的第二个参数，表示打开文件的模式，常用的模式有：</p>\n<ul>\n<li>‘r’: 只读模式，如果文件不存在，会抛出异常。</li>\n<li>‘w’: 写入模式，如果文件不存在，会创建文件；如果文件存在，会清空文件内容。</li>\n<li>‘a’: 追加模式，如果文件不存在，会创建文件；如果文件存在，会在文件末尾追加内容。</li>\n<li>‘b’: 二进制模式，可以与上述模式组合使用，如’rb’、‘wb’、'ab’等。</li>\n<li>‘+’:  读写模式，可以与上述模式组合使用，如’r+'、‘w+’、'a+' 等。\n<ul>\n<li>‘r+’: 读写模式，如果文件不存在，会抛出异常；如果文件存在，可以同时进行读写操作。</li>\n<li>‘w+’: 先写再读，文件存在就重新编辑文件，不存在就创建文件。</li>\n</ul>\n</li>\n</ul>\n<p><strong>文件指针</strong></p>\n<p>文件指针：文件指针是指向文件中某个位置的指针，文件指针的初始位置为文件的开头，每次读写操作都会改变文件指针的位置。</p>\n<ul>\n<li>tell()<br>\n <code>tell()</code> : 返回文件指针的当前位置。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>tell<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>seek(offset, whence=0)<br>\n <code>seek(offset, whence=0)</code> : 移动文件指针到指定的位置， <code>offset</code>  表示偏移量， <code>whence</code>  表示参考位置，默认为 0 作为起始位置，表示文件开头。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将文件指针移动到第 10 个字符的位置</span></pre></td></tr></table></figure><ul>\n<li>truncate(size=None)<br>\n <code>truncate(size=None)</code> : 截断文件，从文件指针的位置开始截断，截断后的文件大小为 size，如果 size 未指定，则截断到文件指针的位置。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>truncate<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将文件截断到第 10 个字符的位置</span></pre></td></tr></table></figure><ul>\n<li>with open</li>\n</ul>\n<p><code>with open</code>  语句可以自动关闭文件，不需要手动调用 <code>close()</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"编码格式\"><a class=\"markdownIt-Anchor\" href=\"#编码格式\">#</a> 编码格式</h2>\n<p>编码格式：文件的编码格式，常用的编码格式有 UTF-8、GBK 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"打开模式\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"编码格式\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"导入模块\"><a class=\"markdownIt-Anchor\" href=\"#导入模块\">#</a> 导入模块</h1>\n<p>os 模块：提供了许多与操作系统交互的函数，如文件操作、目录操作、环境变量操作等。<br>\nimport os</p>\n<h2 id=\"文件重命名\"><a class=\"markdownIt-Anchor\" href=\"#文件重命名\">#</a> 文件重命名</h2>\n<p>指令： <code>os.rename(&quot;旧文件名&quot;, &quot;新文件名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span><span class=\"token string\">\"旧文件名.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新文件名.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<p>指令： <code>os.remove(&quot;文件名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"创建文件夹\"><a class=\"markdownIt-Anchor\" href=\"#创建文件夹\">#</a> 创建文件夹</h2>\n<p>指令： <code>os.mkdir(&quot;文件夹名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件夹名\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"删除文件夹\"><a class=\"markdownIt-Anchor\" href=\"#删除文件夹\">#</a> 删除文件夹</h2>\n<p>指令： <code>os.rmdir(&quot;文件夹名&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>rmdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件夹名\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取当前工作目录\"><a class=\"markdownIt-Anchor\" href=\"#获取当前工作目录\">#</a> 获取当前工作目录</h2>\n<p>指令： <code>os.getcwd()</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取目录列表\"><a class=\"markdownIt-Anchor\" href=\"#获取目录列表\">#</a> 获取目录列表</h2>\n<p>指令： <code>os.listdir(&quot;目录路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"目录路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"切换目录\"><a class=\"markdownIt-Anchor\" href=\"#切换目录\">#</a> 切换目录</h2>\n<p>指令： <code>os.chdir(&quot;目录路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"目录路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"判断路径是否存在\"><a class=\"markdownIt-Anchor\" href=\"#判断路径是否存在\">#</a> 判断路径是否存在</h2>\n<p>指令： <code>os.path.exists(&quot;路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"判断是否为文件\"><a class=\"markdownIt-Anchor\" href=\"#判断是否为文件\">#</a> 判断是否为文件</h2>\n<p>指令： <code>os.path.isfile(&quot;路径&quot;)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token string\">\"路径\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"可迭代对象iterable\"><a class=\"markdownIt-Anchor\" href=\"#可迭代对象iterable\">#</a> 可迭代对象 Iterable</h1>\n<p>可迭代对象：可以被 for 循环遍历的对象，如列表、元组、字符串、字典、集合等。</p>\n<ol>\n<li>可迭代对象的条件：</li>\n</ol>\n<ul>\n<li>对象实现了__iter__() 方法</li>\n<li><strong>iter</strong> () 方法返回迭代对象</li>\n</ul>\n<ol start=\"2\">\n<li>for 循环工作原理</li>\n</ol>\n<ul>\n<li>先通过__iter__() 方法获取迭代器对象的迭代器</li>\n<li>然后通过迭代器对象的__next__() 方法获取下一个元素并赋值给临时变量</li>\n</ul>\n<ol start=\"3\">\n<li>isinstance () 方法</li>\n</ol>\n<ul>\n<li>判断一个对象是否是可迭代对象<br>\n <code>isinstance(o,t)</code>  o: 要判断的对象，t: 要判断的类型<br>\n <code>Iterable:</code>  可迭代对象</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 判断一个对象是否是可迭代对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p><strong>可迭代对象 Iterable 和迭代器 Iterator</strong></p>\n<p>凡是可以作用于 <code>for</code>  循环的对象都是 <code>可迭代对象</code>  Iterable 类型；<br>\n凡是可以作用于 <code>next()</code>  函数的对象都是 <code>迭代器</code>  Iterator 类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable<span class=\"token punctuation\">,</span>Iterator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 判断一个对象是否是可迭代对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 判断一个对象是否是迭代器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># iter () 函数将可迭代对象转换为迭代器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>总结：</p>\n<ul>\n<li>可迭代对象不一定是迭代器，但迭代器一定是可迭代对象。</li>\n<li>iter () 函数可以将可迭代对象转换为迭代器。</li>\n<li>如果一个对象拥有 <code>__iter__()</code>  方法，那么它就是可迭代对象</li>\n<li>如果一个对象拥有 <code>__next__()</code>  方法，那么它就是迭代器</li>\n<li><code>dir()</code>  函数可以查看一个对象的所有属性和方法</li>\n</ul>\n<h2 id=\"迭代器协议\"><a class=\"markdownIt-Anchor\" href=\"#迭代器协议\">#</a> 迭代器协议</h2>\n<p>迭代器协议：迭代器协议是指迭代器对象必须实现 <code>__next__()</code>  方法， <code>__next__()</code>  方法返回下一个元素，如果没有元素了，会抛出 <code>StopIteration</code>  异常。</p>\n<h2 id=\"自定义迭代器类\"><a class=\"markdownIt-Anchor\" href=\"#自定义迭代器类\">#</a> 自定义迭代器类</h2>\n<p>两个特性： <code>__iter__()</code>  和 <code>__next__()</code>  方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyIterator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self <span class=\"token comment\"># 返回迭代器对象本身</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">raise</span> StopIteration <span class=\"token comment\"># 抛出 StopIteration 异常，表示迭代结束</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 使用自定义迭代器类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>my_iter <span class=\"token operator\">=</span> MyIterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_iter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"生成器-generator\"><a class=\"markdownIt-Anchor\" href=\"#生成器-generator\">#</a> 生成器 generator</h2>\n<p>python 中一边循环一边计算的机制，称为生成器（generator）。</p>\n<ol>\n<li>生成器表达式</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 等价于</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">5</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>gen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">5</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 列表推导式的 [] 改为 () 就是生成器表达式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 取值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"生成器函数\"><a class=\"markdownIt-Anchor\" href=\"#生成器函数\">#</a> 生成器函数</h2>\n<p>python 中，只要函数体内部包含 <code>yield</code>  关键字，那么这个函数就变成一个生成器函数，调用生成器函数会返回一个生成器对象。<br>\nyield 关键字的作用是：</p>\n<ul>\n<li>类似于 return, 将指定值或者多个值返回给调用者</li>\n<li>yield 语句一次返回一个结果，在每个结果中间，挂起函数，执行 next (), 再重新从挂起处开始执行</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gen <span class=\"token operator\">=</span> my_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_generator</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> a<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        a<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">yield</span> a</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生成器结束li:\"</span><span class=\"token punctuation\">,</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_generator<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_generator<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>生成器结束li: [0, 1, 2, 3, 4]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p>三者关系：</p>\n<ul>\n<li>可迭代对象：指实现了 python 迭代协议，可以通过 for…in… 循环遍历的对象，比如列表 list、元组 tuple、字典 dict、集合 set、字符串 str、迭代器、生成器等。</li>\n<li>迭代器：可以记住自己遍历位置的对象，直观体现就是可以 next () 函数返回值，迭代器只能往前，不能后退。（遍历完之后，再次调用 next () 会抛出 StopIteration 异常）</li>\n<li>生成器：一种特殊的迭代器，迭代器不一定是生成器，它是 python 提供的通过简单方法写出的迭代器的一种手段<br>\n包含关系：可迭代对象（Iterable）-&gt; 迭代器（Iterator）-&gt; 生成器（Generator）</li>\n</ul>\n<h1 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<p>正则表达式：用于匹配字符串的规则，可以用来查找、替换、验证字符串等操作。</p>\n<p>步骤：</p>\n<ol>\n<li>导入 re 模块</li>\n<li>使用 match () 函数进行匹配操作\n<ul>\n<li>re.match (pattern, string, flags=0), pattern: 正则表达式，string: 要匹配的字符串，flags: 标志位，用于控制正则表达式的匹配方式</li>\n<li>如果起始位置没有匹配成功，返回 None</li>\n</ul>\n</li>\n<li>如果上一步匹配成功，可以使用 Match 对象的 group () 方法获取匹配到的字符串</li>\n</ol>\n<p>使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 匹配字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"匹配失败\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"匹配单个字符\"><a class=\"markdownIt-Anchor\" href=\"#匹配单个字符\">#</a> 匹配单个字符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:left\">转义字符，用于匹配特殊字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ ]</td>\n<td style=\"text-align:left\">匹配括号中的任意一个字符，例如 [a-z] 匹配任意一个小写字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:left\">匹配字母、数字、下划线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:left\">匹配非字母、数字、下划线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">匹配任意空白字符，包括空格、制表符、换页符等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:left\">匹配非空白字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:left\">匹配数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:left\">匹配非数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:left\">匹配单词边界</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界</td>\n</tr>\n</tbody>\n</table>\n<p><strong>匹配任意字符</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 12</span></pre></td></tr></table></figure><p><strong> <code>[]</code>  匹配括号中的任意一个字符</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[abc]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># abc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[a-z]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr></table></figure><p>** <code>\\d</code>  匹配数字</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr></table></figure><h2 id=\"匹配多个字符\"><a class=\"markdownIt-Anchor\" href=\"#匹配多个字符\">#</a> 匹配多个字符</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">匹配前面的字符 0 次或多次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">匹配前面的字符 1 次或多次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">匹配前面的字符 0 次或 1 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" m=\"\"></td>\n<td style=\"text-align:left\">匹配前面的字符 m 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" m,n=\"\"></td>\n<td style=\"text-align:left\">匹配前面的字符 m 到 n 次</td>\n</tr>\n</tbody>\n</table>\n<p><strong> <code>*</code>  匹配前面的字符 0 次或多次</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># aaa</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>re3 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re3<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"\"</span></pre></td></tr></table></figure><p><strong> <code>+</code>  匹配前面的字符 1 次或多次</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># aaa</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>re3 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re3<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></pre></td></tr></table></figure><p><strong> <code>?</code>  匹配前面的字符 0 次或 1 次</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr></table></figure><h2 id=\"匹配开头和结尾\"><a class=\"markdownIt-Anchor\" href=\"#匹配开头和结尾\">#</a> 匹配开头和结尾</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">匹配字符串的结尾</td>\n</tr>\n</tbody>\n</table>\n<p><strong> <code>^</code>  匹配字符串的开头</strong><br>\n注意： <code>^</code>  符号在 <code>[]</code>  中是取反的意思</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr></table></figure><p><strong> <code>$</code>  匹配字符串的结尾</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># c</span></pre></td></tr></table></figure><h2 id=\"匹配分组\"><a class=\"markdownIt-Anchor\" href=\"#匹配分组\">#</a> 匹配分组</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">匹配左右任意一个表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(ab)</td>\n<td style=\"text-align:left\">将括号中的字符作为一个分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\num</td>\n<td style=\"text-align:left\">引用分组 <code>num</code>  匹配到的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P<name>…)</td>\n<td style=\"text-align:left\">分组起别名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:left\">引用别名为 <code>name</code>  分组匹配到的字符串</td>\n</tr>\n</tbody>\n</table>\n<p><strong> <code>|</code>  匹配左右任意一个表达式</strong><br>\n注意：优先从左到右匹配</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a|b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a|b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b</span></pre></td></tr></table></figure><p><strong> <code>(ab)</code>  将括号中的字符作为一个分组</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\w*@(qq|163|126).com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123@163.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123@163.com</span></pre></td></tr></table></figure><p><strong> <code>\\num</code>  引用分组 num 匹配到的字符串</strong><br>\n应用：常在匹配标签时使用，例如匹配 <code>&lt;html&gt;</code>  标签</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;(\\w*)>\\w*&lt;/\\\\1>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;html>login&lt;/html>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re1<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;html>login&lt;/html></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;(\\w*)>&lt;(\\w*)>.*&lt;/\\2>&lt;/\\1>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;html>&lt;body>login&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr></table></figure><p><strong> <code>(?P&lt;name&gt;...)</code>  分组起别名</strong><br>\n<strong> <code>(?P=name)</code>  引用别名为 name 分组匹配到的字符串</strong><br>\n使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;(?P&lt;l1>\\w*)>&lt;(?P&lt;l2>\\w*)>.*&lt;/(?P=l2)>&lt;/(?P=l1)>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;html>&lt;body>login&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re2<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr></table></figure><p>示例：匹配网址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># res = re.match('www(\\.)\\w*\\\\1(com|cn|org)', 'www.baidu.com')</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># print(res.group()) </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'www.baidu.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.google.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.sina.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.163.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.qq.com'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www(\\.)\\w*\\\\1(com|cn|org)'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"高级用法\"><a class=\"markdownIt-Anchor\" href=\"#高级用法\">#</a> 高级用法</h2>\n<p><code>search()</code>  函数：<br>\n在字符串中搜索匹配的子串，返回第一个匹配的子串，如果没有匹配的子串，则返回 None。<br>\n示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></pre></td></tr></table></figure><p><code>findall()</code>  函数：<br>\n在字符串中搜索匹配的子串，返回所有匹配的子串，以列表形式返回。<br>\n示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['1', '2', '3']</span></pre></td></tr></table></figure><p><code>sub()</code>  函数：<br>\n在字符串中搜索匹配的子串，并替换为指定的字符串。<br>\n参数格式：<br>\n <code>sub(pattern, repl, string, count=0)</code></p>\n<ul>\n<li><code>pattern:</code>  正则表达式，用于匹配子串</li>\n<li><code>repl:</code>  替换字符串</li>\n<li><code>string:</code>  要替换的字符串</li>\n<li><code>count:</code>  最大替换次数，0 表示无限制</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># abc000</span></pre></td></tr></table></figure><p><code>split()</code>  函数：<br>\n在字符串中搜索匹配的子串，并按照匹配的子串将字符串分割成多个子串，以列表形式返回。<br>\n参数格式：<br>\n <code>split(pattern, string, maxsplit=0, flags=0)</code></p>\n<ul>\n<li><code>pattern:</code>  正则表达式，用于匹配子串</li>\n<li><code>string:</code>  要替换的字符串</li>\n<li><code>maxsplit:</code>  最大分割次数，0 表示无限制</li>\n<li><code>flags:</code>  标志位，用于控制正则表达式的匹配方式，0 表示默认值<br>\n示例：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['abc', '']</span></pre></td></tr></table></figure><p><code>compile()</code>  函数：<br>\n将正则表达式编译成一个正则表达式对象，可以用于多次匹配操作。<br>\n参数格式：<br>\ncompile(pattern, flags=0)<br>\n 示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\d'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>res <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['1', '2', '3']</span></pre></td></tr></table></figure><h2 id=\"贪婪匹配和懒惰匹配\"><a class=\"markdownIt-Anchor\" href=\"#贪婪匹配和懒惰匹配\">#</a> 贪婪匹配和懒惰匹配</h2>\n<p>贪婪匹配：尽可能多的匹配字符<br>\n懒惰匹配：尽可能少的匹配字符</p>\n<ol>\n<li>贪婪匹配 (默认)</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123456</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>懒惰匹配<br>\n使用 <code>?</code>  符号，表示懒惰匹配<br>\n示例：</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d+?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span></pre></td></tr></table></figure><h2 id=\"原生字符串\"><a class=\"markdownIt-Anchor\" href=\"#原生字符串\">#</a> 原生字符串</h2>\n<p>在正则表达式中， <code>\\</code>  符号用于转义特殊字符，例如 <code>\\d</code>  表示匹配数字， <code>\\w</code>  表示匹配字母或数字。<br>\n但是在 Python 中， <code>\\</code>  符号也是转义字符，例如 <code>\\n</code>  表示换行符， <code>\\t</code>  表示制表符。因此，在正则表达式中使用 <code>\\</code>  符号时，需要使用双反斜杠 <code>\\\\</code>  来转义。<br>\n例如， <code>\\d</code>  需要写成 <code>\\\\d</code> 。<br>\n为了避免这种麻烦，可以使用原生字符串，即在字符串前加上 <code>r</code>  或 <code>R</code> ，例如 <code>r'\\d'</code> 。<br>\n示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\d+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123456</span></pre></td></tr></table></figure><p>注意：在正则表达式中，匹配字符串中的字符 <code>\\</code>  时，需要 <code>\\\\\\\\</code> , 加入原生字符串， <code>\\\\</code>  代表 <code>\\</code></p>\n<h1 id=\"os模块\"><a class=\"markdownIt-Anchor\" href=\"#os模块\">#</a> os 模块</h1>\n<h2 id=\"os模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#os模块介绍\">#</a> os 模块介绍</h2>\n<p>os 模块是 Python 标准库中的一个模块，提供了许多与 <code>操作系统交互</code> 的函数。使用 <code>os</code>  模块，可以执行文件和目录操作，如创建、删除、重命名文件和目录，获取文件和目录的属性等。</p>\n<h2 id=\"os模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#os模块常用函数\">#</a> os 模块常用函数</h2>\n<ol>\n<li><code>os.name</code> ：获取操作系统的名称，例如 <code>posix</code>  表示 <code>Linux</code>  或 <code>Mac</code>   <code>OS</code>   <code>X</code> ， <code>nt</code>  表示 Windows。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># posix</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>os.getenv(key)</code> ：获取环境变量的值 (环境变量名称)。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">'PATH'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>os.path.split(path)</code> ：将路径分割成目录和文件名，以元组的形式接收，第一参数为目录，第二参数为文件名。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('/home/user', 'test.txt')</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>os.path.dirname(path)</code> ：获取路径中的目录名。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /home/user</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>os.path.basename(path)</code> ：获取路径中的文件名。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># test.txt</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>os.path.exists(path)</code> ：判断路径 (文件或目录) 是否存在。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>os.path.isfile(path)</code> ：判断路径是否为文件。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"8\">\n<li><code>os.path.isdir(path)</code> ：判断路径是否为目录。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><code>os.path.abspath(path)</code> ：获取绝对路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /home/user/test.txt</span></pre></td></tr></table></figure><ol start=\"10\">\n<li><code>os.path.isabs(path)</code> ：判断路径是否为绝对路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isabs<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isabs<span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"11\">\n<li><code>os.path.join(path, *paths)</code> ：将多个路径组合成一个路径。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># /home/user/test.txt</span></pre></td></tr></table></figure><ol start=\"12\">\n<li><code>os.path.getsize(path)</code> ：获取文件大小，单位为字节。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 12345</span></pre></td></tr></table></figure><h2 id=\"sys模块\"><a class=\"markdownIt-Anchor\" href=\"#sys模块\">#</a> sys 模块</h2>\n<p>sys 模块是 Python 标准库中的一个模块，提供了许多与 <code>Python解释器交互</code> 的函数。使用 <code>sys</code>  模块，可以获取 Python 解释器的信息，如版本号、命令行参数等，还可以控制 Python 解释器的行为，如退出程序、改变标准输入输出等。</p>\n<h2 id=\"sys模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#sys模块常用函数\">#</a> sys 模块常用函数</h2>\n<ol>\n<li><code>sys.getdefaultencoding()</code> ：获取 Python 解释器的默认编码。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getdefaultencoding<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># utf-8</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>sys.path()</code> ：获取 Python 解释器的命令行参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['/home/user', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/dist-packages']</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>sys.platform()</code> ：获取 Python 解释器的平台信息。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span> <span class=\"token comment\"># linux</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>sys.version()</code> ：获取 Python 解释器的版本信息。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3.8.10 (default, Jun  4 2021, 15:09:15)</span></pre></td></tr></table></figure><h1 id=\"time模块\"><a class=\"markdownIt-Anchor\" href=\"#time模块\">#</a> time 模块</h1>\n<p>time 模块是 Python 标准库中的一个模块，提供了许多与 <code>时间</code> 相关的函数。使用 <code>time</code>  模块，可以获取当前时间、格式化时间、时间戳等。</p>\n<p>时间表示方式：</p>\n<ol>\n<li>时间戳：从 1970 年 1 月 1 日 00:00:00 开始计算的秒数。</li>\n<li>时间元组：包含年、月、日、时、分、秒、星期、年中的第几天等信息的元组。</li>\n<li>字符串时间：按照指定格式表示时间的字符串。</li>\n</ol>\n<h2 id=\"time模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#time模块常用函数\">#</a> time 模块常用函数</h2>\n<ol>\n<li><code>time.time()</code> ：获取当前时间的时间戳。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1634567890.123456</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>time.localtime([secs])</code> ：将时间戳转换为本地时间的时间元组。<br>\n返回元组元素：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>元素</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td><code>tm_year</code></td>\n<td>年</td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>tm_mon</code></td>\n<td>月</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>tm_mday</code></td>\n<td>日</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>tm_hour</code></td>\n<td>时</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>tm_min</code></td>\n<td>分</td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>tm_sec</code></td>\n<td>秒</td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>tm_wday</code></td>\n<td>星期几 (0-6,0 表示周一)</td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>tm_yday</code></td>\n<td>一年中的第几天 (1-366)</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>tm_isdst</code></td>\n<td>是否为夏令时 (0-1,0 表示不是)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2021-10-15 10:30:45</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># time.struct_time(tm_year=2021, tm_mon=10, tm_mday=15, tm_hour=10, tm_min=30, tm_sec=45, tm_wday=4, tm_yday=288, tm_isdst=0)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>time.sleep(secs)</code> ：暂停程序执行 secs 秒。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>time.asctime(time_tuple)</code> ：将时间元组转换为字符串时间。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>asctime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Fri Oct 15 10:30:45 2021</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>time.ctime()</code> ：获取当前时间的时间戳。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>ctime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Fri Oct 15 10:30:45 2021</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>time.strftime(format, time_tuple)</code> ：将时间元组转换为指定格式的字符串时间。<br>\n格式化符号：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%Y</code></td>\n<td>年 (4 位)</td>\n</tr>\n<tr>\n<td><code>%m</code></td>\n<td>月 (2 位)</td>\n</tr>\n<tr>\n<td><code>%d</code></td>\n<td>日 (2 位)</td>\n</tr>\n<tr>\n<td><code>%H</code></td>\n<td>时 (24 小时制，2 位)</td>\n</tr>\n<tr>\n<td><code>%M</code></td>\n<td>分 (2 位)</td>\n</tr>\n<tr>\n<td><code>%S</code></td>\n<td>秒 (2 位)</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>星期几 (0-6,0 表示周一)</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>一年中的第几天 (1-366)</td>\n</tr>\n<tr>\n<td><code>%a</code></td>\n<td>星期几的简写 (例如：Mon)</td>\n</tr>\n<tr>\n<td><code>%A</code></td>\n<td>星期几的全称 (例如：Monday)</td>\n</tr>\n<tr>\n<td><code>%b</code></td>\n<td>月份的简写 (例如：Jan)</td>\n</tr>\n<tr>\n<td><code>%B</code></td>\n<td>月份的全称 (例如：January)</td>\n</tr>\n<tr>\n<td><code>%z</code></td>\n<td>时区 (例如：+0800)</td>\n</tr>\n<tr>\n<td><code>%Z</code></td>\n<td>时区名称 (例如：CST)</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>日期的字符串表示 (例如：10/15/21)</td>\n</tr>\n<tr>\n<td><code>%X</code></td>\n<td>时间的字符串表示 (例如：10:30:45)</td>\n</tr>\n<tr>\n<td><code>%c</code></td>\n<td>日期和时间的字符串表示 (例如：Fri Oct 15 10:30:45 2021)</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>一年中的第几周 (以周日为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>一年中的第几周 (以周一为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%V</code></td>\n<td>一年中的第几周 (以 ISO 8601 标准定义的一周为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>一年中的第几天 (1-366)</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>一年中的第几周 (以周日为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>一年中的第几周 (以周一为一周的第一天)</td>\n</tr>\n<tr>\n<td><code>%V</code></td>\n<td>一年中的第几周 (以 ISO 8601 标准定义的一周为一周的第一天)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2021-10-15 10:30:45</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>time.strptime(string, format)</code> ：将字符串时间转换为时间元组。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span><span class=\"token string\">'2021-10-15 10:30:45'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># time.struct_time(tm_year=2021, tm_mon=10, tm_mday=15, tm_hour=10, tm_min=30, tm_sec=45, tm_wday=4, tm_yday=288, tm_isdst=-1)</span></pre></td></tr></table></figure><h1 id=\"logging模块\"><a class=\"markdownIt-Anchor\" href=\"#logging模块\">#</a> logging 模块</h1>\n<p>logging 模块是 Python 标准库中的一个模块，提供了许多与 <code>日志</code> 相关的函数。使用 <code>logging</code>  模块，可以记录程序的运行信息，如错误、警告、调试信息等，方便程序调试和问题排查。<br>\n等级：</p>\n<table>\n<thead>\n<tr>\n<th>level</th>\n<th>等级</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NOTSET</code></td>\n<td>0</td>\n<td>不设置级别，按照父 looger 的级别显示日志，如果 root logger, 那么会显示所有的</td>\n</tr>\n<tr>\n<td><code>DEBUG</code></td>\n<td>10</td>\n<td>调试信息，一般用于开发阶段</td>\n</tr>\n<tr>\n<td><code>INFO</code></td>\n<td>20</td>\n<td>一般信息，用于记录程序正常运行的信息</td>\n</tr>\n<tr>\n<td><code>WARNING</code></td>\n<td>30</td>\n<td>警告信息，用于记录可能的问题，但不影响程序的正常运行</td>\n</tr>\n<tr>\n<td><code>ERROR</code></td>\n<td>40</td>\n<td>错误信息，用于记录程序运行中出现的错误，但不影响程序的继续运行</td>\n</tr>\n<tr>\n<td><code>CRITICAL(FATAL)</code></td>\n<td>50</td>\n<td>严重错误信息，用于记录程序运行中出现的严重错误，可能导致程序崩溃</td>\n</tr>\n</tbody>\n</table>\n<p>排序：NOTSET &lt; DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">'debug message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'info message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>logging<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'warning message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>logging<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logging<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span><span class=\"token string\">'critical message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DEBUG:root:debug message</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>INFO:root:info message</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>WARNING:root:warning message</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ERROR:root:error message</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CRITICAL:root:critical message</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># logging 默认的级别是 WARNING，所以只有 WARNING 级别以上的日志才会被输出</span></pre></td></tr></table></figure><h1 id=\"logging模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#logging模块常用函数\">#</a> logging 模块常用函数</h1>\n<ol>\n<li><code>logging.basicConfig(**kwargs)</code> ：配置 root logger 的参数，设置日志级别、日志格式、日志输出位置等。</li>\n</ol>\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>level</code></td>\n<td>设置日志级别，默认为 WARNING 及以上</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>设置日志格式，默认为’%(asctime) s - %(name) s - %(levelname) s - %(message) s’</td>\n</tr>\n<tr>\n<td><code>datefmt</code></td>\n<td>设置日期格式，默认为’% Y-% m-% d % H:% M:% S’</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>设置日志输出文件名，默认为 None，表示输出到控制台</td>\n</tr>\n<tr>\n<td><code>filemode</code></td>\n<td>设置日志输出文件模式，默认为’a’，表示追加；'w’表示覆盖</td>\n</tr>\n<tr>\n<td><code>stream</code></td>\n<td>设置日志输出流，默认为 sys.stderr，表示输出到控制台</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span><span class=\"token string\">'log.log'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>logging<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'warning message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>logging<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'error message'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logging<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span><span class=\"token string\">'critical message'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"random模块\"><a class=\"markdownIt-Anchor\" href=\"#random模块\">#</a> random 模块</h1>\n<p>random 模块是 Python 标准库中的一个模块，提供了许多与 <code>随机数</code> 相关的函数。使用 <code>random</code>  模块，可以生成随机数、随机选择、随机打乱等操作。</p>\n<h2 id=\"random模块常用函数\"><a class=\"markdownIt-Anchor\" href=\"#random模块常用函数\">#</a> random 模块常用函数</h2>\n<ol>\n<li><code>random.random()</code> ：生成一个 0 到 1 之间的随机浮点数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0.123456789</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>random.randint(a, b)</code> ：生成一个 a 到 b 之间的随机整数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>random.choice(seq)</code> ：从序列 seq 中随机选择一个元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># apple</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>random.sample(population, k)</code> ：从 population 中随机选择 k 个不重复的元素，返回一个列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>random.shuffle(x[, random])</code> ：将序列 x 中的元素随机打乱。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 1, 5, 2, 4]</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>random.uniform(a, b)</code> ：生成一个 a 到 b 之间的随机浮点数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5.123456789</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>random.randrange(start, stop[, step])</code> ：生成一个从 start 到 stop 之间的随机整数，步长为 step。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></pre></td></tr></table></figure><h1 id=\"format方法\"><a class=\"markdownIt-Anchor\" href=\"#format方法\">#</a> format 方法</h1>\n<p>format 方法是一种字符串格式化方法，用于将字符串中的占位符替换为指定的值。format 方法可以接受多个参数，也可以接受关键字参数。</p>\n<h2 id=\"format方法语法\"><a class=\"markdownIt-Anchor\" href=\"#format方法语法\">#</a> format 方法语法</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li><code>*args</code> ：位置参数，可以接受任意数量的位置参数，按照顺序替换占位符。</li>\n<li><code>**kwargs</code> ：关键字参数，可以接受任意数量的关键字参数，按照关键字替换占位符。</li>\n</ul>\n<h2 id=\"位置参数\"><a class=\"markdownIt-Anchor\" href=\"#位置参数\">#</a> 位置参数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'Alice'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is &#123;0&#125;, I am &#123;1&#125; years old.'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># My name is Alice, I am 20 years old.</span></pre></td></tr></table></figure><h2 id=\"关键字参数\"><a class=\"markdownIt-Anchor\" href=\"#关键字参数\">#</a> 关键字参数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'Alice'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is &#123;name&#125;, I am &#123;age&#125; years old.'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># My name is Alice, I am 20 years old.</span></pre></td></tr></table></figure><h2 id=\"占位符\"><a class=\"markdownIt-Anchor\" href=\"#占位符\">#</a> 占位符</h2>\n<p>占位符的语法为 <code>&#123;&#125;</code> ，可以包含以下内容：</p>\n<ul>\n<li><code>:</code> ：指定格式化方式，例如 <code>&#123;0:.2f&#125;</code>  表示将第一个参数格式化为保留两位小数的浮点数。</li>\n<li><code>!</code> ：指定转换方式，例如 <code>&#123;0!r&#125;</code>  表示将第一个参数转换为字符串表示。</li>\n<li><code>#</code> ：指定进制，例如 <code>&#123;0:#x&#125;</code>  表示将第一个参数格式化为十六进制表示。</li>\n<li><code>*</code> ：指定宽度，例如 <code>&#123;0:*&lt;10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，左对齐。</li>\n<li><code>+</code> ：指定符号，例如 <code>&#123;0:+&#125;</code>  表示将第一个参数格式化为带符号的整数。</li>\n<li><code>-</code> ：指定对齐方式，例如 <code>&#123;0:-&lt;10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，左对齐。</li>\n<li><code>=</code> ：指定填充字符，例如 <code>&#123;0:=^10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，居中对齐，填充字符为 <code>=</code> 。</li>\n<li><code>0</code> ：指定填充字符，例如 <code>&#123;0:0&gt;10&#125;</code>  表示将第一个参数格式化为宽度为 10 的字符串，右对齐，填充字符为 <code>0</code> 。</li>\n<li><code>,</code> ：指定千位分隔符，例如 <code>&#123;0:,&#125;</code>  表示将第一个参数格式化为带千位分隔符的整数。</li>\n<li><code>b</code> ：将整数格式化为二进制表示。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">1234567890</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:,&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 1,234,567,890</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 111010110111100110100010010</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:#x&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 0x499602d2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:0>10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 0000004996</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:*&lt;10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 499602d2****</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:+&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is +1234567890</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:-&lt;10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is 1234567890-----</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The number is &#123;0:=^10&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># The number is =1234567890==</span></pre></td></tr></table></figure>",
            "tags": [
                "python进阶"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2021/10/01/python/2023-10-12-python%E5%9F%BA%E7%A1%80/",
            "url": "https://zhang3399.github.io/2021/10/01/python/2023-10-12-python%E5%9F%BA%E7%A1%80/",
            "title": "python基本语法",
            "date_published": "2021-10-01T02:00:00.000Z",
            "content_html": "<h1 id=\"变量和标识符\"><a class=\"markdownIt-Anchor\" href=\"#变量和标识符\">#</a> 变量和标识符</h1>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>变量是用于存储数据的容器，变量名可以包含字母、数字和下划线，但不能以数字开头。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<p>标识符是用于标识变量、函数、类、模块等的名称。标识符的命名规则如下：</p>\n<ul>\n<li>标识符可以包含字母、数字和下划线，但不能以数字开头。</li>\n<li>标识符不能包含空格和特殊字符。</li>\n<li>标识符区分大小写。</li>\n<li>标识符不能是 Python 的关键字。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合法的标识符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_variable <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>my_variable_2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>my_variable3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 非法的标识符</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># my-variable = 10 # 包含空格</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 2my_variable = 10 # 以数字开头</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># my-variable-2 = 20 # 包含特殊字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># class = 10 # 是 Python 关键字</span></pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"整数int\"><a class=\"markdownIt-Anchor\" href=\"#整数int\">#</a> 整数 (int)</h2>\n<p>整数是用于表示整数的类型，例如 1、2、3 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><h2 id=\"浮点数float\"><a class=\"markdownIt-Anchor\" href=\"#浮点数float\">#</a> 浮点数 (float)</h2>\n<p>浮点数是用于表示小数的类型，例如 1.0、2.5、3.14 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr></table></figure><h2 id=\"字符串str\"><a class=\"markdownIt-Anchor\" href=\"#字符串str\">#</a> 字符串 (str)</h2>\n<p>字符串是用于表示文本的类型，例如 &quot;hello&quot;、&quot;world&quot; 等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string2 <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span></pre></td></tr></table></figure><p>字符串常见操作：</p>\n<ol>\n<li>字符串拼接：使用  <code>+</code>  运算符将两个字符串连接起来。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token comment\"># a=\"helloworld\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>字符串重复：使用  <code>*</code>  运算符将字符串重复指定次数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token comment\"># a=\"hellohellohello\"</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>字符串长度：使用  <code>len()</code>  函数获取字符串的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>字符串切片：使用  <code>[:]</code>  运算符获取字符串的子串。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"el\"</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>字符串查找：使用  <code>find()</code>  函数查找子串在字符串中的位置。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 2</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>字符串替换：使用  <code>replace()</code>  函数替换字符串中的子串。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"hexxo\"</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>字符串分割：使用  <code>split()</code>  函数将字符串分割成子串列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [\"hello\", \"world\"]</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>字符串大小写转换：使用  <code>upper()</code> 、 <code>lower()</code> 、 <code>capitalize()</code> 、 <code>title()</code>  函数进行大小写转换。</li>\n</ol>\n<ul>\n<li><code>upper()</code> ：将字符串转换为大写。</li>\n<li><code>lower()</code> ：将字符串转换为小写。</li>\n<li><code>capitalize()</code> ：将字符串的首字母转换为大写。</li>\n<li><code>title()</code> ：将字符串的每个单词的首字母转换为大写。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"HELLO\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"Hello\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"Hello\"</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>字符串格式化：使用  <code>%</code>  运算符或  <code>format()</code>  函数进行字符串格式化。</li>\n</ol>\n<ul>\n<li><code>%</code>  运算符：使用  <code>%</code>  运算符进行字符串格式化，格式化字符串中的  <code>%s</code> 、 <code>%d</code>  等占位符会被后面的参数替换。</li>\n<li><code>format()</code>  函数：使用  <code>format()</code>  函数进行字符串格式化，格式化字符串中的  <code>&#123;&#125;</code>  占位符会被后面的参数替换。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is %s and I am %d years old.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"My name is Alice and I am 25 years old.\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is &#123;&#125; and I am &#123;&#125; years old.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"My name is Alice and I am 25 years old.\"</span></pre></td></tr></table></figure><ol>\n<li>字符串拼接：使用  <code>join()</code>  函数将列表中的字符串拼接成一个字符串。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"hello world\"</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>字符串判断：使用  <code>startswith()</code> 、 <code>endswith()</code> 、 <code>isalpha()</code> 、 <code>isdigit()</code> 、 <code>isalnum()</code> 、 <code>isspace()</code>  函数判断字符串的属性。</li>\n</ol>\n<ul>\n<li><code>startswith()</code> ：判断字符串是否以指定子串开头。</li>\n<li><code>endswith()</code> ：判断字符串是否以指定子串结尾。</li>\n<li><code>isalpha()</code> ：判断字符串是否只包含字母。</li>\n<li><code>isdigit()</code> ：判断字符串是否只包含数字。</li>\n<li><code>isalnum()</code> ：判断字符串是否只包含字母和数字。</li>\n<li><code>isspace()</code> ：判断字符串是否只包含空白字符。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isspace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 False</span></pre></td></tr></table></figure><h1 id=\"列表list\"><a class=\"markdownIt-Anchor\" href=\"#列表list\">#</a> 列表 (list)</h1>\n<p>列表是用于存储多个元素的有序集合，可以包含不同类型的元素。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>初始化:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 空列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>empty_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>empty_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 初始化带元素的列表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用列表推导式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>even_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 使用构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>from_iterable <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['h', 'e', 'l', 'l', 'o']</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>from_range <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># [0, 1, 2, 3, 4]</span></pre></td></tr></table></figure><p>列表常见操作：</p>\n<ol>\n<li>访问列表元素：使用索引访问列表中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改列表元素：使用索引修改列表中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [10, 2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>删除列表元素：使用  <code>del</code>  语句删除列表中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>列表切片：使用  <code>[:]</code>  运算符获取列表的子列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 3]</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>列表长度：使用  <code>len()</code>  函数获取列表的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>列表追加：使用  <code>append()</code>  方法将元素追加到列表末尾。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3, 4, 5, 6]</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>列表插入：使用  <code>insert()</code>  方法将元素插入到列表指定位置。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 10, 2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>列表删除：使用  <code>remove()</code>  方法删除列表中指定值的第一个元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 4, 5]</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>列表排序：使用  <code>sort()</code>  方法对列表进行排序。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3, 4, 5]</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>列表反转：使用  <code>reverse()</code>  方法将列表中的元素反转。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [5, 4, 3, 2, 1]</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>列表合并：使用  <code>+</code>  运算符将两个列表合并成一个列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3, 4, 5, 6]</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>列表复制：使用  <code>copy()</code>  方法复制列表。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [1, 2, 3]</span></pre></td></tr></table></figure><ol start=\"13\">\n<li>查找列表中元素：使用  <code>in</code>  运算符判断元素是否在列表中。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 1. 检查元素是否存在</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'watermelon'</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 2. 使用 not in 检查不存在</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'kiwi'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kiwi is not in the list\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 会执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 使用 count () 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 统计元素出现次数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>count <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><ol start=\"16\">\n<li>添加元素的方法</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 追加元素到末尾：append ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fruits<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在末尾添加单个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'orange']</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 2. 插入元素到指定位置：insert ()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fruits<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在索引 1 位置插入元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'mango', 'banana']</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 添加多个元素：extend ()</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fruits<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在末尾添加多个元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'orange', 'grape']</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 4. 使用 + 运算符连接列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>more_fruits <span class=\"token operator\">=</span> fruits <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kiwi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 创建新列表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>more_fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'kiwi', 'pear']</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 5. 使用 += 运算符原地扩展</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>fruits <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kiwi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 原地添加多个元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['apple', 'banana', 'kiwi', 'pear']</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 6. 列表推导式（添加特定元素）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>doubled_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 创建新列表</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doubled_numbers<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2, 4, 6]</span></pre></td></tr></table></figure><h1 id=\"元组tuple\"><a class=\"markdownIt-Anchor\" href=\"#元组tuple\">#</a> 元组 (tuple)</h1>\n<p>元组是用于存储多个元素的有序集合，与列表类似，但元组是不可变的、有序的集合，用圆括号 () 表示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>初始化</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 空元组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>empty_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>empty_tuple <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 初始化带元素的元组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>coordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 单元素元组（需要逗号）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>single_element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 注意逗号，否则会被认为是整数 42</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>not_a_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 这不是元组，是整数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 使用构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>from_list <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1, 2, 3)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>from_string <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('a', 'b', 'c')</span></pre></td></tr></table></figure><p><strong>元组常见操作：</strong></p>\n<ol>\n<li>访问元组元素：使用索引访问元组中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>列表切片：使用  <code>[:]</code>  运算符获取元组的子元组。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 (2, 3)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>元组长度：使用  <code>len()</code>  函数获取元组的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>元组解包：使用  <code>=</code>  运算符将元组中的元素赋值给多个变量。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>查找元组中元素：使用  <code>in</code>  运算符判断元素是否在元组中。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 使用 in 关键字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span> <span class=\"token keyword\">in</span> colors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'purple'</span> <span class=\"token keyword\">in</span> colors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 2. 使用 count () 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> colors<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue is in the tuple\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 使用 index () 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    position <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Green found at position </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>position<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Green not found\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>添加元素的方法</li>\n</ol>\n<p>元组不可变，不能直接添加元素，但可以创建新元组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>original <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 通过连接操作添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_tuple <span class=\"token operator\">=</span> original <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 注意：单个元素需要加逗号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_tuple<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: (1, 2, 3, 4)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 通过解包再创建</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>another <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>original<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>another<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: (1, 2, 3, 5, 6)</span></pre></td></tr></table></figure><h1 id=\"字典dict\"><a class=\"markdownIt-Anchor\" href=\"#字典dict\">#</a> 字典 (dict)</h1>\n<p>字典是用于存储键值对的集合，键值对之间用冒号分隔，键值对之间用逗号分隔，字典用花括号 {} 表示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>初始化:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 空字典</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>empty_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>empty_dict <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 初始化带键值对的字典</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 使用字典推导式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># &#123;0:0, 1:1, 2:4, 3:9, 4:16&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>word_counts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cherry'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用构造函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>from_list <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>from_keys <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'a':0, 'b':0, 'c':0&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 使用关键字参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">'London'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>字典常见操作：</strong></p>\n<ol>\n<li>访问字典元素：使用键访问字典中的值。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"Alice\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 25</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 \"New York\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改字典元素：使用键修改字典中的值。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;\"name\": \"Alice\", \"age\": 26, \"city\": \"New York\"&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>删除字典元素：使用  <code>del</code>  语句删除字典中的键值对。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;\"name\": \"Alice\", \"city\": \"New York\"&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>字典长度：使用  <code>len()</code>  函数获取字典的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>字典遍历：使用  <code>for</code>  循环遍历字典中的键值对。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>查找字典中元素：使用  <code>in</code>  运算符判断键是否在字典中。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 检查键是否存在（最常用）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 检查键是否存在</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 2. 检查值是否存在</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New York'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'London'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 3. 检查特定键值对</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>添加元素的方法</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 添加键值对：直接赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">[</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"New York\"</span>  <span class=\"token comment\"># 添加新键值对</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Alice', 'age': 30, 'city': 'New York'&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 2. 批量添加：update ()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>person<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Paris\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加多个键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Alice', 'age': 30, 'city': 'Paris'&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 设置默认值：setdefault ()</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 添加新键（如果不存在）并设置默认值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Alice', 'age': 25&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 4. 字典推导式（添加新元素）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">*</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 创建新字典</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;1: 1, 2: 4, 3: 9, 4: 16, 5: 25&#125;</span></pre></td></tr></table></figure><h1 id=\"集合set\"><a class=\"markdownIt-Anchor\" href=\"#集合set\">#</a> 集合 (set)</h1>\n<p>集合是用于存储多个元素的集合，元素不重复且无序。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>集合常见操作：</p>\n<ol>\n<li>添加元素：使用  <code>add()</code>  方法向集合中添加元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3, 4, 5, 6&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>删除元素：使用  <code>remove()</code>  方法从集合中删除指定元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 4, 5&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>集合长度：使用  <code>len()</code>  函数获取集合的长度。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>集合遍历：使用  <code>for</code>  循环遍历集合中的元素。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>集合交集：使用  <code>&amp;</code>  运算符计算两个集合的交集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;4, 5&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>集合并集：使用  <code>|</code>  运算符计算两个集合的并集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>集合差集：使用  <code>-</code>  运算符计算两个集合的差集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3&#125;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>集合对称差集：使用  <code>^</code>  运算符计算两个集合的对称差集。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 &#123;1, 2, 3, 6, 7, 8&#125;</span></pre></td></tr></table></figure><h2 id=\"布尔值\"><a class=\"markdownIt-Anchor\" href=\"#布尔值\">#</a> 布尔值</h2>\n<p>布尔值是用于表示真假的类型，只有两个值：True 和 False。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><h1 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<h2 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h2>\n<p>算术运算符用于执行基本的数学运算，例如加法、减法、乘法、除法等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token comment\"># c=30</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b <span class=\"token comment\"># d=-10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token comment\"># e=200</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b <span class=\"token comment\"># f=0.5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>g <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b <span class=\"token comment\"># g=10</span></pre></td></tr></table></figure><h2 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符</h2>\n<p>比较运算符用于比较两个值的大小关系，例如大于、小于、等于、不等于等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> b  <span class=\"token comment\"># c=False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;</span> b  <span class=\"token comment\"># d=True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> a <span class=\"token operator\">==</span> b <span class=\"token comment\"># e=False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f <span class=\"token operator\">=</span> a <span class=\"token operator\">!=</span> b <span class=\"token comment\"># f=True</span></pre></td></tr></table></figure><h2 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<p>逻辑运算符用于执行逻辑运算，例如与、或、非等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token keyword\">and</span> b <span class=\"token comment\"># c=False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token keyword\">or</span> b  <span class=\"token comment\"># d=True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> a   <span class=\"token comment\"># e=False</span></pre></td></tr></table></figure><h2 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h2>\n<p>赋值运算符用于将一个值赋给一个变量，例如等于、加等于、减等于等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> b <span class=\"token comment\"># a=20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">+=</span> b <span class=\"token comment\"># a=40</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">-=</span> b <span class=\"token comment\"># a=20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">*=</span> b <span class=\"token comment\"># a=400</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">/=</span> b <span class=\"token comment\"># a=2.0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">%=</span> b <span class=\"token comment\"># a=0</span></pre></td></tr></table></figure><h2 id=\"位运算\"><a class=\"markdownIt-Anchor\" href=\"#位运算\">#</a> 位运算</h2>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n<td>两个位都为 1 时，结果为 1</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或</td>\n<td>两个位都为 0 时，结果为 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n<td>两个位不同时，结果为 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反</td>\n<td>将所有位取反</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>将所有位向左移动指定的位数</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>将所有位向右移动指定的位数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token comment\"># 60 = 0011 1100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">13</span> <span class=\"token comment\"># 13 = 0000 1101</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b <span class=\"token comment\"># c = 0000 1100 = 12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b <span class=\"token comment\"># d = 0011 1101 = 61</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b <span class=\"token comment\"># e = 0011 0001 = 49</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>a    <span class=\"token comment\"># f = 1100 0011 = -61</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>g <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token comment\"># g = 1111 0000 = 240</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>h <span class=\"token operator\">=</span> a <span class=\"token operator\">>></span> <span class=\"token number\">2</span> <span class=\"token comment\"># h = 0000 1111 = 15</span></pre></td></tr></table></figure><h1 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"条件语句\"><a class=\"markdownIt-Anchor\" href=\"#条件语句\">#</a> 条件语句</h2>\n<p>条件语句用于根据条件执行不同的代码块，例如 if 语句、if-else 语句、if-elif-else 语句等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a大于b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">elif</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a小于b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a等于b\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h2>\n<p>循环语句用于重复执行一段代码，例如 for 循环、while 循环等。</p>\n<ul>\n<li><code>for</code>  循环：用于遍历一个可迭代对象，例如 <code>列表</code> 、 <code>元组</code> 、 <code>字符串</code> 等。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> ceil <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ceil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>while 循环：用于在满足条件时重复执行一段代码。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>函数是一段可重复使用的代码块，可以接受参数并返回结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"函数文档字符串\"><a class=\"markdownIt-Anchor\" href=\"#函数文档字符串\">#</a> 函数文档字符串</h2>\n<p>函数文档字符串用于描述函数的功能和用法，可以使用三引号  <code>&quot;&quot;&quot;</code>  包围。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    This function adds two numbers.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Parameters:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a (int): The first number.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    b (int): The second number.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Returns:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    int: The sum of the two numbers.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr></table></figure><h2 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\">#</a> 函数参数</h2>\n<p>函数参数用于传递数据给函数。</p>\n<ol>\n<li>位置参数：按照参数的顺序传递参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>默认参数：为参数指定默认值。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>可变参数：使用 <code>*</code>  传递可变数量的参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 以元组类型接 args = (1, 2, 3, 4, 5) </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        result <span class=\"token operator\">+=</span> i</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><p>注意：函数接收可变数量的参数，使用 <code>*args</code>  接收参数， <code>args</code>  是一个元组类型 <code>()</code> 。</p>\n<ol start=\"4\">\n<li>关键字参数：通过 <code>**</code>  传递关键字参数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fund</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 以字典类型接 kwargs = &#123;\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fund<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：函数接收关键字参数，使用 <code>**kwargs</code>  接收参数， <code>kwargs</code>  是一个字典类型 <code>&#123;&#125;</code> 。</p>\n<h2 id=\"函数返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数返回值\">#</a> 函数返回值</h2>\n<p>函数返回值用于返回函数执行的结果，可以使用 <code>return</code>  语句。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><h2 id=\"函数嵌套\"><a class=\"markdownIt-Anchor\" href=\"#函数嵌套\">#</a> 函数嵌套</h2>\n<ol>\n<li>嵌套调用</li>\n</ol>\n<p>函数嵌套调用是指在一个函数内部调用另一个函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>result <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 9</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>嵌套定义<br>\n函数嵌套是指在一个函数内部定义另一个函数。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is inner function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    inner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>outer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"匿名函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数\">#</a> 匿名函数</h2>\n<p>匿名函数是指没有名字的函数，使用 <code>lambda</code>  关键字定义。</p>\n<p>格式： <code>函数名 = lambda 参数列表: 表达式(返回值)</code></p>\n<ol>\n<li>无参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>有参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>带默认参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>带可变参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>带关键字参数匿名函数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">:</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 6</span></pre></td></tr></table></figure><h2 id=\"内置函数\"><a class=\"markdownIt-Anchor\" href=\"#内置函数\">#</a> 内置函数</h2>\n<p>内置函数是指 Python 语言自带的函数，例如 <code>len()</code> 、 <code>max()</code> 、 <code>min()</code>  等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr></table></figure><p>查看所有内置函数： <code>dir(__builtins__)</code> <br>\n <code>dir</code>  函数用于返回一个列表，包含指定对象的所有属性和方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 大写的为常量，小写的为函数</span></pre></td></tr></table></figure><h3 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\">#</a> map 函数</h3>\n<p>map 函数用于将一个函数应用于可迭代对象的每个元素，并返回一个迭代器。</p>\n<p>格式： <code>map(函数, 可迭代对象)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将每个元素乘以 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 4, 6, 8, 10]</span></pre></td></tr></table></figure><h3 id=\"filter函数\"><a class=\"markdownIt-Anchor\" href=\"#filter函数\">#</a> filter 函数</h3>\n<p>filter 函数用于过滤可迭代对象中的元素，并返回一个迭代器。</p>\n<p>格式： <code>filter(函数, 可迭代对象)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 过滤出偶数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [2, 4]</span></pre></td></tr></table></figure><h3 id=\"reduce函数\"><a class=\"markdownIt-Anchor\" href=\"#reduce函数\">#</a> reduce 函数</h3>\n<p>reduce 函数用于将一个函数应用于可迭代对象的每个元素，并返回一个值。<br>\n格式： <code>reduce(函数, 可迭代对象)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将每个元素相加</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><h3 id=\"zip函数\"><a class=\"markdownIt-Anchor\" href=\"#zip函数\">#</a> zip 函数</h3>\n<p>zip 函数用于将多个可迭代对象中的元素打包成一个个元组，并返回一个迭代器。</p>\n<p>格式： <code>zip(可迭代对象1, 可迭代对象2, ...)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将每个元素打包成元组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 [(1, 'a'), (2, 'b'), (3, 'c')]</span></pre></td></tr></table></figure><h3 id=\"拆包\"><a class=\"markdownIt-Anchor\" href=\"#拆包\">#</a> 拆包</h3>\n<p>对于函数中的多个返回数据，去掉元组，列表或者字典的括号，直接赋值给多个变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> arr</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr></table></figure><h2 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p>闭包是指在一个函数内部定义另一个函数，并且内部函数可以访问外部函数的变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>closure <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>closure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 10</span></pre></td></tr></table></figure><h1 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<p>作用域是指变量可访问的范围，分为全局作用域和局部作用域。</p>\n<ol>\n<li>全局作用域：在函数外部定义的变量，可以在整个程序中访问。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>局部作用域：在函数内部定义的变量，只能在函数内部访问。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 报错，c 未定义</span></pre></td></tr></table></figure><p>** 注意：** 局部变量 <code>c</code>  只能在 <code>add</code>  函数内部访问，不能在函数外部访问。</p>\n<p>局部变量升级为全局变量：使用 <code>global</code>  关键字声明变量为全局变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">global</span> a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 15</span></pre></td></tr></table></figure><p>局部变量 <code>a</code>  升级为全局变量，可以在函数外部访问。</p>\n<h1 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\">#</a> 异常</h1>\n<p>异常是指程序运行过程中出现的错误。</p>\n<p>异常种类：</p>\n<table>\n<thead>\n<tr>\n<th>异常类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ZeroDivisionError</code></td>\n<td>除数为 0</td>\n</tr>\n<tr>\n<td><code>TypeError</code></td>\n<td>类型错误</td>\n</tr>\n<tr>\n<td><code>ValueError</code></td>\n<td>值错误</td>\n</tr>\n<tr>\n<td><code>IndexError</code></td>\n<td>索引错误</td>\n</tr>\n<tr>\n<td><code>KeyError</code></td>\n<td>键错误</td>\n</tr>\n<tr>\n<td><code>NameError</code></td>\n<td>名称错误</td>\n</tr>\n<tr>\n<td><code>AttributeError</code></td>\n<td>属性错误</td>\n</tr>\n<tr>\n<td><code>SyntaxError</code></td>\n<td>语法错误</td>\n</tr>\n<tr>\n<td><code>IndentationError</code></td>\n<td>缩进错误</td>\n</tr>\n<tr>\n<td><code>IOError</code></td>\n<td>输入输出错误</td>\n</tr>\n<tr>\n<td><code>EOFError</code></td>\n<td>文件结束错误</td>\n</tr>\n<tr>\n<td><code>ImportError</code></td>\n<td>导入错误</td>\n</tr>\n<tr>\n<td><code>ModuleNotFoundError</code></td>\n<td>模块未找到错误</td>\n</tr>\n<tr>\n<td><code>AssertionError</code></td>\n<td>断言错误</td>\n</tr>\n<tr>\n<td><code>KeyboardInterrupt</code></td>\n<td>键盘中断</td>\n</tr>\n<tr>\n<td><code>SystemExit</code></td>\n<td>系统退出</td>\n</tr>\n<tr>\n<td><code>Exception</code></td>\n<td>所有异常的基类</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"捕获异常\"><a class=\"markdownIt-Anchor\" href=\"#捕获异常\">#</a> 捕获异常。</h2>\n<ul>\n<li>格式一： <code>try-except</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"除数不能为0\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>格式二： <code>try-except-else</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 没有异常时执行的代码</span></pre></td></tr></table></figure><ul>\n<li>格式三：try-except-finally</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 无论是否出现异常都会执行的代码</span></pre></td></tr></table></figure><ul>\n<li>格式四：try-except-else-finally</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> 异常类型<span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 异常处理代码 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 没有异常时执行的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 无论是否出现异常都会执行的代码</span></pre></td></tr></table></figure><h2 id=\"抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#抛出异常\">#</a> 抛出异常</h2>\n<p>使用 <code>raise</code>  关键字抛出异常。</p>\n<p>格式： <code>raise 异常类型(异常信息)</code> <br>\n 示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">raise</span> ZeroDivisionError<span class=\"token punctuation\">(</span><span class=\"token string\">\"除数不能为0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    result <span class=\"token operator\">=</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\">#</a> 模块</h1>\n<p>模块是包含一组函数、类和变量的文件，可以导入到其他文件中使用。</p>\n<h2 id=\"内置模块\"><a class=\"markdownIt-Anchor\" href=\"#内置模块\">#</a> 内置模块</h2>\n<p>Python 内置了一些模块，可以直接使用，例如 <code>math</code> 、 <code>random</code> 、 <code>datetime</code>  等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><h2 id=\"第三方模块第三方库\"><a class=\"markdownIt-Anchor\" href=\"#第三方模块第三方库\">#</a> 第三方模块（第三方库）</h2>\n<p>第三方模块是指由其他开发者编写的模块，需要先安装才能使用。</p>\n<p>安装第三方模块：使用 <code>pip</code>  命令安装。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install 模块名</pre></td></tr></table></figure><p>使用第三方模块：使用 <code>import</code>  关键字导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> 模块名</pre></td></tr></table></figure><p>使用第三方模块中的函数：使用 <code>模块名.函数名()</code>  调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><h2 id=\"自定义模块\"><a class=\"markdownIt-Anchor\" href=\"#自定义模块\">#</a> 自定义模块</h2>\n<p>自定义模块是指用户自己编写的模块，需要先定义一个 <code>.py</code>  文件，然后在其他文件中导入使用。</p>\n<p>注意：自定义模块的文件名不能与 Python 内置模块的文件名相同。</p>\n<h2 id=\"导入模块\"><a class=\"markdownIt-Anchor\" href=\"#导入模块\">#</a> 导入模块</h2>\n<ol>\n<li>导入模块：使用 <code>import</code>  关键字导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> 模块名</pre></td></tr></table></figure><ol start=\"2\">\n<li>使用模块中的函数：使用 <code>模块名.函数名()</code>  调用。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>导入模块中的特定函数：使用 <code>from 模块名 import 函数名</code> 导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sqrt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>导入模块中的所有函数：使用 <code>from 模块名 import *</code>  导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>导入模块中的特定变量：使用 <code>from 模块名 import 变量名</code> 导入。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 3.141592653589793</span></pre></td></tr></table></figure><h2 id=\"起别名\"><a class=\"markdownIt-Anchor\" href=\"#起别名\">#</a> 起别名</h2>\n<h3 id=\"模块起别名\"><a class=\"markdownIt-Anchor\" href=\"#模块起别名\">#</a> 模块起别名</h3>\n<p>使用 <code>as</code>  关键字给模块起别名。</p>\n<p>语法： <code>import 模块名 as 别名</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math <span class=\"token keyword\">as</span> m</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><h3 id=\"功能起别名\"><a class=\"markdownIt-Anchor\" href=\"#功能起别名\">#</a> 功能起别名</h3>\n<p>使用 <code>as</code>  关键字给功能起别名。</p>\n<p>语法： <code>from 模块名 import 功能 as 别名</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sqrt <span class=\"token keyword\">as</span> s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 4.0</span></pre></td></tr></table></figure><p>注意：导入多个功能时，可以使用‘，’隔开，后面功能也可以使用取别名： <code>from math import sqrt as s, pi as p</code></p>\n<h2 id=\"内置全局变量\"><a class=\"markdownIt-Anchor\" href=\"#内置全局变量\">#</a> 内置全局变量</h2>\n<p>语法：<br>\nif <strong>name</strong> == “<strong>main</strong>”:</p>\n<p>作用：用来控制 py 文件在不同应用场景下执行不同的逻辑，当模块被直接运行时， <code>__name__</code> 的值为 <code>&quot;__main__&quot;</code> ，当模块被导入时， <code>__name__</code> 的值为模块名。<br>\n例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接运行\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"被导入\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接运行该文件输出：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接运行</pre></td></tr></table></figure><p>被导入该文件输出：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>被导入</pre></td></tr></table></figure><p>总结：导入不会执行 <code>if __name__ == &quot;__main__&quot;:</code>  下的代码，只有直接运行该文件才会执行 <code>if __name__ == &quot;__main__&quot;:</code>  下的代码。</p>\n<h2 id=\"包\"><a class=\"markdownIt-Anchor\" href=\"#包\">#</a> 包</h2>\n<p>包是指包含一组模块的文件夹，文件夹中必须包含一个 <code>__init__.py</code>  文件，用于标识该文件夹是一个包。</p>\n<h3 id=\"initpy\"><a class=\"markdownIt-Anchor\" href=\"#initpy\">#</a> <strong>init</strong>.py</h3>\n<p>使用包：使用 <code>import 包名.模块名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> mypackage<span class=\"token punctuation\">.</span>mymodule</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mypackage<span class=\"token punctuation\">.</span>mymodule<span class=\"token punctuation\">.</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的特定模块：使用 <code>from 包名 import 模块名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage <span class=\"token keyword\">import</span> mymodule</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mymodule<span class=\"token punctuation\">.</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的特定函数：使用 <code>from 包名.模块名 import 函数名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage<span class=\"token punctuation\">.</span>mymodule <span class=\"token keyword\">import</span> myfunction</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的特定变量：使用 <code>from 包名.模块名 import 变量名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage<span class=\"token punctuation\">.</span>mymodule <span class=\"token keyword\">import</span> myvariable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myvariable<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的所有函数：使用 <code>from 包名.模块名 import *</code>  导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage<span class=\"token punctuation\">.</span>mymodule <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>myvariable<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用包中的所有变量：使用 <code>from 包名.模块名 import *</code>  导入。</p>\n<p>注意：导包会默认执行 <code>__init__.py </code> 文件中的代码。</p>\n<h3 id=\"all\"><a class=\"markdownIt-Anchor\" href=\"#all\">#</a> <strong>all</strong></h3>\n<p><code>__all__</code> 是一个列表，用于指定包中可以被导入的模块。</p>\n<p>语法： <code>__all__ = [&quot;模块名1&quot;, &quot;模块名2&quot;, ...]</code></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mypackage/__init__.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mymodule1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mymodule2\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>使用包中的特定模块：使用 <code>from 包名 import 模块名</code> 导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mypackage <span class=\"token keyword\">import</span> mymodule1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mymodule1<span class=\"token punctuation\">.</span>myfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"闭包-2\"><a class=\"markdownIt-Anchor\" href=\"#闭包-2\">#</a> 闭包</h2>\n<p>闭包是指在一个函数内部定义的函数，它可以访问外部函数的局部变量。<br>\n实现：</p>\n<ol>\n<li>函数嵌套（内部函数定义在外部函数内部）</li>\n<li>内部函数访问外部函数的局部变量</li>\n<li>外部函数返回内部函数</li>\n</ol>\n<p>语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> 外部函数<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    变量 <span class=\"token operator\">=</span> 值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> 内部函数<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>变量<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> 内部函数</pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function <span class=\"token comment\"># 返回内部函数的引用，即地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>my_function <span class=\"token operator\">=</span> outer_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>my_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 10</span></pre></td></tr></table></figure><p>注意：闭包可以访问外部函数的局部变量，但是不能修改外部函数的局部变量。</p>\n<h3 id=\"函数引用\"><a class=\"markdownIt-Anchor\" href=\"#函数引用\">#</a> 函数引用</h3>\n<p>函数引用是指将函数赋值给一个变量，然后通过变量调用函数。</p>\n<p>语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量 <span class=\"token operator\">=</span> 函数名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>my_function_ref <span class=\"token operator\">=</span> my_function</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>my_function_ref<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 Hello, World!</span></pre></td></tr></table></figure><h3 id=\"闭包变量\"><a class=\"markdownIt-Anchor\" href=\"#闭包变量\">#</a> 闭包变量</h3>\n<p>闭包变量是指在闭包中使用的变量，闭包变量实际上只有一份，每次开启内函数都是在使用同一份闭包变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer_function:\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner_function:\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> m</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>out <span class=\"token operator\">=</span> outer_function<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># outer_function: 10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>out<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inner_function: 20</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inner_function: 20 30</span></pre></td></tr></table></figure><h2 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h2>\n<p>作用：在不修改原有函数代码的情况下，给函数增加新的功能。</p>\n<ol>\n<li>标准装饰器</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 闭包三要素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 1. 函数嵌套</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 2. 内部函数使用外部函数的变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 3. 外部函数返回内部函数的函数名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 装饰器函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>out <span class=\"token operator\">=</span> outer_function<span class=\"token punctuation\">(</span>send<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>out<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>语法糖装饰器</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>被装饰的函数有参数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件给\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>多个装饰器</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第一个装饰器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function1</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 第二个装饰器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">outer_function2</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_function2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> inner_function2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token decorator annotation punctuation\">@outer_function2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 被装饰的函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送邮件给\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：Python 的装饰器应用顺序是 ​ <code>​自底向上​​</code>  的，即靠近 <code>函数定义</code> 的装饰器（ <code>@outer_function2</code> ）先被应用，外层装饰器（ <code>@outer_function1</code> ）后应用。<br>\n以上可以看做：  <code>send = outer_function1(outer_function2(send))</code></p>\n",
            "tags": [
                "python"
            ]
        }
    ]
}