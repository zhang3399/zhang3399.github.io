{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"c++\" category",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2025/03/19/C++/2025-3-19-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://zhang3399.github.io/2025/03/19/C++/2025-3-19-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "Lambda 表达式",
            "date_published": "2025-03-19T12:39:00.000Z",
            "content_html": "<blockquote>\n<p><code>Lambda</code>  表达式是  <code>C++11</code>  引入的一种匿名函数，允许在需要函数对象的地方直接定义一个函数，无需显式定义函数名。 <code>Lambda</code>  表达式常用于实现回调函数、临时函数、算法函数等场景。</p>\n</blockquote>\n<h1 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>Lambda 表达式的完整语法结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span> captures <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span> params <span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token operator\">-></span> return_type <span class=\"token punctuation\">&#123;</span> body <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>组成部分</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[ captures ]</code></td>\n<td>捕获列表，定义外部变量如何被  <code>Lambda</code>  访问（值捕获、引用捕获等）</td>\n</tr>\n<tr>\n<td><code>( params )</code></td>\n<td>参数列表，与普通函数参数列表一致</td>\n</tr>\n<tr>\n<td><code>mutable</code></td>\n<td>可选关键字，允许修改按值捕获的变量</td>\n</tr>\n<tr>\n<td><code>-&gt; return_type</code></td>\n<td>可选返回类型，可省略（编译器自动推导）</td>\n</tr>\n<tr>\n<td><code>&#123; body &#125;</code></td>\n<td><code>Lambda</code>  函数体</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"捕获列表capture-list\"><a class=\"markdownIt-Anchor\" href=\"#捕获列表capture-list\">#</a> 捕获列表（Capture List）</h1>\n<h2 id=\"捕获方式\"><a class=\"markdownIt-Anchor\" href=\"#捕获方式\">#</a> 捕获方式</h2>\n<table>\n<thead>\n<tr>\n<th>捕获方式</th>\n<th>语法示例</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​按值捕获</td>\n<td>[x]</td>\n<td>复制外部变量  <code>x</code>  的值到  <code>Lambda</code>  内部</td>\n</tr>\n<tr>\n<td>​按引用捕获</td>\n<td>[&amp;x]</td>\n<td>直接引用外部变量  <code>x</code></td>\n</tr>\n<tr>\n<td>​隐式按值捕获全部</td>\n<td>[=]</td>\n<td>按值捕获所有外部变量（不推荐，易导致悬空引用或性能问题）</td>\n</tr>\n<tr>\n<td>​隐式按引用捕获全部</td>\n<td>[&amp;]</td>\n<td>按引用捕获所有外部变量（不推荐，需谨慎管理生命周期）</td>\n</tr>\n<tr>\n<td>​混合捕获</td>\n<td><code>[x, &amp;y]</code></td>\n<td>按值捕获  <code>x</code> ，按引用捕获  <code>y</code></td>\n</tr>\n<tr>\n<td>​初始化捕获（C++14+）</td>\n<td>​\t <code>[z = x + 1]</code></td>\n<td>创建新变量  <code>z</code> ，其值为  <code>x + 1</code> （可用于移动语义或复杂初始化）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例代码\"><a class=\"markdownIt-Anchor\" href=\"#示例代码\">#</a> 示例代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 按值捕获 a，按引用捕获 b</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> lambda1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 隐式按引用捕获所有外部变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">auto</span> lambda2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 初始化捕获（C++14+）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">auto</span> lambda3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 2</span></pre></td></tr></table></figure><h1 id=\"参数列表parameters\"><a class=\"markdownIt-Anchor\" href=\"#参数列表parameters\">#</a> 参数列表（Parameters）</h1>\n<ul>\n<li>与普通函数参数列表一致，支持值传递、引用传递、默认参数等。</li>\n<li>​无参数时可省略： <code>[] &#123; ... &#125;</code> <br>\n<strong> 示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值传递</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引用传递</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> no_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无参数</span></pre></td></tr></table></figure><h1 id=\"mutable-关键字\"><a class=\"markdownIt-Anchor\" href=\"#mutable-关键字\">#</a> mutable 关键字</h1>\n<ul>\n<li>默认情况下，按值捕获的变量在  <code>Lambda</code>  内部是 ​不可修改 的。</li>\n<li>使用  <code>mutable</code>  后，可以修改按值捕获的变量（修改的是副本，不影响外部变量）。<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许修改按值捕获的 count（副本）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 外部 count 仍为 0</span></pre></td></tr></table></figure><h1 id=\"返回类型return-type\"><a class=\"markdownIt-Anchor\" href=\"#返回类型return-type\">#</a> 返回类型（Return Type）</h1>\n<ul>\n<li>返回类型可省略，编译器根据  <code>return</code>  语句自动推导。</li>\n<li>当函数体包含多个  <code>return</code>  语句且类型不一致时，必须显式指定返回类型。<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动推导返回类型为 int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 显式指定返回类型为 double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> divide <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"lambda-的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#lambda-的应用场景\">#</a> Lambda 的应用场景</h1>\n<h2 id=\"作为函数对象functor\"><a class=\"markdownIt-Anchor\" href=\"#作为函数对象functor\">#</a> 作为函数对象（Functor）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 降序排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"异步回调如-boostasio\"><a class=\"markdownIt-Anchor\" href=\"#异步回调如-boostasio\">#</a> 异步回调（如 Boost.Asio）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">async_read_some</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> error_code<span class=\"token operator\">&amp;</span> ec<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ec<span class=\"token punctuation\">)</span> <span class=\"token function\">handle_read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"封装局部逻辑\"><a class=\"markdownIt-Anchor\" href=\"#封装局部逻辑\">#</a> 封装局部逻辑</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">process_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>threshold<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">copy_if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h1>\n<h2 id=\"生命周期管理\"><a class=\"markdownIt-Anchor\" href=\"#生命周期管理\">#</a> 生命周期管理</h2>\n<ul>\n<li>​按引用捕获：确保被引用的对象在  <code>Lambda</code>  执行时仍然有效，避免悬空引用。</li>\n<li>​按值捕获指针：需谨慎，可能造成内存泄漏或悬空指针。</li>\n</ul>\n<h2 id=\"性能\"><a class=\"markdownIt-Anchor\" href=\"#性能\">#</a> 性能</h2>\n<ul>\n<li>小对象按值捕获更高效，大对象（如容器）建议按引用捕获（需确保生命周期）。</li>\n</ul>\n<h2 id=\"默认捕获的风险\"><a class=\"markdownIt-Anchor\" href=\"#默认捕获的风险\">#</a> 默认捕获的风险</h2>\n<ul>\n<li>避免使用 [=] 或 [&amp;]：可能导致意外捕获不需要的变量，增加维护难度。</li>\n</ul>\n<h2 id=\"lambda-与函数对象的关系\"><a class=\"markdownIt-Anchor\" href=\"#lambda-与函数对象的关系\">#</a>  <code>Lambda</code>  与函数对象的关系</h2>\n<ul>\n<li><code>Lambda</code>  本质上是编译器生成的匿名类（闭包类型）的实例。</li>\n<li>捕获的变量会成为该匿名类的成员变量。</li>\n<li>等价转换示例</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Lambda 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> lambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 编译器生成的等价类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">__AnonymousClosure</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">__AnonymousClosure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>关键点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​捕获列表</td>\n<td>明确指定需要捕获的变量，避免隐式捕获</td>\n</tr>\n<tr>\n<td>​参数列表</td>\n<td>与普通函数一致，支持多种传递方式</td>\n</tr>\n<tr>\n<td>​<strong>mutable</strong></td>\n<td>允许修改按值捕获的变量副本</td>\n</tr>\n<tr>\n<td>​返回类型</td>\n<td>可省略（自动推导）或显式指定</td>\n</tr>\n<tr>\n<td>​生命周期</td>\n<td>谨慎管理按引用捕获的变量，避免悬空引用</td>\n</tr>\n<tr>\n<td>​应用场景</td>\n<td>函数对象、异步回调、STL 算法等</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Lambda 表达式"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2025/03/14/C++/2025-3-14-Boost/",
            "url": "https://zhang3399.github.io/2025/03/14/C++/2025-3-14-Boost/",
            "title": "Boost",
            "date_published": "2025-03-14T10:00:00.000Z",
            "content_html": "<blockquote>\n<p><code>Boost</code>  是一个开源的 C++ 库集合，提供了许多实用的功能，如网络编程、图形界面、数学计算等。Boost 库可以与标准 C++ 库无缝集成，扩展了 C++ 的功能。</p>\n</blockquote>\n<h1 id=\"安装-boost-库\"><a class=\"markdownIt-Anchor\" href=\"#安装-boost-库\">#</a> 安装 Boost 库</h1>\n<p>通过 APT 包管理器安装 Boost 库：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 更新软件包索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 安装 Boost 核心库和开发文件（包含头文件和静态 / 动态库）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libboost-all-dev <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 验证安装（检查版本）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">boostversion</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /usr/include/boost/version.hpp <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"#define BOOST_VERSION\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $3&#125;'</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Boost 版本: <span class=\"token variable\">$boostversion</span>\"</span></pre></td></tr></table></figure><h1 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p>同步操作会阻塞当前线程，直到操作完成。异步操作则不会阻塞线程，通过回调函数在操作完成后触发。</p>\n<h2 id=\"同步\"><a class=\"markdownIt-Anchor\" href=\"#同步\">#</a> 同步</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 同步，阻塞线程 5 秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//wait () 返回，定时器资源（如系统句柄）被自动释放</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Hello,world!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>定时器</strong><br>\n <code>steady_timer</code>  是  <code>Boost.Asio</code>  提供的定时器类，用于在指定时间后执行回调函数。</p>\n<p><code>steady_timer </code> 的构造函数需要  <code>io_context</code>  参数，目的是 <strong>​显式声明</strong> 该定时器依赖 ** 的<strong>事件循环</strong>。这种设计确保类型安全，避免隐式关联导致的错误。</p>\n<p><strong>io_context 的作用</strong><br>\n <code>io_context</code>  是  <code>Boost.Asio</code>  的核心组件，负责调度以及执行所有异步（如 DNS 解析、连接、读写）和同步操作的生命周期。（如定时器、网络 I/O）。</p>\n<h2 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h2>\n<p>异步操作需要事件循环来驱动， <code>io_context::run()</code>  方法启动事件处理流程。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> a <span class=\"token comment\">/*e*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Hello,world!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 异步，不会阻塞线程，回调函数 print 会在 5 秒后执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>io.run() </code> 是异步编程的核心，负责监听操作系统异步操作（如定时器到期、网络请求完成）的完成事件，确保资源（如 <code>定时器</code> 、 <code>socket</code> ）被正确释放，并触发回调函数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">同步代码</th>\n<th style=\"text-align:center\">异步代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">​执行方式</td>\n<td style=\"text-align:center\">阻塞等待（ <code>wait()</code> ）</td>\n<td style=\"text-align:center\">非阻塞，通过回调触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​事件循环</td>\n<td style=\"text-align:center\">无需  <code>io.run()</code></td>\n<td style=\"text-align:center\">必须调用  <code>io.run()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​线程占用</td>\n<td style=\"text-align:center\">单线程阻塞</td>\n<td style=\"text-align:center\">单线程 / 多线程（由  <code>run()</code>  决定）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​适用场景</td>\n<td style=\"text-align:center\">简单、短耗时操作</td>\n<td style=\"text-align:center\">高并发、实时性要求高的场景</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>​时间点计算</strong></p>\n<ol>\n<li><strong>函数式编程</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*e*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer<span class=\"token operator\">*</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 异步等待新到期时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t<span class=\"token operator\">-></span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  t<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Final count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// Final count is 5</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>t-&gt;expires_at()</code>  返回定时器当前的到期时间点（ <code>system_clock::time_point</code>  类型）， <code>boost::asio::chrono::seconds(1)</code>  表示一个 ​时间间隔​（ <code>duration</code>  类型）。两者相加会生成新的到期时间点：</p>\n<p>这种设计允许动态调整定时器的触发时间，适用于需要重复执行任务的场景（如每隔 <code>1</code>  秒打印一次计数器）。</p>\n<p><strong>​类型匹配的底层原理</strong></p>\n<p><code>expires_at()</code>  的参数类型是  <code>system_clock::time_point</code> ，而  <code>boost::asio::chrono::seconds(1)</code>  的类型是  <code>duration</code> , 明确指定了时间单位（秒），避免了因隐式类型转换导致的单位混淆（如误用毫秒或微秒）。<br>\n <code>Boost.Asio</code>  的  <code>chrono</code>  库通过 <strong>​类型推导</strong> 和 <strong>运算符重载</strong>，自动将  <code>duration</code>  转换为  <code>time_point</code> ，确保表达式合法。<br>\n若直接使用  <code>t-&gt;expires_at(1)</code> ，编译器会报错，因为  <code>1</code>  的类型是  <code>int</code> ，无法隐式转换为  <code>time_point</code> 。</p>\n<ol start=\"2\">\n<li><strong>面向对象编程</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造函数，初始化 timer_成员和 count_成员</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">timer_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 初始化 timer_成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">count_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                                     <span class=\"token comment\">// 初始化 count_成员</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//bind () 函数将成员函数 print 绑定到当前对象上，并作为回调函数传递给 timer_.async_wait ()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        timer_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"final count is \"</span><span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count_<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            timer_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            timer_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  printer <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// final count is 5</span></pre></td></tr></table></figure><p><strong>优缺点对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">维度</th>\n<th style=\"text-align:center\">​函数式</th>\n<th style=\"text-align:center\">​面向对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">​代码简洁性</td>\n<td style=\"text-align:center\">✅ 代码简短，适合简单场景</td>\n<td style=\"text-align:center\">❌ 类定义增加代码量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​安全性</td>\n<td style=\"text-align:center\">❌ 需手动管理指针，易出错</td>\n<td style=\"text-align:center\">✅ 自动管理资源，避免悬垂指针</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​扩展性</td>\n<td style=\"text-align:center\">❌ 修改需调整参数传递链</td>\n<td style=\"text-align:center\">✅ 新增功能只需扩展类方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​异步上下文</td>\n<td style=\"text-align:center\">❌ 依赖外部变量，多线程下可能竞争</td>\n<td style=\"text-align:center\">✅ 成员变量天然隔离，适合多线程异步任务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​性能开销</td>\n<td style=\"text-align:center\">✅ 无虚函数或类结构开销</td>\n<td style=\"text-align:center\">❌ 类实例化带来微小内存开销</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>线程安全的异步任务队列（通过 Strand 串行化）</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 通过 strand_ 序列化回调函数的执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token function\">strand_</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_strand</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 初始化 strand_成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">timer1_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始化 timer1_成员</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">timer2_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始化 timer2_成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">count_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 使用 strand_串行化异步操作，bind_executor () 将异步操作绑定到 strand_上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Final count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Timer 1: \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Timer 2: \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>strand<span class=\"token operator\">&lt;</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token double-colon punctuation\">::</span>executor_type<span class=\"token operator\">></span> strand_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer1_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer2_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">int</span> count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  printer <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 创建一个新线程，执行 Lambda 表达式中的代码 (即 io.run ())</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\">// 阻塞主线程，直到 t 线程结束</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码通过多线程运行  <code>io_context </code> 的事件循环，结合  <code>strand_</code>  的序列化机制，实现了高效的事件响应与线程安全的逻辑处理。虽然有两个线程处理事件，但任务逻辑（ <code>print1</code> / <code>print2</code> ）本质上是单线程化的，因此更准确地说，这是多线程协作处理事件循环，但任务执行是序列化的。</p>\n<p><strong> <code>Lambda</code>  的捕获方式 [&amp;]</strong></p>\n<ul>\n<li>[&amp;] 表示以引用方式捕获所有外部变量。<br>\n在  <code>Lambda</code>  内部可以直接访问外部作用域的所有变量（如  <code>io</code> ），且操作的是原变量本身，而非副本。</li>\n<li>​对比其他捕获方式：<br>\n[=]：以值方式捕获（创建副本，可能影响性能）。<br>\n[io]：仅捕获 io 变量（需显式指定）。<br>\n此处 [&amp;] 简化了代码，但需确保  <code>Lambda</code>  生命周期内外部变量有效。</li>\n</ul>\n<ol>\n<li>代码的多线程机制<br>\n<strong>​线程数量与任务类型</strong><br>\n代码中通过  <code>std::thread t([&amp;]&#123; io.run(); &#125;)</code>  创建了一个工作线程，主线程也调用  <code>io.run()</code> ，因此 ​总共有两个线程运行  <code>io_context</code>  的事件循环。这两个线程会并行处理  <code>io_context</code>  中的异步操作（如定时器到期事件）。</li>\n</ol>\n<p><strong>​异步操作的并行性</strong><br>\n <code>timer1_</code>  和  <code>timer2_</code>  是独立的定时器，它们的异步等待操作会被提交到  <code>io_context</code>  的任务队列中。理论上，这两个定时器的到期事件可能被分配到不同的线程处理。但由于绑定了  <code>strand_</code> ，所有回调会被强制序列化执行，​实际表现为单线程顺序处理​。</p>\n<ol start=\"2\">\n<li>Strand 的核心作用<br>\n<strong>​线程安全与顺序保证</strong><br>\n <code>strand_ </code> 是  <code>Boost.Asio</code>  提供的一种隐式同步机制，其作用包括：</li>\n</ol>\n<p>​序列化回调执行：所有通过  <code>strand_</code>  提交的回调（如  <code>print1</code>  和  <code>print2</code> ）会按提交顺序依次执行，即使多个线程在运行  <code>io_context</code> 。<br>\n​消除数据竞争：对共享资源  <code>count_</code>  的修改（如 <code>++count_</code> ）会被限制在同一个线程上下文中，无需显式加锁。<br>\n<strong>​代码中的具体实现</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将定时器的回调函数绑定到  <code>strand_</code>  的执行器上，确保回调在  <code>strand_ </code> 的调度下运行。因此，即使两个定时器的到期事件被不同线程触发， <code>print1</code>  和  <code>print2</code>  也不会并发执行。</p>\n<ol start=\"3\">\n<li>执行流程示例<br>\n假设两个定时器同时到期：\n<ol>\n<li>​事件触发： <code>timer1_</code>  和  <code>timer2_</code>  的到期事件被提交到  <code>io_context</code> 。</li>\n<li>​线程分配：事件可能被主线程或工作线程  <code>t</code>  处理。</li>\n<li>​Strand 调度：无论哪个线程处理事件，回调函数会被  <code>strand_ </code> 序列化。例如：\n<ul>\n<li>线程 1 执行  <code>print1</code>  → 输出  <code>Timer 1: 0</code> 。</li>\n<li>线程 2 执行  <code>print2</code>  → 但需等待  <code>print1</code>  完成后才能执行，输出  <code>Timer 2: 1</code> 。</li>\n<li>最终  <code>count_</code>  会严格递增至 10，无并发问题</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h1>\n<p><strong>TCP 连接</strong></p>\n<ul>\n<li>TCP 连接是面向连接的，可靠的，基于字节流的传输层通信协议。</li>\n<li>TCP 连接需要三次握手来建立连接，四次挥手来关闭连接。</li>\n<li>TCP 连接的建立和关闭都需要消耗一定的资源，因此需要合理管理 TCP 连接。</li>\n<li>TCP 连接的建立和关闭都需要消耗一定的资源，因此需要合理管理 TCP 连接。</li>\n</ul>\n<p><strong>UDP 连接</strong></p>\n<ul>\n<li>UDP 连接是无连接的，不可靠的，基于数据报的传输层通信协议。</li>\n<li>UDP 连接不需要建立连接，只需要发送数据报即可。</li>\n<li>UDP 连接不需要关闭连接，只需要发送数据报即可。</li>\n<li>UDP 连接的建立和关闭不需要消耗资源，因此不需要管理 UDP 连接。</li>\n</ul>\n<p><strong>TCP 和 UDP 的区别</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">TCP</th>\n<th style=\"text-align:center\">UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">面向连接</td>\n<td style=\"text-align:center\">无连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可靠</td>\n<td style=\"text-align:center\">不可靠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基于字节流</td>\n<td style=\"text-align:center\">基于数据报</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要三次握手</td>\n<td style=\"text-align:center\">不需要握手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要四次挥手</td>\n<td style=\"text-align:center\">不需要挥手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建立和关闭连接需要消耗资源</td>\n<td style=\"text-align:center\">建立和关闭连接不需要消耗资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要管理连接</td>\n<td style=\"text-align:center\">不需要管理连接</td>\n</tr>\n</tbody>\n</table>\n<p><strong>TCP 和 UDP 的应用场景</strong></p>\n<ul>\n<li>TCP 连接适用于需要可靠传输的场景，如文件传输、邮件发送等。</li>\n<li>UDP 连接适用于需要快速传输的场景，如视频直播、实时游戏等。</li>\n</ul>\n<p><strong>TCP 和 UDP 的编程模型</strong></p>\n<ul>\n<li>TCP 连接的编程模型通常包括客户端和服务端两部分，客户端通过  <code>socket</code>  函数创建一个套接字，然后通过  <code>connect</code>  函数连接到服务端，然后通过  <code>send</code>  和  <code>recv</code>  函数进行数据的发送和接收，最后通过  <code>close</code>  函数关闭连接。</li>\n</ul>\n<h2 id=\"同步tcp时间服务器\"><a class=\"markdownIt-Anchor\" href=\"#同步tcp时间服务器\">#</a> 同步 TCP 时间服务器</h2>\n<ol>\n<li>命令行参数</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>argc（Argument Count）​</strong><br>\n表示命令行参数的总数量（包括程序名本身）。</p>\n<ul>\n<li>例如，若用户输入  <code>./myprogram arg1 arg2</code> ，则  <code>argc</code>  的值为 ​3​（程序名 + 2 个参数）。</li>\n</ul>\n<p>​<strong>argv[]（Argument Vector）​</strong><br>\n是一个字符串指针数组，存储所有命令行参数的具体值。</p>\n<ul>\n<li><code>argv[0]</code> ：程序自身的名称（如 “./myprogram”）。</li>\n<li><code>argv[1]</code>  ~  <code>argv[argc-1]</code> ：用户输入的其他参数。</li>\n<li><code>argv[argc]</code> ：固定为 NULL（表示数组结束）。</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数总数 argc = %d\\n\"</span><span class=\"token punctuation\">,</span> argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"argv[%d] = %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./myprogram arg1 arg2 arg3</pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数总数 argc <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ./myprogram</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg3</pre></td></tr></table></figure><ol start=\"2\">\n<li>同步 TCP 服务端</li>\n</ol>\n<blockquote>\n<p>服务端：监听端口 13 , 发送时间数据</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>time_t now <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 格式示例: \"Wed Oct  2 00:00:00 2023\\n\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 监听端口 13 (需管理员权限) 或改用其他端口如 12345</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tcp<span class=\"token double-colon punctuation\">::</span>acceptor <span class=\"token function\">acceptor</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Daytime 服务器启动，监听端口: \"</span> <span class=\"token operator\">&lt;&lt;</span> acceptor<span class=\"token punctuation\">.</span><span class=\"token function\">local_endpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            tcp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            acceptor<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞等待客户端连接</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"客户端连接: \"</span> <span class=\"token operator\">&lt;&lt;</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">remote_endpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>string message <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code ignored_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 发送时间数据后立即关闭连接</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ignored_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"异常: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>同步 TCP 客户端</li>\n</ol>\n<blockquote>\n<p>客户端：连接服务器，发送数据，接收响应，关闭连接。</p>\n</blockquote>\n<p><strong>整体流程</strong></p>\n<ul>\n<li>**​初始化 I/O 上下文：** 创建 io_context 对象，管理所有 I/O 操作。</li>\n<li>**​解析目标地址：** 将用户输入的主机名和服务名转换为具体的网络地址列表。</li>\n<li>**​创建套接字：** 准备用于通信的套接字对象。</li>\n<li>**​连接服务器：** 按地址列表尝试连接，直到成功或全部失败。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//using 导入某个变量到当前作用域 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//tcp 命名空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">//std::cerr 通常用于输出错误信息，这些信息不会被重定向到文件或管道，而是直接显示在终端上。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Usage: client &lt;host>\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 创建解析器对象，用于将 ​主机名 和 ​服务名 / 端口号 转换为具体的网络地址（IP + 端口）。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>resolver <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//io_context：绑定到同一个 I/O 上下文，确保解析操作由该上下文管理。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>resolver<span class=\"token double-colon punctuation\">::</span>results_type endpoints <span class=\"token operator\">=</span>     </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 解析用户输入的主机名和服务名，生成可能的网络端点列表。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 套接字绑定到同一个 I/O 上下文，确保其操作由该上下文管理。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> endpoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试连接到服务器。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token operator\">></span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">//read_some 函数用于从 TCP 连接中读取数据。buffer 函数用于创建一个缓冲区，用于存储读取的数据。size_t 类型表示读取的字节数。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      size_t len <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">read_some</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>error<span class=\"token double-colon punctuation\">::</span>eof<span class=\"token punctuation\">)</span> <span class=\"token comment\">//eof 表示连接已关闭。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Connection closed cleanly by peer.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">throw</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">system_error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Some other error.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//buf.data () 返回缓冲区的指针，len 表示读取的字节数。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><code>boost::asio::io_context io_context;</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建 I/O 上下文对象，管理所有底层 I/O 操作（如网络通信、定时器等）。<br>\n<strong>​原理：</strong></p>\n<ul>\n<li><code>io_context</code>  是  <code>Boost.Asio</code>  的 ​事件循环核心，负责调度和处理异步操作。<br>\n所有异步操作（如连接、读写）都需要通过它执行。</li>\n</ul>\n<ol start=\"2\">\n<li><code>tcp::resolver resolver(io_context);</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建解析器对象，用于将 ​主机名 和 ​服务名 / 端口号 转换为具体的网络地址（IP + 端口）。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>io_context</code> ：绑定到同一个 I/O 上下文，确保解析操作由该上下文管理。<br>\n<strong>​功能：</strong></li>\n<li>解析器 ( <code>resolver</code> ) 支持  <code>DNS</code>  查询，将域名（如  <code>&quot;example.com&quot;</code> ）解析为 IP 地址。</li>\n<li>将服务名（如  <code>&quot;http&quot;</code> ）解析为端口号（如  <code>80</code> ）。</li>\n</ul>\n<ol start=\"3\">\n<li><code>tcp::resolver::results_type endpoints = resolver.resolve(argv[1], &quot;cc&quot;);</code></li>\n</ol>\n<p><strong>​作用：</strong> 解析用户输入的主机名和服务名，生成可能的网络端点列表。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>argv[1]</code> ：命令行输入的主机名（如  <code>&quot;localhost&quot;</code>  或  <code>&quot;192.168.1.100&quot;</code> ）。</li>\n<li><code>&quot;cc&quot;</code> ：服务名或端口号。这里可能是自定义的服务名（需系统配置）或直接表示端口号（如  <code>&quot;12345&quot;</code> ）。<br>\n<strong>​返回值：</strong></li>\n<li><code>endpoints</code>  是一个端点列表，包含所有可能的 IP 地址和端口组合（例如  <code>IPv4</code>  和  <code>IPv6</code>  地址）。</li>\n</ul>\n<ol start=\"4\">\n<li><code>tcp::socket socket(io_context);</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建  <code>TCP</code>  套接字对象，用于与服务器通信。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>io_context</code> ：套接字绑定到同一个 I/O 上下文，确保其操作由该上下文管理。<br>\n<strong>​功能：</strong></li>\n<li>套接字是网络通信的端点，通过它可以发送和接收数据。</li>\n</ul>\n<ol start=\"5\">\n<li><code>boost::asio::connect(socket, endpoints);</code></li>\n</ol>\n<p><strong>​作用：</strong> 尝试连接到服务器。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>socket</code> ：上一步创建的套接字。</li>\n<li><code>endpoints</code> ：解析得到的端点列表。<br>\n<strong>​行为：</strong></li>\n<li>按顺序尝试连接  <code>endpoints</code>  中的每一个端点（如  <code>IPv4</code>  地址优先，失败后尝试  <code>IPv6</code> ）。</li>\n<li>当某个端点连接成功时，停止尝试。</li>\n<li>如果所有端点均连接失败，抛出异常。</li>\n</ul>\n<h2 id=\"异步tcp时间服务器\"><a class=\"markdownIt-Anchor\" href=\"#异步tcp时间服务器\">#</a> 异步 TCP 时间服务器</h2>\n<ol>\n<li><strong>主函数入口</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建 IO 上下文，管理所有异步操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    tcp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 创建 TCP 服务器实例，初始化监听</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 启动事件循环，处理异步操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>io_context</code>  是 <code>Boost.Asio</code>  的核心，负责调度异步任务。</li>\n<li><code>tcp_server</code>  初始化时会开始监听连接。</li>\n<li><code>io_context.run()</code>  会阻塞主线程，持续处理异步事件，直到所有任务完成。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>​TCP 服务器初始化（tcp_server 构造函数）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定 IPv4 地址的 13 端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始异步等待客户端连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>acceptor_</code>  初始化时绑定到本地 13 端口。</li>\n<li><code>start_accept()</code>  启动异步接受连接的过程。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>异步接受连接（start_accept）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span> tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新连接对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>                       <span class=\"token comment\">// 异步接受连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接完成时调用处理函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>tcp_connection::create</code>  创建新的连接对象，其 <code>socket</code>  由 <code>io_context</code>  管理。</li>\n<li><code>async_accept</code>  异步等待客户端连接。当有连接到来时， <code>lambda</code>  被调用，传递错误码和连接对象。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>处理新连接（handle_accept）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动数据发送流程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续监听下一个连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果没有错误，调用 <code>new_connection-&gt;start()</code>  开始处理客户端请求。</li>\n<li>无论是否出错，再次调用 <code>start_accept()</code> ，形成循环监听。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>TCP 连接处理（tcp_connection::start）</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成当前时间字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">auto</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 shared_ptr，延长对象生命周期</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步发送数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      socket_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送完成后的回调</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>make_daytime_string()</code>  生成当前时间的字符串。</li>\n<li><code>shared_from_this()</code>  确保在异步操作期间对象不会被销毁。</li>\n<li><code>async_write</code>  异步发送数据，完成后调用 <code>handle_write</code> 。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>数据发送完成处理（handle_write）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span> size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 此处可添加发送完成后的逻辑，例如关闭连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当前代码未处理发送结果，但可在此处添加错误处理或资源释放逻辑。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>生成时间字符串（make_daytime_string）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 示例输出：\"Wed May 22 15:42:36 2024\\n\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>返回的字符串末尾包含换行符，符合 Daytime 协议标准。</li>\n</ul>\n<p><strong>异步执行流程总结：​</strong></p>\n<ul>\n<li>服务器启动，监听端口 13。</li>\n<li>当客户端连接时，async_accept 完成，触发 handle_accept。</li>\n<li>无错误则调用 start () 发送时间数据。</li>\n<li>数据发送完成后，由 handle_write 处理后续逻辑（当前为空）。</li>\n<li>服务器循环调用 start_accept，持续监听新连接。</li>\n</ul>\n<p>** 关键点：**​</p>\n<ul>\n<li><strong>​生命周期管理：</strong> 通过  <code>shared_from_this()</code>  和  <code>shared_ptr</code>  确保异步操作期间对象存活。</li>\n<li><strong>​异步链式调用：</strong>  <code>async_accept</code>  → <code> handle_accept</code>  →  <code>async_write</code>  →  <code>handle_write</code>  形成异步链。</li>\n<li><strong>​端口重用：</strong> Daytime 协议使用 13 端口，需确保权限允许（Linux/Mac 可能需要 sudo 运行）。</li>\n</ul>\n<p><strong>完整代码：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 示例输出：\"Wed May 22 15:42:36 2024\\n\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_connection</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">enable_shared_from_this</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">tcp_connection</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>tcp_connection<span class=\"token operator\">></span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">static</span> pointer <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket<span class=\"token operator\">&amp;</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成当前时间字符串</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">auto</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 shared_ptr，延长对象生命周期</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步发送数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        socket_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送完成后的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span> size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 此处可添加发送完成后的逻辑，例如关闭连接</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string message_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_server</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token operator\">:</span><span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定 IPv4 地址的 13 端口</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始异步等待客户端连接</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span> tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建新连接对象</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步接受连接</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 这里的 this 指向当前 tcp_server 对象</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动数据发送流程</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续监听下一个连接</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>acceptor acceptor_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建 IO 上下文，管理所有异步操作</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    tcp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 创建 TCP 服务器实例，初始化监听</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 启动事件循环，处理异步操作</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"upd\"><a class=\"markdownIt-Anchor\" href=\"#upd\">#</a> UPD</h1>\n<h2 id=\"同步udp客户端\"><a class=\"markdownIt-Anchor\" href=\"#同步udp客户端\">#</a> 同步 UDP 客户端</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Usage: client &lt;host>\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>resolver <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>endpoint receiver_endpoint <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">*</span>resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daytime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> send_buf  <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>send_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> receiver_endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token operator\">></span> recv_buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>endpoint sender_endpoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    size_t len <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sender_endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"异步udp服务端\"><a class=\"markdownIt-Anchor\" href=\"#异步udp服务端\">#</a> 异步 UDP 服务端</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// For time_t, time and ctime;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udp_server</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">udp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buffer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_receive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>bytes_transferred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_send<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>bytes_transferred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_send</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token comment\">/*message*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>endpoint remote_endpoint_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> recv_buffer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    udp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"组合tcpudp\"><a class=\"markdownIt-Anchor\" href=\"#组合tcpudp\">#</a> 组合 TCP/UDP</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// For time_t, time and ctime;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_connection</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">enable_shared_from_this</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">tcp_connection</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>tcp_connection<span class=\"token operator\">></span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">static</span> pointer <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket<span class=\"token operator\">&amp;</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>socket_<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tcp_connection<span class=\"token double-colon punctuation\">::</span>handle_write<span class=\"token punctuation\">,</span> <span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string message_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_server</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tcp_server<span class=\"token double-colon punctuation\">::</span>handle_accept<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>acceptor acceptor_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udp_server</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token function\">udp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buffer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_receive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_send<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>      <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_send</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token comment\">/*message*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>endpoint remote_endpoint_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> recv_buffer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    tcp_server <span class=\"token function\">server1</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    udp_server <span class=\"token function\">server2</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Boost"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/08/08/C++/2024-8-8-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",
            "url": "https://zhang3399.github.io/2024/08/08/C++/2024-8-8-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",
            "title": "I/O多路复用",
            "date_published": "2024-08-08T12:00:00.000Z",
            "content_html": "<blockquote>\n<p><code>I/O多路复用</code> 是一种技术，允许一个进程同时监控多个文件描述符，并在其中任何一个文件描述符准备好进行 I/O 操作时通知进程。这种技术可以提高程序的性能和效率，特别是在需要同时处理多个网络连接或文件描述符的情况下。</p>\n</blockquote>\n<h1 id=\"select\"><a class=\"markdownIt-Anchor\" href=\"#select\">#</a> select</h1>\n<p>函数原型：使用 <code>select</code>  这种 <code>IO</code>  多路转接方式需要调用一个同名函数 <code>select</code> ，这个函数是跨平台的， <code>Linux</code> 、 <code>Windows</code> 、 <code>MacOS</code>  等操作系统都是支持的。该函数可以委托内核帮助我们检测若干个文件描述符的状态，其实就是检测这些文件描述符对应的读写缓冲区的状态。</p>\n<ul>\n<li>读缓冲区状态：检测里面是否有数据，如果有数据该缓冲区对应的文件描述符就绪</li>\n<li>写缓冲区状态：检测里面是否还有空闲空间，如果有空闲空间该缓冲区对应的文件描述符就绪</li>\n<li>读取异常状态：检测是否发生异常，比如网络异常、文件异常等，如果发生异常该缓冲区对应的文件描述符就绪</li>\n</ul>\n<p>委托检测的文件描述符遍历检测完毕之后，已就绪的这些满足的文件描述符会通过 select () 的参数分为 3 个集合传出，程序员得到这几个集合依次分情况依次处理即可。</p>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    time_t tv_sec<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 秒 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    suseconds_t tv_usec<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 微秒 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writefds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>exceptfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>nfds</code> ：需要检测的文件描述符的范围，即检测的文件描述符从 0 到 <code>nfds-1</code> ， <code>nfds</code>  的值通常为待检测的<em>最大文件描述符</em>加 1。(内核允许最大一般是 1024)\n<ul>\n<li>内核需要线程遍历这些集合中的文件描述符，这个值是循环结束的条件。</li>\n<li>在 windows 中，该参数是无效的，指定为 - 1 即可。</li>\n</ul>\n</li>\n<li><code>readfds</code> ：需要检测读状态的文件描述符集合，即检测这些文件描述符对应的读缓冲区状态。\n<ul>\n<li><code>传入传出参数</code> ，读集合一般情况下是需要检测的，这样测能直到通过哪些文件描述符接收数据。</li>\n</ul>\n</li>\n<li><code>writefds</code> ：需要检测写状态的文件描述符集合，即检测这些文件描述符对应的写缓冲区状态。\n<ul>\n<li><code>传入传出参数</code> ，如果不需要使用该参数可以指定为 NULL。</li>\n</ul>\n</li>\n<li><code>exceptfds</code> ：需要检测异常状态的文件描述符集合，即检测这些文件描述符对应的异常状态。\n<ul>\n<li><code>传入传出参数</code> ，如果不需要使用该参数可以指定为 NULL。</li>\n</ul>\n</li>\n<li><code>timeout</code> ：超时时间，即检测文件描述符状态的超时时间。</li>\n<li>函数返回值：\n<ul>\n<li>大于 <code>0</code> ：成功，返回集合中已就绪的文件描述符的个数。</li>\n<li>等于 <code>-1</code> ：则表示出错。</li>\n<li>等于 <code>0</code> ：则表示超时。</li>\n</ul>\n</li>\n</ul>\n<p><img loading=\"lazy\" src=\"/images/ioduolu.webp\" alt=\"\"></p>\n<p>另外初始化 <code>fd_set</code>  类型的参数还需要使用相关的一些列操作函数，具体如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span>fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的所有文件描述符对应的标志位都设置为 0，表示集合中没有文件描述符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的 fd 文件描述符对应的标志位设置为 1，表示集合中有该文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的 fd 文件描述符对应的标志位设置为 0，表示集合中没有该文件描述符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断 set 集合中的 fd 文件描述符对应的标志位是否为 1，如果为 1 则表示集合中有该文件描述符，否则表示集合中没有该文件描述符</span></pre></td></tr></table></figure><h1 id=\"poll\"><a class=\"markdownIt-Anchor\" href=\"#poll\">#</a> poll</h1>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 文件描述符 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">short</span> events<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 监控的事件 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">short</span> revents<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 实际发生的事件 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token operator\">*</span>fds<span class=\"token punctuation\">,</span> nfds_t nfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>fds</code> ：需要检测的文件描述符集合，即检测这些文件描述符对应的读缓冲区状态、写缓冲区状态、异常状态。\n<ul>\n<li><code>传入传出参数</code> ，读集合一般情况下是需要检测的，这样测能直到通过哪些文件描述符接收数据。</li>\n<li><code>pollfd</code>  结构体数组，每个 <code>pollfd</code>  结构体表示一个文件描述符的检测信息，包括文件描述符、检测的事件、实际发生的事件。</li>\n</ul>\n</li>\n<li><code>nfds</code> ：需要检测的文件描述符的个数，即检测的文件描述符从 0 到 <code>nfds-1</code> ， <code>nfds</code>  的值通常为待检测的<em>最大文件描述符</em>加 1。\n<ul>\n<li>内核需要线程遍历这些集合中的文件描述符，这个值是循环结束的条件。</li>\n</ul>\n</li>\n<li><code>timeout</code> ：超时时间，即检测文件描述符状态的超时时间。</li>\n<li>函数返回值：\n<ul>\n<li>大于 <code>0</code> ：成功，返回集合中已就绪的文件描述符的个数。</li>\n<li>等于 <code>-1</code> ：则表示出错。</li>\n<li>等于 <code>0</code> ：则表示超时。</li>\n</ul>\n</li>\n</ul>\n<p>创建监听的套接字 lfd = socket ();<br>\n 将监听的套接字和本地的 IP 和端口绑定 bind ()<br>\n 给监听的套接字设置监听 listen ()<br>\n 创建一个文件描述符集合 fd_set，用于存储需要检测读事件的所有的文件描述符<br>\n通过 FD_ZERO () 初始化<br>\n通过 FD_SET () 将监听的文件描述符放入检测的读集合中<br>\n循环调用 select ()，周期性的对所有的文件描述符进行检测<br>\n select () 解除阻塞返回，得到内核传出的满足条件的就绪的文件描述符集合<br>\n通过 FD_ISSET () 判断集合中的标志位是否为 1<br>\n 如果这个文件描述符是监听的文件描述符，调用 accept () 和客户端建立连接<br>\n将得到的新的通信的文件描述符，通过 FD_SET () 放入到检测集合中<br>\n如果这个文件描述符是通信的文件描述符，调用通信函数和客户端通信<br>\n如果客户端和服务器断开了连接，使用 FD_CLR () 将这个文件描述符从检测集合中删除<br>\n如果没有断开连接，正常通信即可</p>\n<p><strong>服务端并发实现：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IPV4, TCP, 默认协议</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定 IP 和端口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> saddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 IPV4</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 端口</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0=0.0.0.0 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saddr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>saddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置监听</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    fd_set redset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> maxfd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        fd_set temp <span class=\"token operator\">=</span> redset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>maxfd <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 判断是不是监听 fd</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 接受客户端的连接</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span> redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            maxfd <span class=\"token operator\">=</span> cfd <span class=\"token operator\">></span> maxfd <span class=\"token operator\">?</span>cfd<span class=\"token operator\">:</span>maxfd <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> maxfd<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>fd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client say : %s\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开连接。。\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 关闭文件描述符</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>select 与 poll 的并发性能比较：</p>\n<ul>\n<li><code>select</code>  函数的 <code>fd_set</code>  类型参数，在每次调用 <code>select</code>  函数时，都需要重新设置，而 <code>poll</code>  函数的 <code>pollfd</code>  类型参数，只需要在第一次调用 <code>poll</code>  函数时设置一次，之后每次调用 <code>poll</code>  函数时，只需要修改需要检测的文件描述符的 <code>pollfd</code>  结构体即可。</li>\n</ul>\n",
            "tags": [
                "I/O多路复用"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/06/15/C++/2024-6-15-Socket/",
            "url": "https://zhang3399.github.io/2024/06/15/C++/2024-6-15-Socket/",
            "title": "Socket",
            "date_published": "2024-06-15T02:00:00.000Z",
            "content_html": "<blockquote>\n<p>Socket 是网络编程的一个抽象概念，它是对 <code>TCP/IP</code>  协议的封装，提供了一组接口，使得程序员可以更方便地使用网络功能。</p>\n</blockquote>\n<h1 id=\"socket的原理\"><a class=\"markdownIt-Anchor\" href=\"#socket的原理\">#</a> Socket 的原理</h1>\n<p><code>Socket</code>  的原理是基于 <code>TCP/IP</code>  协议的，它通过 <code>TCP/IP</code>  协议来传输数据。 <code>TCP/IP</code>  协议是一种网络通信协议，它定义了计算机之间如何进行通信。</p>\n<h2 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p><code>TCP</code> （Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。它提供了一种可靠的、有序的、无重复的数据传输方式。 <code>TCP</code>  协议通过三次握手建立连接，通过四次挥手断开连接。在数据传输过程中， <code>TCP</code>  协议会进行流量控制和拥塞控制，以保证数据的可靠传输。</p>\n<p><strong>三次握手：</strong></p>\n<ul>\n<li>客户端向服务器发送一个 <code>SYN</code>  包，表示请求建立连接。</li>\n<li>服务器收到 <code>SYN</code>  包后，向客户端发送一个 <code>SYN-ACK</code>  包，表示同意建立连接。</li>\n<li>客户端收到 <code>SYN-ACK</code>  包后，向服务器发送一个 ACK 包，表示确认建立连接。</li>\n</ul>\n<p><strong>四次挥手：</strong></p>\n<ul>\n<li>客户端向服务器发送一个 <code>FIN</code>  包，表示请求断开连接。</li>\n<li>服务器收到 FIN 包后，向客户端发送一个 <code>ACK</code>  包，表示确认断开连接。</li>\n<li>服务器向客户端发送一个 FIN 包，表示请求断开连接。</li>\n<li>客户端收到 <code>FIN</code>  包后，向服务器发送一个 <code>ACK</code>  包，表示确认断开连接。</li>\n</ul>\n<p><img loading=\"lazy\" src=\"/images/tcp.webp\" alt=\"\"></p>\n<h1 id=\"socket的使用\"><a class=\"markdownIt-Anchor\" href=\"#socket的使用\">#</a> Socket 的使用</h1>\n<h2 id=\"服务器端通信流程\"><a class=\"markdownIt-Anchor\" href=\"#服务器端通信流程\">#</a> 服务器端通信流程</h2>\n<ol>\n<li>创建用于监听的套接字，这个套接字是一个文件描述符:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span> AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>socket</code>  接受三个参数，分别是 <code>地址族</code> 、 <code>套接字类型</code> 和 <code>协议类型</code> 。<br>\n <code>AF_INET</code>  表示使用 <code>IPv4</code>  协议， <code>SOCK_STREAM</code>  表示使用 <code>TCP</code>  协议， <code>0</code>  表示使用默认协议。</p>\n<ol start=\"2\">\n<li>绑定套接字到指定的 IP 地址和端口号:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用本地 IP 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用指定的端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>bind</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>地址结构体</code> 和 <code>地址结构体</code> 的大小。</p>\n<ol start=\"3\">\n<li>监听套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>listen 接受两个参数，分别是 <code>套接字描述符</code> 和 <code>监听队列的长度</code> 。</p>\n<ol start=\"4\">\n<li>接受客户端连接:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cli_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>socklen_t cli_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cli_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cli_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cli_len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>accept</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>客户端地址结构体</code> 和 <code>客户端地址结构体</code> 的大小。</p>\n<ol start=\"5\">\n<li>读取客户端发送的数据:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>read</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>缓冲区</code> 和 <code>缓冲区大小</code> 。</p>\n<ol start=\"6\">\n<li>发送数据给客户端:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>write</code>  接受三个参数，分别是 <code>套接字描述符</code> 、 <code>数据</code> 和 <code>数据大小</code> 。</p>\n<ol start=\"7\">\n<li>关闭套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span> lfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭监听套接字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span> cfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭客户端套接字</span></pre></td></tr></table></figure><p><code>close</code>  接受一个参数，即 <code>套接字描述符</code> 。</p>\n<p>服务端程序的完整代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建用于监听的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定套接字到指定的 IP 地址和端口号</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 3. 监听套接字</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 4. 接受客户端连接</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cli_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    socklen_t cli_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cli_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cli_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cli_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 5. 读取客户端发送的数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv buf: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 6. 发送数据给客户端</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 7. 关闭套接字</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"客户端通信流程\"><a class=\"markdownIt-Anchor\" href=\"#客户端通信流程\">#</a> 客户端通信流程</h2>\n<ol>\n<li>创建用于连接的套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span> AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>连接服务器:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用服务器的 IP 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用指定的端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>发送数据给服务器:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>读取服务器发送的数据:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span> cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>关闭套接字:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span> cfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>客户端程序的完整代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建用于连接的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 连接服务器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 3. 发送数据给服务器</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 4. 读取服务器发送的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv buf: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 5. 关闭套接字</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Socket"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/06/08/C++/2024-6-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "https://zhang3399.github.io/2024/06/08/C++/2024-6-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "数据处理及内存管理",
            "date_published": "2024-06-08T02:00:00.000Z",
            "content_html": "<h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h2 id=\"线程池\"><a class=\"markdownIt-Anchor\" href=\"#线程池\">#</a> 线程池</h2>\n<p><strong>函数指针在线程池中的应用</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义任务结构体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 线程池中的工作线程执行任务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">worker_thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span><span class=\"token operator\">*</span> task <span class=\"token operator\">=</span> <span class=\"token function\">get_task_from_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        task<span class=\"token operator\">-></span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行具体任务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>**​灵活性：** 可以动态添加不同类型的任务（如网络请求、文件操作、计算任务）。</li>\n<li><strong>​解耦：</strong> 线程池代码无需知道任务具体内容，只需调用  <code>function(arg)</code> 。</li>\n</ul>\n",
            "tags": [
                "多线程"
            ]
        },
        {
            "id": "https://zhang3399.github.io/2024/06/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2024-6-15-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://zhang3399.github.io/2024/06/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2024-6-15-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "数据处理及内存管理",
            "date_published": "2024-06-08T02:00:00.000Z",
            "content_html": "<h1 id=\"数据处理\"><a class=\"markdownIt-Anchor\" href=\"#数据处理\">#</a> 数据处理</h1>\n<h2 id=\"大小端转换\"><a class=\"markdownIt-Anchor\" href=\"#大小端转换\">#</a> 大小端转换</h2>\n<blockquote>\n<p>大端和小端是指字节序的存储方式，大端是指高位字节存储在低地址，小端是指低位字节存储在低地址。</p>\n</blockquote>\n<ol>\n<li>基本定义与存储方式<br>\n<strong>大端模式</strong>\n<ul>\n<li>高位字节存放在低地址上，低位字节存放在高地址上。</li>\n<li><code>0x12345678</code>  在内存中的存储方式为： <code>低地址--&gt; 0x12 0x34 0x56 0x78 --&gt;高地址</code> <br>\n<strong>小端模式</strong></li>\n<li>高位字节存放在高地址上，低位字节存放在低地址上。</li>\n<li><code>0x12345678</code>  在内存中的存储方式为：  <code>低地址--&gt;  0x78 0x56 0x34 0x12  --&gt;高地址</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>直观对比​（以 <code>0x1234</code>  为例）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>内存地址</th>\n<th>大端模式</th>\n<th>小端模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x4000</td>\n<td>0x12</td>\n<td>0x34</td>\n</tr>\n<tr>\n<td>0x4001</td>\n<td>0x34</td>\n<td>0x12</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>设计原因与应用场景</li>\n</ol>\n<p><strong>为何存在两种模式？</strong></p>\n<ul>\n<li><strong>硬件差异：</strong> 不同处理器架构对多字节数据的处理逻辑不同。例如，x86 架构（如 Intel/AMD CPU）采用小端模式，而 PowerPC、MIPS 等处理器多采用大端模式。</li>\n<li><strong>​效率考量：</strong> 小端模式在强制类型转换时无需调整字节顺序（直接截取低地址数据即可），而大端模式便于快速判断符号位（符号位位于低地址）</li>\n</ul>\n<p><strong>应用场景</strong></p>\n<ol>\n<li>\n<p><strong>网络通信</strong></p>\n<ul>\n<li><strong>网络传输：</strong> TCP/IP 协议规定数据传输采用大端模式 (网络字节序)，因此小端设备需通过 <code>htonl()</code>  等函数转换字节序传输。</li>\n<li>例如，发送 <code>0x12345678</code>  时，小端设备需先转换为大端模式 <code>0x78563412</code>  再传输，接收后需转回小端。</li>\n</ul>\n</li>\n<li>\n<p><strong>跨平台开发</strong></p>\n<ul>\n<li>文件存储（如二进制文件）需明确字节序，否则不同平台读取时可能出错。</li>\n<li>例如，嵌入式设备与服务器通信时需统一字节序。</li>\n</ul>\n</li>\n<li>\n<p><strong>判断当前系统的字节序</strong><br>\n可通过以下方法检测当前系统是大端还是小端：</p>\n</li>\n</ol>\n<ul>\n<li>** 联合体法：** 利用联合体的内存共享特性读取多字节数据的首字节。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isLittleEndian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">uint32_t</span> i<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">uint8_t</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x01020304</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> test<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为小端，则首字节为 0x04</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>** 宏定义法：** 利用宏定义计算多字节数据的值。<br>\n使用__BYTE_ORDER 宏（Linux/Unix）或 std::endian::native（C++20）直接判断</li>\n</ul>\n<ol start=\"4\">\n<li><strong>字节序转换函数</strong>\n<ul>\n<li><strong>大端转小端：</strong>\n<ul>\n<li><code>uint16_t ntohs(uint16_t netshort);</code> ：将 16 位无符号整数从网络字节序转换为主机字节序。(windows 下为 <code>htons</code> )</li>\n<li><code>uint32_t ntohl(uint32_t netlong);</code> ：将 32 位无符号整数从网络字节序转换为主机字节序。(windows 下为 <code>htonl</code> )</li>\n</ul>\n</li>\n<li><strong>小端转大端：</strong>\n<ul>\n<li><code>uint16_t htons(uint16_t hostshort);</code> ：将 16 位无符号整数从主机字节序转换到网络字节序。(windows 下为 <code>ntohs</code> )</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"野指针\"><a class=\"markdownIt-Anchor\" href=\"#野指针\">#</a> 野指针</h1>\n<blockquote>\n<p>指向无效内存地址（如未初始化、已释放或越界的内存）的指针，访问时可能导致程序崩溃或数据损坏</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//p 未初始化，指向随机地址（野指针）</span></pre></td></tr></table></figure><p><strong>野指针的常见成因:</strong></p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​未初始化指针</td>\n<td>指针变量未赋初值，默认指向随机内存区域</td>\n<td><code>int* p</code>  ;（未初始化为 NULL 或有效地址）</td>\n</tr>\n<tr>\n<td>​释放后未置空</td>\n<td><code>free</code>  或  <code>delete</code>  后未将指针设为  <code>NULL</code> ，仍指向已释放内存</td>\n<td><code>free(p)</code>  ; 后未执行  <code>p = NULL</code> ;</td>\n</tr>\n<tr>\n<td>​越界访问</td>\n<td>指针操作超出变量作用域（如返回局部变量地址）</td>\n<td>函数返回栈内存指针导致后续访问失效</td>\n</tr>\n</tbody>\n</table>\n<p><strong>规避野指针的最佳实践</strong></p>\n<ol>\n<li>初始化与置空\n<ul>\n<li>** 初始化：** 在声明指针时立即赋初值，避免指向随机内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化为 NULL</span></pre></td></tr></table></figure><ul>\n<li>** 置空：** 释放内存后立即将指针置为  <code>NULL</code> ，防止重复释放或访问已释放内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>作用域与生命周期管理\n<ul>\n<li><strong>作用域：</strong> 确保指针操作在变量有效作用域内，避免返回局部变量地址。</li>\n<li><strong>边界检查：</strong> 访问数组元素时进行边界检查，防止越界访问。</li>\n<li><strong>智能指针：</strong> 使用智能指针（如  <code>std::unique_ptr</code> 、 <code>std::shared_ptr</code> ）自动管理内存，避免手动释放内存带来的问题。</li>\n</ul>\n</li>\n<li>多线程环境下的防御措施\n<ul>\n<li><strong>隔离线程数据：</strong> 通过动态分配或线程局部存储（thread_local）为每个线程提供独立数据副本，避免数据竞争。</li>\n<li><strong>互斥锁：</strong> 在多线程访问共享数据时使用互斥锁（mutex）保护，防止并发访问导致的问题。</li>\n<li><strong>原子操作：</strong> 使用原子操作（atomic）确保对共享数据的访问是线程安全的。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"拷贝构造与运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造与运算符重载\">#</a> 拷贝构造与运算符重载</h1>\n<blockquote>\n<p>拷贝构造函数和赋值运算符重载是 C++ 中用于对象复制的两种机制，它们在对象创建和赋值时非常重要。</p>\n</blockquote>\n<h2 id=\"拷贝构造函数\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数\">#</a> 拷贝构造函数</h2>\n<p><strong>拷贝构造函数</strong>是一种特殊的构造函数，用于创建一个新对象，并将另一个对象的值复制到新对象中。它的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ClassName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ClassName<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>ClassName</code>  是类名， <code>other</code>  是另一个对象，类型为 <code>ClassName</code>  的引用。</p>\n<p><strong>拷贝构造函数的用途：</strong></p>\n<ol>\n<li><strong>对象初始化：</strong> 当使用一个已存在的对象来初始化另一个对象时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ClassName obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>函数参数传递：</strong> 当将一个对象作为函数参数传递时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ClassName obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>函数返回值：</strong> 当一个函数返回一个对象时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ClassName obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"赋值运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符重载\">#</a> 赋值运算符重载</h2>\n<p><strong>赋值运算符重载</strong>是一种运算符重载，用于将一个对象的值赋给另一个对象。它的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ClassName<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>ClassName</code>  是类名， <code>other</code>  是另一个对象，类型为 <code>ClassName</code>  的引用。</p>\n<p><strong>赋值运算符重载的用途：</strong></p>\n<ol>\n<li><strong>对象赋值：</strong> 当使用一个已存在的对象来赋值给另一个对象时，赋值运算符重载会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ClassName obj2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用赋值运算符重载</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>函数返回值：</strong> 当一个函数返回一个对象时，赋值运算符重载会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ClassName obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用赋值运算符重载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数与赋值运算符重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的区别\">#</a> 拷贝构造函数与赋值运算符重载的区别</h2>\n<ol>\n<li>\n<p><strong>调用时机：</strong></p>\n<ul>\n<li>拷贝构造函数在对象创建时调用，用于初始化新对象。   - 赋值运算符重载在对象赋值时调用，用于将一个对象的值赋给另一个对象。</li>\n<li>例如，当使用一个已存在的对象来初始化另一个对象时，会调用拷贝构造函数；当使用一个已存在的对象来赋值给另一个对象时，会调用赋值运算符重载。</li>\n</ul>\n</li>\n<li>\n<p><strong>参数类型：</strong></p>\n<ul>\n<li>拷贝构造函数的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。   - 赋值运算符重载的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。</li>\n<li>例如，拷贝构造函数的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象；赋值运算符重载的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。</li>\n</ul>\n</li>\n<li>\n<p><strong>返回值类型：</strong></p>\n<ul>\n<li>拷贝构造函数的返回值类型为 <code>ClassName</code> ，表示返回新对象。   - 赋值运算符重载的返回值类型为 <code>ClassName&amp;</code> ，表示返回对象的引用。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"拷贝构造函数与赋值运算符重载的示例\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的示例\">#</a> 拷贝构造函数与赋值运算符重载的示例</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 赋值运算符重载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数与赋值运算符重载的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的最佳实践\">#</a> 拷贝构造函数与赋值运算符重载的最佳实践</h2>\n<ol>\n<li><strong>避免浅拷贝：</strong> 在拷贝构造函数和赋值运算符重载中，应避免浅拷贝，即直接复制指针而不是复制指针指向的内容。如果需要复制指针指向的内容，可以使用深拷贝。</li>\n<li><strong>避免循环引用：</strong> 在拷贝构造函数和赋值运算符重载中，应避免循环引用，即两个对象相互引用对方。如果需要相互引用，可以使用智能指针（如 <code>std::shared_ptr</code> ）来管理对象的生命周期。</li>\n<li><strong>避免内存泄漏：</strong> 在拷贝构造函数和赋值运算符重载中，应避免内存泄漏，即释放内存后未将指针置为 <code>NULL</code> 。如果需要释放内存，应将指针置为 <code>NULL</code> 。</li>\n<li><strong>避免异常安全：</strong> 在拷贝构造函数和赋值运算符重载中，应确保异常安全，即当异常发生时，对象的状态应保持不变。可以使用 RAII（Resource Acquisition Is Initialization）模式来确保资源正确释放。</li>\n<li><strong>避免未定义行为：</strong> 在拷贝构造函数和赋值运算符重载中，应避免未定义行为，即访问未初始化的指针或释放已释放的内存。可以使用断言（assert）来检测指针是否为 <code>NULL</code> ，或使用智能指针来管理内存。</li>\n<li><strong>避免性能问题：</strong> 在拷贝构造函数和赋值运算符重载中，应避免性能问题，即复制大量数据或进行复杂的操作。可以使用移动语义（move semantics）来优化性能。</li>\n<li><strong>避免代码重复：</strong> 在拷贝构造函数和赋值运算符重载中，应避免代码重复，即重复编写相同的代码。可以使用模板函数或模板类来减少代码重复。</li>\n</ol>\n<h1 id=\"浅拷贝与深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝与深拷贝\">#</a> 浅拷贝与深拷贝</h1>\n<h2 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h2>\n<blockquote>\n<p>仅复制对象的顶层结构（如指针或引用），底层数据仍共享同一内存地址。修改拷贝后的对象会影响原对象</p>\n</blockquote>\n<p><strong>场景</strong></p>\n<ul>\n<li>默认拷贝构造函数：C++ 中类未重写拷贝构造函数时，默认进行浅拷贝。</li>\n<li>​数组 / 结构体赋值：直接复制数组或结构体时，引用类型成员共享地址</li>\n</ul>\n<p><strong>风险</strong></p>\n<ul>\n<li>**​数据竞争：** 多线程环境下共享数据可能引发不一致问题。</li>\n<li>**​双重释放：** 若共享内存被多次释放，可能导致内存泄漏或崩溃</li>\n</ul>\n<p>浅拷贝的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 浅拷贝构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 浅拷贝赋值运算符重载</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            ptr <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h2>\n<blockquote>\n<p>复制对象的顶层结构及底层数据，确保拷贝后的对象与原对象完全独立。修改拷贝后的对象不会影响原对象</p>\n</blockquote>\n<p><strong>实现方式</strong></p>\n<ul>\n<li><strong>手动递归复制：</strong> 对于复杂对象，手动递归复制每个成员变量。</li>\n<li><strong>拷贝构造函数：</strong> 重载拷贝构造函数，实现深拷贝。</li>\n<li><strong>赋值运算符重载：</strong> 重载赋值运算符重载，实现深拷贝。</li>\n</ul>\n<p><strong>优势</strong></p>\n<ul>\n<li><strong>数据独立：</strong> 拷贝后的对象与原对象完全独立，修改一个对象不影响另一个对象。</li>\n<li><strong>内存安全：</strong> 避免数据竞争和双重释放问题，确保内存安全。</li>\n</ul>\n<p><strong>劣势</strong></p>\n<ul>\n<li><strong>性能开销：</strong> 深拷贝需要复制大量数据，可能导致性能开销。</li>\n</ul>\n<p>深拷贝的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 深拷贝构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 深拷贝赋值运算符重载</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放原指针指向的内存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分配新内存并复制数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"浅拷贝与深拷贝的区别\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝与深拷贝的区别\">#</a> 浅拷贝与深拷贝的区别</h2>\n<p>| 特性  | 浅拷贝  | 深拷贝   |</p>\n<p>| :---- | :----- | :------ |</p>\n<p>| 复制方式 | 复制顶层结构，共享底层数据 | 复制顶层结构及底层数据，独立内存 |</p>\n<p>| 修改影响 | 修改拷贝后的对象会影响原对象 | 修改拷贝后的对象不影响原对象 |</p>\n<p>| 内存管理 | 共享内存，可能导致数据竞争或内存泄漏 | 独立内存，内存安全 |</p>\n<p>| 性能开销 | 较低，直接复制指针 | 较高，需要复制大量数据 |</p>\n",
            "tags": [
                "数据结构"
            ]
        }
    ]
}