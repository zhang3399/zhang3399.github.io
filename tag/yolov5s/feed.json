{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"yolov5s\" tag",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2025/03/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-3-9-%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2YOLOv5s/",
            "url": "https://zhang3399.github.io/2025/03/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2025-3-9-%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2YOLOv5s/",
            "title": "树莓派部署YOLOv5s",
            "date_published": "2025-03-09T15:07:00.000Z",
            "content_html": "<blockquote>\n<p>​<strong>环境配置方式</strong>：🚀 整个过程采用远程的方式，记录树莓派部署 <code>YOLOv5s</code>  的过程。</p>\n</blockquote>\n<p>准备：</p>\n<ul>\n<li>树莓派 5-4B</li>\n<li>树莓派系统（安装的官方 64 位系统）</li>\n<li>USB 摄像头</li>\n</ul>\n<hr>\n<h1 id=\"获取yolov5spt权值文件\"><a class=\"markdownIt-Anchor\" href=\"#获取yolov5spt权值文件\">#</a> 获取 yolov5s.pt 权值文件</h1>\n<p>使用的是轻量的 <code>yolov5s</code>  模型，在本地训练后，通过命令发送发到树莓派上:</p>\n<ol>\n<li>首先查看树莓派地址：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ifconfig</span>  <span class=\"token comment\"># 查看地址</span></pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/13.webp\" alt=\"\"><br>\n连接的 wify，可以看到所属的地址端口。</p>\n<ol start=\"2\">\n<li>将本地训练好的 <code>yolov5s.pt</code>  权值文件发送到树莓派上：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> yolov5s.pt <span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">></span>@<span class=\"token operator\">&lt;</span>树莓派地址<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>保存文件地址<span class=\"token operator\">></span></pre></td></tr></table></figure><hr>\n<h1 id=\"树莓派环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#树莓派环境搭建\">#</a> 树莓派环境搭建</h1>\n<p>本打算参考其他博主的方法，将 <code>pt</code>  权值文件转为 <code>ONNX</code>  再利用 <code>OpenVINO</code>  转为 IR 模型部署到树莓派上。</p>\n<p>在本地成功得到 <code>IR</code>  模型后，树莓派配置 <code>OpenVINO</code>  环境加速推理时，遇到问题有点多😤，准备有空再进行尝试。</p>\n<p>树莓派中运行 yolov5s 的环境使用 <code>Anaconda</code>  配置和管理，步骤如下：</p>\n<ul>\n<li>安装 Anaconda</li>\n<li>创建虚拟环境</li>\n<li>下载 yolov5 源码</li>\n<li>安装依赖库</li>\n</ul>\n<ol>\n<li>安装 Anaconda🌱<br>\n下载并安装 Anaconda 以管理 Python 环境，分别在终端执行：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">bash</span> Anaconda3-2021.05-Linux-x86_64.sh</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建虚拟环境并安装 YOLOv5 🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create <span class=\"token parameter variable\">-n</span> yolov5 <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.9</span> <span class=\"token parameter variable\">-y</span>                <span class=\"token comment\"># 创建名为 yolov5 的虚拟环境，并指定 Python 版本为 3.9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    conda activate yolov5                               <span class=\"token comment\"># 激活虚拟环境</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">git</span> clone https://github.com/ultralytics/yolov5.git <span class=\"token comment\"># 克隆 YOLOv5 源码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">cd</span> yolov5</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt                     <span class=\"token comment\"># 安装 YOLOv5 所需的依赖库</span></pre></td></tr></table></figure><hr>\n<h1 id=\"检测图片\"><a class=\"markdownIt-Anchor\" href=\"#检测图片\">#</a> 检测图片</h1>\n<ol>\n<li>运行程序🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python detect.py <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token parameter variable\">--weights</span> yolov5s.pt <span class=\"token punctuation\">\\</span>   <span class=\"token comment\"># 没有准备可省略该行，自动下载官方权值文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token parameter variable\">--img</span> <span class=\"token number\">320</span> <span class=\"token punctuation\">\\</span>              <span class=\"token comment\"># 指定图片大小，压缩图片，加快检测速度，但是清晰度降低</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token parameter variable\">--source</span> /image/1.jpg <span class=\"token punctuation\">\\</span>  <span class=\"token comment\"># 指定图片路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token parameter variable\">--device</span> cpu <span class=\"token punctuation\">\\</span>           <span class=\"token comment\"># 使用 cpu 进行推理</span></pre></td></tr></table></figure><p>使用的 cpu 进行推理，速度较慢，看资料显示树莓派也是有 GPU 的，但是因为树莓派 GPU 的算力太低，所以还是使用 cpu 进行推理，如果想使用 GPU 进行推理，需要安装 <code>CUDA</code> ，而且树莓派安装 <code>CUDA</code>  比较麻烦。</p>\n<ol start=\"2\">\n<li>检测效果如下🌱：</li>\n</ol>\n<p><img loading=\"lazy\" src=\"/images/12.webp\" alt=\"\"></p>\n<hr>\n<h1 id=\"开启摄像头实时检测\"><a class=\"markdownIt-Anchor\" href=\"#开启摄像头实时检测\">#</a> 开启摄像头实时检测</h1>\n<p>🍋检测视频流，遇到无法弹出实时检测界面，这让之前的工作毫无成就感😳，之后通过安装 <code>lightdm</code>  来解决的。</p>\n<p><code>lightdm</code>  能够提供图形界面服务，使  <code>OpenCV</code>   <code>cv2.imshow()</code>  能通过  <code>VNC</code>  的虚拟显示端口渲染窗口。</p>\n<ol>\n<li>安装 <code>lightdm</code> 🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> lightdm                <span class=\"token comment\"># 安装图形界面管理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">sudo</span> dpkg-reconfigure lightdm          <span class=\"token comment\"># 绑定显示服务到 VNC</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">sudo</span> systemctl restart lightdm          <span class=\"token comment\"># 重启服务使配置生效</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>查看摄像头🌱<br>\n使用 <code>v4l2-ctl</code>  指令查看所有视频设备</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v4l2-ctl --list-devices</pre></td></tr></table></figure><p><img loading=\"lazy\" src=\"/images/11.webp\" alt=\"\"></p>\n<p>可以看到识别到的 USB 摄像头 <code>/dev/video0</code> 、 <code>/dev/video1</code> ，使用 <code>0</code>  作为 <code>source</code>  参数。</p>\n<ol start=\"3\">\n<li>运行程序🌱</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python detect.py <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token parameter variable\">--weights</span> yolov5s.pt <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token parameter variable\">--source</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span>             <span class=\"token comment\"># 使用摄像头（0 表示第一个摄像头）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    --view-img <span class=\"token punctuation\">\\</span>             <span class=\"token comment\"># 启用实时画面显示 --img-size 320</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token parameter variable\">--device</span> cpu</pre></td></tr></table></figure><ol start=\"4\">\n<li>检测效果如下🌱：</li>\n</ol>\n<video width=\"100%\" controls loading=\"lazy\">\n  <source src=\"/videos/2.mp4\" type=\"video/mp4\">\n</video>\n<p>🍀由于树莓派不支持 GPU，所以速度并不快，下面尝试使用 <code>OpenCV</code>  的 <code>dnn</code>  模块进行推理，将模型转为 <code>ONNX</code>  格式，再使用 <code>OpenCV</code>  进行推理，速度会快很多。</p>\n<h1 id=\"onnx推理c\"><a class=\"markdownIt-Anchor\" href=\"#onnx推理c\">#</a> onnx 推理（C++）</h1>\n<h2 id=\"安装opencv\"><a class=\"markdownIt-Anchor\" href=\"#安装opencv\">#</a> 安装 Opencv</h2>\n<p><strong>安装 Opencv 参考链接：</strong><a href=\"https://blog.csdn.net/weixin_53877178/article/details/127938403\">安装 OpenCV</a></p>\n<h2 id=\"获取yolov5spt权值文件-2\"><a class=\"markdownIt-Anchor\" href=\"#获取yolov5spt权值文件-2\">#</a> 获取 yolov5s.pt 权值文件</h2>\n<p>将 <code>yolov5s.pt</code>  权值文件转为 <code>ONNX</code>  格式，并导出为 <code>best.onnx</code>  权值文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python export.py <span class=\"token parameter variable\">--weights</span> weights/best.pt <span class=\"token parameter variable\">--include</span> onnx</pre></td></tr></table></figure><h2 id=\"编写推理代码\"><a class=\"markdownIt-Anchor\" href=\"#编写推理代码\">#</a> 编写推理代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/dnn.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span>  <span class=\"token comment\">// 添加时间测量头文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"defective_insulator\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"broken_defect\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"good_insulator\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"flashover_defect\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 1. 输入图片路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"images/insulator.jpg\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入图片路径</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Mat frame <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: Could not read the image.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 2. 加载模型</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Net net <span class=\"token operator\">=</span>  cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">readNetFromONNX</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weights/ZJ/best.onnx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tnet<span class=\"token punctuation\">.</span><span class=\"token function\">setPreferableBackend</span><span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token double-colon punctuation\">::</span>DNN_BACKEND_OPENCV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tnet<span class=\"token punctuation\">.</span><span class=\"token function\">setPreferableTarget</span><span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span>dnn<span class=\"token double-colon punctuation\">::</span>DNN_TARGET_OPENCL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 打印模型信息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// std::cout &lt;&lt; \"Network layers:\" &lt;&lt; std::endl;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// for (int i = 0; i &lt; net.getLayerNames().size(); i++) &#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//     std::cout &lt;&lt; net.getLayerNames()[i] &lt;&lt; std::endl;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: Could not load the neural network.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 3. 预处理参数设置</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> input_width <span class=\"token operator\">=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> input_height <span class=\"token operator\">=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">float</span> x_factor <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>cols <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>input_width<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 修改为动态计算</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">float</span> y_factor <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>rows <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>input_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 预处理计时</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">auto</span> preprocess_start <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 4. 图像预处理（增加 letterbox 处理）</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Mat resized<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">int</span> new_width<span class=\"token punctuation\">,</span> new_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>cols <span class=\"token operator\">></span> frame<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        new_width <span class=\"token operator\">=</span> input_width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        new_height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>rows <span class=\"token operator\">*</span> input_width <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>frame<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        new_height <span class=\"token operator\">=</span> input_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        new_width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>cols <span class=\"token operator\">*</span> input_height <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>frame<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> resized<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span>new_width<span class=\"token punctuation\">,</span> new_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    Mat blob <span class=\"token operator\">=</span> <span class=\"token function\">blobFromImage</span><span class=\"token punctuation\">(</span>resized<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">255.0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span>input_width<span class=\"token punctuation\">,</span> input_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">//blob.convertTo (blob, CV_16F);  // 半精度计算</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 预处理计时结束</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">auto</span> preprocess_end <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 推理计时</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">auto</span> inference_start <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token function\">setInput</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 5. 推理后处理</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tcv<span class=\"token double-colon punctuation\">::</span>Mat preds <span class=\"token operator\">=</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 推理计时结束</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">auto</span> inference_end <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 后处理计时</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">auto</span> postprocess_start <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> class_ids<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> confidences<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Rect<span class=\"token operator\">></span> boxes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rows: \"</span><span class=\"token operator\">&lt;&lt;</span> preds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" data: \"</span> <span class=\"token operator\">&lt;&lt;</span> preds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// cv::Mat det_output(preds.size[1], preds.size[2], CV_32F, preds.ptr&lt;float>());</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tcv<span class=\"token double-colon punctuation\">::</span>Mat det_output <span class=\"token operator\">=</span> preds<span class=\"token punctuation\">.</span><span class=\"token function\">reshape</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免内存复制</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">//In a typical YOLO output, the format is [x_center, y_center, width, height, object_confidence, class_score1, class_score2, ..., class_scoreN] for each bounding box. </span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> det_output<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> confidence <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tcv<span class=\"token double-colon punctuation\">::</span>Mat class_scores <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token function\">row</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">colRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> classes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\tPoint class_id_point<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> max_class_score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token function\">minMaxLoc</span><span class=\"token punctuation\">(</span>class_scores<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max_class_score<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>class_id_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> class_id <span class=\"token operator\">=</span> class_id_point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> final_confidence <span class=\"token operator\">=</span> confidence <span class=\"token operator\">*</span> max_class_score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token comment\">// std::cout &lt;&lt; \"Final confidence: \" &lt;&lt; final_confidence &lt;&lt; std::endl;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>final_confidence <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.45</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> ow <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> oh <span class=\"token operator\">=</span> det_output<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> ow<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cy <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> oh<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ow <span class=\"token operator\">*</span> x_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>oh <span class=\"token operator\">*</span> y_factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        boxes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        confidences<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>final_confidence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        class_ids<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>class_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> indices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\tdnn<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">NMSBoxes</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> confidences<span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token comment\">// Draw the final bounding boxes</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> indices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> indices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\tRect box <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tcv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string label <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">[</span>class_ids<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>confidences<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">putText</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FONT_HERSHEY_SIMPLEX<span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">auto</span> postprocess_end <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token comment\">// 输出各阶段耗时（单位：ms）</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">float</span> preprocess_time <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>preprocess_end <span class=\"token operator\">-</span> preprocess_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">float</span> inference_time <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>inference_end <span class=\"token operator\">-</span> inference_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">float</span> postprocess_time <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>postprocess_end <span class=\"token operator\">-</span> postprocess_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 计算总耗时（单位：ms）</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">auto</span> duration <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>postprocess_end <span class=\"token operator\">-</span> preprocess_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"预处理: \"</span> <span class=\"token operator\">&lt;&lt;</span> preprocess_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"推理: \"</span> <span class=\"token operator\">&lt;&lt;</span> inference_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"后处理: \"</span> <span class=\"token operator\">&lt;&lt;</span> postprocess_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"总耗时: \"</span> <span class=\"token operator\">&lt;&lt;</span> duration <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ms\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token keyword\">float</span> fps <span class=\"token operator\">=</span> <span class=\"token number\">1000.0</span> <span class=\"token operator\">/</span> duration<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计算 FPS</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"FPS: \"</span> <span class=\"token operator\">&lt;&lt;</span> fps <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token comment\">// 6. 显示结果（取消视频循环）</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Object Detection\"</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 改为等待按键</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "YOLOv5s"
            ]
        }
    ]
}