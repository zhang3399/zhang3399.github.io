{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"i/o多路复用\" tag",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2024/08/08/C++/2024-8-8-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",
            "url": "https://zhang3399.github.io/2024/08/08/C++/2024-8-8-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",
            "title": "I/O多路复用",
            "date_published": "2024-08-08T12:00:00.000Z",
            "content_html": "<blockquote>\n<p><code>I/O多路复用</code> 是一种技术，允许一个进程同时监控多个文件描述符，并在其中任何一个文件描述符准备好进行 I/O 操作时通知进程。这种技术可以提高程序的性能和效率，特别是在需要同时处理多个网络连接或文件描述符的情况下。</p>\n</blockquote>\n<h1 id=\"select\"><a class=\"markdownIt-Anchor\" href=\"#select\">#</a> select</h1>\n<p>函数原型：使用 <code>select</code>  这种 <code>IO</code>  多路转接方式需要调用一个同名函数 <code>select</code> ，这个函数是跨平台的， <code>Linux</code> 、 <code>Windows</code> 、 <code>MacOS</code>  等操作系统都是支持的。该函数可以委托内核帮助我们检测若干个文件描述符的状态，其实就是检测这些文件描述符对应的读写缓冲区的状态。</p>\n<ul>\n<li>读缓冲区状态：检测里面是否有数据，如果有数据该缓冲区对应的文件描述符就绪</li>\n<li>写缓冲区状态：检测里面是否还有空闲空间，如果有空闲空间该缓冲区对应的文件描述符就绪</li>\n<li>读取异常状态：检测是否发生异常，比如网络异常、文件异常等，如果发生异常该缓冲区对应的文件描述符就绪</li>\n</ul>\n<p>委托检测的文件描述符遍历检测完毕之后，已就绪的这些满足的文件描述符会通过 select () 的参数分为 3 个集合传出，程序员得到这几个集合依次分情况依次处理即可。</p>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    time_t tv_sec<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 秒 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    suseconds_t tv_usec<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 微秒 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writefds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>exceptfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>nfds</code> ：需要检测的文件描述符的范围，即检测的文件描述符从 0 到 <code>nfds-1</code> ， <code>nfds</code>  的值通常为待检测的<em>最大文件描述符</em>加 1。(内核允许最大一般是 1024)\n<ul>\n<li>内核需要线程遍历这些集合中的文件描述符，这个值是循环结束的条件。</li>\n<li>在 windows 中，该参数是无效的，指定为 - 1 即可。</li>\n</ul>\n</li>\n<li><code>readfds</code> ：需要检测读状态的文件描述符集合，即检测这些文件描述符对应的读缓冲区状态。\n<ul>\n<li><code>传入传出参数</code> ，读集合一般情况下是需要检测的，这样测能直到通过哪些文件描述符接收数据。</li>\n</ul>\n</li>\n<li><code>writefds</code> ：需要检测写状态的文件描述符集合，即检测这些文件描述符对应的写缓冲区状态。\n<ul>\n<li><code>传入传出参数</code> ，如果不需要使用该参数可以指定为 NULL。</li>\n</ul>\n</li>\n<li><code>exceptfds</code> ：需要检测异常状态的文件描述符集合，即检测这些文件描述符对应的异常状态。\n<ul>\n<li><code>传入传出参数</code> ，如果不需要使用该参数可以指定为 NULL。</li>\n</ul>\n</li>\n<li><code>timeout</code> ：超时时间，即检测文件描述符状态的超时时间。</li>\n<li>函数返回值：\n<ul>\n<li>大于 <code>0</code> ：成功，返回集合中已就绪的文件描述符的个数。</li>\n<li>等于 <code>-1</code> ：则表示出错。</li>\n<li>等于 <code>0</code> ：则表示超时。</li>\n</ul>\n</li>\n</ul>\n<p><img loading=\"lazy\" src=\"/images/ioduolu.webp\" alt=\"\"></p>\n<p>另外初始化 <code>fd_set</code>  类型的参数还需要使用相关的一些列操作函数，具体如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span>fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的所有文件描述符对应的标志位都设置为 0，表示集合中没有文件描述符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的 fd 文件描述符对应的标志位设置为 1，表示集合中有该文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 set 集合中的 fd 文件描述符对应的标志位设置为 0，表示集合中没有该文件描述符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断 set 集合中的 fd 文件描述符对应的标志位是否为 1，如果为 1 则表示集合中有该文件描述符，否则表示集合中没有该文件描述符</span></pre></td></tr></table></figure><h1 id=\"poll\"><a class=\"markdownIt-Anchor\" href=\"#poll\">#</a> poll</h1>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 文件描述符 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">short</span> events<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 监控的事件 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">short</span> revents<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 实际发生的事件 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token operator\">*</span>fds<span class=\"token punctuation\">,</span> nfds_t nfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>fds</code> ：需要检测的文件描述符集合，即检测这些文件描述符对应的读缓冲区状态、写缓冲区状态、异常状态。\n<ul>\n<li><code>传入传出参数</code> ，读集合一般情况下是需要检测的，这样测能直到通过哪些文件描述符接收数据。</li>\n<li><code>pollfd</code>  结构体数组，每个 <code>pollfd</code>  结构体表示一个文件描述符的检测信息，包括文件描述符、检测的事件、实际发生的事件。</li>\n</ul>\n</li>\n<li><code>nfds</code> ：需要检测的文件描述符的个数，即检测的文件描述符从 0 到 <code>nfds-1</code> ， <code>nfds</code>  的值通常为待检测的<em>最大文件描述符</em>加 1。\n<ul>\n<li>内核需要线程遍历这些集合中的文件描述符，这个值是循环结束的条件。</li>\n</ul>\n</li>\n<li><code>timeout</code> ：超时时间，即检测文件描述符状态的超时时间。</li>\n<li>函数返回值：\n<ul>\n<li>大于 <code>0</code> ：成功，返回集合中已就绪的文件描述符的个数。</li>\n<li>等于 <code>-1</code> ：则表示出错。</li>\n<li>等于 <code>0</code> ：则表示超时。</li>\n</ul>\n</li>\n</ul>\n<p>创建监听的套接字 lfd = socket ();<br>\n 将监听的套接字和本地的 IP 和端口绑定 bind ()<br>\n 给监听的套接字设置监听 listen ()<br>\n 创建一个文件描述符集合 fd_set，用于存储需要检测读事件的所有的文件描述符<br>\n通过 FD_ZERO () 初始化<br>\n通过 FD_SET () 将监听的文件描述符放入检测的读集合中<br>\n循环调用 select ()，周期性的对所有的文件描述符进行检测<br>\n select () 解除阻塞返回，得到内核传出的满足条件的就绪的文件描述符集合<br>\n通过 FD_ISSET () 判断集合中的标志位是否为 1<br>\n 如果这个文件描述符是监听的文件描述符，调用 accept () 和客户端建立连接<br>\n将得到的新的通信的文件描述符，通过 FD_SET () 放入到检测集合中<br>\n如果这个文件描述符是通信的文件描述符，调用通信函数和客户端通信<br>\n如果客户端和服务器断开了连接，使用 FD_CLR () 将这个文件描述符从检测集合中删除<br>\n如果没有断开连接，正常通信即可</p>\n<p><strong>服务端并发实现：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IPV4, TCP, 默认协议</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定 IP 和端口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> saddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 IPV4</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 端口</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0=0.0.0.0 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saddr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>saddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置监听</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    fd_set redset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> maxfd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        fd_set temp <span class=\"token operator\">=</span> redset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>maxfd <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 判断是不是监听 fd</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 接受客户端的连接</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span> redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            maxfd <span class=\"token operator\">=</span> cfd <span class=\"token operator\">></span> maxfd <span class=\"token operator\">?</span>cfd<span class=\"token operator\">:</span>maxfd <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> maxfd<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>fd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client say : %s\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开连接。。\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>redset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 关闭文件描述符</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>select 与 poll 的并发性能比较：</p>\n<ul>\n<li><code>select</code>  函数的 <code>fd_set</code>  类型参数，在每次调用 <code>select</code>  函数时，都需要重新设置，而 <code>poll</code>  函数的 <code>pollfd</code>  类型参数，只需要在第一次调用 <code>poll</code>  函数时设置一次，之后每次调用 <code>poll</code>  函数时，只需要修改需要检测的文件描述符的 <code>pollfd</code>  结构体即可。</li>\n</ul>\n",
            "tags": [
                "I/O多路复用"
            ]
        }
    ]
}