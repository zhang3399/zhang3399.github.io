{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"数据结构\" tag",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2024/06/08/C++/2024-6-8-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://zhang3399.github.io/2024/06/08/C++/2024-6-8-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "数据处理及内存管理",
            "date_published": "2024-06-08T02:00:00.000Z",
            "content_html": "<h1 id=\"数据处理\"><a class=\"markdownIt-Anchor\" href=\"#数据处理\">#</a> 数据处理</h1>\n<h2 id=\"大小端转换\"><a class=\"markdownIt-Anchor\" href=\"#大小端转换\">#</a> 大小端转换</h2>\n<blockquote>\n<p>大端和小端是指字节序的存储方式，大端是指高位字节存储在低地址，小端是指低位字节存储在低地址。</p>\n</blockquote>\n<ol>\n<li>基本定义与存储方式<br>\n<strong>大端模式</strong>\n<ul>\n<li>高位字节存放在低地址上，低位字节存放在高地址上。</li>\n<li><code>0x12345678</code>  在内存中的存储方式为： <code>低地址--&gt; 0x12 0x34 0x56 0x78 --&gt;高地址</code> <br>\n<strong>小端模式</strong></li>\n<li>高位字节存放在高地址上，低位字节存放在低地址上。</li>\n<li><code>0x12345678</code>  在内存中的存储方式为：  <code>低地址--&gt;  0x78 0x56 0x34 0x12  --&gt;高地址</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>直观对比​（以 <code>0x1234</code>  为例）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>内存地址</th>\n<th>大端模式</th>\n<th>小端模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x4000</td>\n<td>0x12</td>\n<td>0x34</td>\n</tr>\n<tr>\n<td>0x4001</td>\n<td>0x34</td>\n<td>0x12</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>设计原因与应用场景</li>\n</ol>\n<p><strong>为何存在两种模式？</strong></p>\n<ul>\n<li><strong>硬件差异：</strong> 不同处理器架构对多字节数据的处理逻辑不同。例如，x86 架构（如 Intel/AMD CPU）采用小端模式，而 PowerPC、MIPS 等处理器多采用大端模式。</li>\n<li><strong>​效率考量：</strong> 小端模式在强制类型转换时无需调整字节顺序（直接截取低地址数据即可），而大端模式便于快速判断符号位（符号位位于低地址）</li>\n</ul>\n<p><strong>应用场景</strong></p>\n<ol>\n<li>\n<p><strong>网络通信</strong></p>\n<ul>\n<li><strong>网络传输：</strong> TCP/IP 协议规定数据传输采用大端模式 (网络字节序)，因此小端设备需通过 <code>htonl()</code>  等函数转换字节序传输。</li>\n<li>例如，发送 <code>0x12345678</code>  时，小端设备需先转换为大端模式 <code>0x78563412</code>  再传输，接收后需转回小端。</li>\n</ul>\n</li>\n<li>\n<p><strong>跨平台开发</strong></p>\n<ul>\n<li>文件存储（如二进制文件）需明确字节序，否则不同平台读取时可能出错。</li>\n<li>例如，嵌入式设备与服务器通信时需统一字节序。</li>\n</ul>\n</li>\n<li>\n<p><strong>判断当前系统的字节序</strong><br>\n可通过以下方法检测当前系统是大端还是小端：</p>\n</li>\n</ol>\n<ul>\n<li>** 联合体法：** 利用联合体的内存共享特性读取多字节数据的首字节。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isLittleEndian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">uint32_t</span> i<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">uint8_t</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x01020304</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> test<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为小端，则首字节为 0x04</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>** 宏定义法：** 利用宏定义计算多字节数据的值。<br>\n使用__BYTE_ORDER 宏（Linux/Unix）或 std::endian::native（C++20）直接判断</li>\n</ul>\n<ol start=\"4\">\n<li><strong>字节序转换函数</strong>\n<ul>\n<li><strong>大端转小端：</strong>\n<ul>\n<li><code>uint16_t ntohs(uint16_t netshort);</code> ：将 16 位无符号整数从网络字节序转换为主机字节序。(windows 下为 <code>htons</code> )</li>\n<li><code>uint32_t ntohl(uint32_t netlong);</code> ：将 32 位无符号整数从网络字节序转换为主机字节序。(windows 下为 <code>htonl</code> )</li>\n</ul>\n</li>\n<li><strong>小端转大端：</strong>\n<ul>\n<li><code>uint16_t htons(uint16_t hostshort);</code> ：将 16 位无符号整数从主机字节序转换到网络字节序。(windows 下为 <code>ntohs</code> )</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"野指针\"><a class=\"markdownIt-Anchor\" href=\"#野指针\">#</a> 野指针</h1>\n<blockquote>\n<p>指向无效内存地址（如未初始化、已释放或越界的内存）的指针，访问时可能导致程序崩溃或数据损坏</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//p 未初始化，指向随机地址（野指针）</span></pre></td></tr></table></figure><p><strong>野指针的常见成因:</strong></p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​未初始化指针</td>\n<td>指针变量未赋初值，默认指向随机内存区域</td>\n<td><code>int* p</code>  ;（未初始化为 NULL 或有效地址）</td>\n</tr>\n<tr>\n<td>​释放后未置空</td>\n<td><code>free</code>  或  <code>delete</code>  后未将指针设为  <code>NULL</code> ，仍指向已释放内存</td>\n<td><code>free(p)</code>  ; 后未执行  <code>p = NULL</code> ;</td>\n</tr>\n<tr>\n<td>​越界访问</td>\n<td>指针操作超出变量作用域（如返回局部变量地址）</td>\n<td>函数返回栈内存指针导致后续访问失效</td>\n</tr>\n</tbody>\n</table>\n<p><strong>规避野指针的最佳实践</strong></p>\n<ol>\n<li>初始化与置空\n<ul>\n<li>** 初始化：** 在声明指针时立即赋初值，避免指向随机内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化为 NULL</span></pre></td></tr></table></figure><ul>\n<li>** 置空：** 释放内存后立即将指针置为  <code>NULL</code> ，防止重复释放或访问已释放内存。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>作用域与生命周期管理\n<ul>\n<li><strong>作用域：</strong> 确保指针操作在变量有效作用域内，避免返回局部变量地址。</li>\n<li><strong>边界检查：</strong> 访问数组元素时进行边界检查，防止越界访问。</li>\n<li><strong>智能指针：</strong> 使用智能指针（如  <code>std::unique_ptr</code> 、 <code>std::shared_ptr</code> ）自动管理内存，避免手动释放内存带来的问题。</li>\n</ul>\n</li>\n<li>多线程环境下的防御措施\n<ul>\n<li><strong>隔离线程数据：</strong> 通过动态分配或线程局部存储（thread_local）为每个线程提供独立数据副本，避免数据竞争。</li>\n<li><strong>互斥锁：</strong> 在多线程访问共享数据时使用互斥锁（mutex）保护，防止并发访问导致的问题。</li>\n<li><strong>原子操作：</strong> 使用原子操作（atomic）确保对共享数据的访问是线程安全的。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"拷贝构造与运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造与运算符重载\">#</a> 拷贝构造与运算符重载</h1>\n<blockquote>\n<p>拷贝构造函数和赋值运算符重载是 C++ 中用于对象复制的两种机制，它们在对象创建和赋值时非常重要。</p>\n</blockquote>\n<h2 id=\"拷贝构造函数\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数\">#</a> 拷贝构造函数</h2>\n<p><strong>拷贝构造函数</strong>是一种特殊的构造函数，用于创建一个新对象，并将另一个对象的值复制到新对象中。它的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ClassName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ClassName<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>ClassName</code>  是类名， <code>other</code>  是另一个对象，类型为 <code>ClassName</code>  的引用。</p>\n<p><strong>拷贝构造函数的用途：</strong></p>\n<ol>\n<li><strong>对象初始化：</strong> 当使用一个已存在的对象来初始化另一个对象时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ClassName obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>函数参数传递：</strong> 当将一个对象作为函数参数传递时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ClassName obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>函数返回值：</strong> 当一个函数返回一个对象时，拷贝构造函数会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ClassName obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"赋值运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符重载\">#</a> 赋值运算符重载</h2>\n<p><strong>赋值运算符重载</strong>是一种运算符重载，用于将一个对象的值赋给另一个对象。它的定义形式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ClassName<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>ClassName</code>  是类名， <code>other</code>  是另一个对象，类型为 <code>ClassName</code>  的引用。</p>\n<p><strong>赋值运算符重载的用途：</strong></p>\n<ol>\n<li><strong>对象赋值：</strong> 当使用一个已存在的对象来赋值给另一个对象时，赋值运算符重载会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ClassName obj2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用赋值运算符重载</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>函数返回值：</strong> 当一个函数返回一个对象时，赋值运算符重载会被调用。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ClassName <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ClassName obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用赋值运算符重载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数与赋值运算符重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的区别\">#</a> 拷贝构造函数与赋值运算符重载的区别</h2>\n<ol>\n<li>\n<p><strong>调用时机：</strong></p>\n<ul>\n<li>拷贝构造函数在对象创建时调用，用于初始化新对象。   - 赋值运算符重载在对象赋值时调用，用于将一个对象的值赋给另一个对象。</li>\n<li>例如，当使用一个已存在的对象来初始化另一个对象时，会调用拷贝构造函数；当使用一个已存在的对象来赋值给另一个对象时，会调用赋值运算符重载。</li>\n</ul>\n</li>\n<li>\n<p><strong>参数类型：</strong></p>\n<ul>\n<li>拷贝构造函数的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。   - 赋值运算符重载的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。</li>\n<li>例如，拷贝构造函数的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象；赋值运算符重载的参数类型为 <code>const ClassName&amp;</code> ，表示引用另一个对象。</li>\n</ul>\n</li>\n<li>\n<p><strong>返回值类型：</strong></p>\n<ul>\n<li>拷贝构造函数的返回值类型为 <code>ClassName</code> ，表示返回新对象。   - 赋值运算符重载的返回值类型为 <code>ClassName&amp;</code> ，表示返回对象的引用。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"拷贝构造函数与赋值运算符重载的示例\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的示例\">#</a> 拷贝构造函数与赋值运算符重载的示例</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 赋值运算符重载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数与赋值运算符重载的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#拷贝构造函数与赋值运算符重载的最佳实践\">#</a> 拷贝构造函数与赋值运算符重载的最佳实践</h2>\n<ol>\n<li><strong>避免浅拷贝：</strong> 在拷贝构造函数和赋值运算符重载中，应避免浅拷贝，即直接复制指针而不是复制指针指向的内容。如果需要复制指针指向的内容，可以使用深拷贝。</li>\n<li><strong>避免循环引用：</strong> 在拷贝构造函数和赋值运算符重载中，应避免循环引用，即两个对象相互引用对方。如果需要相互引用，可以使用智能指针（如 <code>std::shared_ptr</code> ）来管理对象的生命周期。</li>\n<li><strong>避免内存泄漏：</strong> 在拷贝构造函数和赋值运算符重载中，应避免内存泄漏，即释放内存后未将指针置为 <code>NULL</code> 。如果需要释放内存，应将指针置为 <code>NULL</code> 。</li>\n<li><strong>避免异常安全：</strong> 在拷贝构造函数和赋值运算符重载中，应确保异常安全，即当异常发生时，对象的状态应保持不变。可以使用 RAII（Resource Acquisition Is Initialization）模式来确保资源正确释放。</li>\n<li><strong>避免未定义行为：</strong> 在拷贝构造函数和赋值运算符重载中，应避免未定义行为，即访问未初始化的指针或释放已释放的内存。可以使用断言（assert）来检测指针是否为 <code>NULL</code> ，或使用智能指针来管理内存。</li>\n<li><strong>避免性能问题：</strong> 在拷贝构造函数和赋值运算符重载中，应避免性能问题，即复制大量数据或进行复杂的操作。可以使用移动语义（move semantics）来优化性能。</li>\n<li><strong>避免代码重复：</strong> 在拷贝构造函数和赋值运算符重载中，应避免代码重复，即重复编写相同的代码。可以使用模板函数或模板类来减少代码重复。</li>\n</ol>\n<h1 id=\"浅拷贝与深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝与深拷贝\">#</a> 浅拷贝与深拷贝</h1>\n<h2 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h2>\n<blockquote>\n<p>仅复制对象的顶层结构（如指针或引用），底层数据仍共享同一内存地址。修改拷贝后的对象会影响原对象</p>\n</blockquote>\n<p><strong>场景</strong></p>\n<ul>\n<li>默认拷贝构造函数：C++ 中类未重写拷贝构造函数时，默认进行浅拷贝。</li>\n<li>​数组 / 结构体赋值：直接复制数组或结构体时，引用类型成员共享地址</li>\n</ul>\n<p><strong>风险</strong></p>\n<ul>\n<li>**​数据竞争：** 多线程环境下共享数据可能引发不一致问题。</li>\n<li>**​双重释放：** 若共享内存被多次释放，可能导致内存泄漏或崩溃</li>\n</ul>\n<p>浅拷贝的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 浅拷贝构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 浅拷贝赋值运算符重载</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            ptr <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h2>\n<blockquote>\n<p>复制对象的顶层结构及底层数据，确保拷贝后的对象与原对象完全独立。修改拷贝后的对象不会影响原对象</p>\n</blockquote>\n<p><strong>实现方式</strong></p>\n<ul>\n<li><strong>手动递归复制：</strong> 对于复杂对象，手动递归复制每个成员变量。</li>\n<li><strong>拷贝构造函数：</strong> 重载拷贝构造函数，实现深拷贝。</li>\n<li><strong>赋值运算符重载：</strong> 重载赋值运算符重载，实现深拷贝。</li>\n</ul>\n<p><strong>优势</strong></p>\n<ul>\n<li><strong>数据独立：</strong> 拷贝后的对象与原对象完全独立，修改一个对象不影响另一个对象。</li>\n<li><strong>内存安全：</strong> 避免数据竞争和双重释放问题，确保内存安全。</li>\n</ul>\n<p><strong>劣势</strong></p>\n<ul>\n<li><strong>性能开销：</strong> 深拷贝需要复制大量数据，可能导致性能开销。</li>\n</ul>\n<p>深拷贝的示例代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 深拷贝构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 深拷贝赋值运算符重载</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyClass<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放原指针指向的内存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分配新内存并复制数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"浅拷贝与深拷贝的区别\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝与深拷贝的区别\">#</a> 浅拷贝与深拷贝的区别</h2>\n<p>| 特性  | 浅拷贝  | 深拷贝   |</p>\n<p>| :---- | :----- | :------ |</p>\n<p>| 复制方式 | 复制顶层结构，共享底层数据 | 复制顶层结构及底层数据，独立内存 |</p>\n<p>| 修改影响 | 修改拷贝后的对象会影响原对象 | 修改拷贝后的对象不影响原对象 |</p>\n<p>| 内存管理 | 共享内存，可能导致数据竞争或内存泄漏 | 独立内存，内存安全 |</p>\n<p>| 性能开销 | 较低，直接复制指针 | 较高，需要复制大量数据 |</p>\n",
            "tags": [
                "数据结构"
            ]
        }
    ]
}