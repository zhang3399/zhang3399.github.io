{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"lambda 表达式\" tag",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2025/03/19/C++/2025-3-19-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://zhang3399.github.io/2025/03/19/C++/2025-3-19-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "Lambda 表达式",
            "date_published": "2025-03-19T12:39:00.000Z",
            "content_html": "<blockquote>\n<p><code>Lambda</code>  表达式是  <code>C++11</code>  引入的一种匿名函数，允许在需要函数对象的地方直接定义一个函数，无需显式定义函数名。 <code>Lambda</code>  表达式常用于实现回调函数、临时函数、算法函数等场景。</p>\n</blockquote>\n<h1 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>Lambda 表达式的完整语法结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span> captures <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span> params <span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token operator\">-></span> return_type <span class=\"token punctuation\">&#123;</span> body <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>组成部分</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[ captures ]</code></td>\n<td>捕获列表，定义外部变量如何被  <code>Lambda</code>  访问（值捕获、引用捕获等）</td>\n</tr>\n<tr>\n<td><code>( params )</code></td>\n<td>参数列表，与普通函数参数列表一致</td>\n</tr>\n<tr>\n<td><code>mutable</code></td>\n<td>可选关键字，允许修改按值捕获的变量</td>\n</tr>\n<tr>\n<td><code>-&gt; return_type</code></td>\n<td>可选返回类型，可省略（编译器自动推导）</td>\n</tr>\n<tr>\n<td><code>&#123; body &#125;</code></td>\n<td><code>Lambda</code>  函数体</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"捕获列表capture-list\"><a class=\"markdownIt-Anchor\" href=\"#捕获列表capture-list\">#</a> 捕获列表（Capture List）</h1>\n<h2 id=\"捕获方式\"><a class=\"markdownIt-Anchor\" href=\"#捕获方式\">#</a> 捕获方式</h2>\n<table>\n<thead>\n<tr>\n<th>捕获方式</th>\n<th>语法示例</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​按值捕获</td>\n<td>[x]</td>\n<td>复制外部变量  <code>x</code>  的值到  <code>Lambda</code>  内部</td>\n</tr>\n<tr>\n<td>​按引用捕获</td>\n<td>[&amp;x]</td>\n<td>直接引用外部变量  <code>x</code></td>\n</tr>\n<tr>\n<td>​隐式按值捕获全部</td>\n<td>[=]</td>\n<td>按值捕获所有外部变量（不推荐，易导致悬空引用或性能问题）</td>\n</tr>\n<tr>\n<td>​隐式按引用捕获全部</td>\n<td>[&amp;]</td>\n<td>按引用捕获所有外部变量（不推荐，需谨慎管理生命周期）</td>\n</tr>\n<tr>\n<td>​混合捕获</td>\n<td><code>[x, &amp;y]</code></td>\n<td>按值捕获  <code>x</code> ，按引用捕获  <code>y</code></td>\n</tr>\n<tr>\n<td>​初始化捕获（C++14+）</td>\n<td>​\t <code>[z = x + 1]</code></td>\n<td>创建新变量  <code>z</code> ，其值为  <code>x + 1</code> （可用于移动语义或复杂初始化）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例代码\"><a class=\"markdownIt-Anchor\" href=\"#示例代码\">#</a> 示例代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 按值捕获 a，按引用捕获 b</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> lambda1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 隐式按引用捕获所有外部变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">auto</span> lambda2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 初始化捕获（C++14+）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">auto</span> lambda3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 2</span></pre></td></tr></table></figure><h1 id=\"参数列表parameters\"><a class=\"markdownIt-Anchor\" href=\"#参数列表parameters\">#</a> 参数列表（Parameters）</h1>\n<ul>\n<li>与普通函数参数列表一致，支持值传递、引用传递、默认参数等。</li>\n<li>​无参数时可省略： <code>[] &#123; ... &#125;</code> <br>\n<strong> 示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值传递</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引用传递</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> no_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无参数</span></pre></td></tr></table></figure><h1 id=\"mutable-关键字\"><a class=\"markdownIt-Anchor\" href=\"#mutable-关键字\">#</a> mutable 关键字</h1>\n<ul>\n<li>默认情况下，按值捕获的变量在  <code>Lambda</code>  内部是 ​不可修改 的。</li>\n<li>使用  <code>mutable</code>  后，可以修改按值捕获的变量（修改的是副本，不影响外部变量）。<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许修改按值捕获的 count（副本）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 外部 count 仍为 0</span></pre></td></tr></table></figure><h1 id=\"返回类型return-type\"><a class=\"markdownIt-Anchor\" href=\"#返回类型return-type\">#</a> 返回类型（Return Type）</h1>\n<ul>\n<li>返回类型可省略，编译器根据  <code>return</code>  语句自动推导。</li>\n<li>当函数体包含多个  <code>return</code>  语句且类型不一致时，必须显式指定返回类型。<br>\n<strong>示例</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动推导返回类型为 int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 显式指定返回类型为 double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> divide <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"lambda-的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#lambda-的应用场景\">#</a> Lambda 的应用场景</h1>\n<h2 id=\"作为函数对象functor\"><a class=\"markdownIt-Anchor\" href=\"#作为函数对象functor\">#</a> 作为函数对象（Functor）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 降序排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"异步回调如-boostasio\"><a class=\"markdownIt-Anchor\" href=\"#异步回调如-boostasio\">#</a> 异步回调（如 Boost.Asio）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">async_read_some</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> error_code<span class=\"token operator\">&amp;</span> ec<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ec<span class=\"token punctuation\">)</span> <span class=\"token function\">handle_read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"封装局部逻辑\"><a class=\"markdownIt-Anchor\" href=\"#封装局部逻辑\">#</a> 封装局部逻辑</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">process_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> threshold <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>threshold<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">copy_if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h1>\n<h2 id=\"生命周期管理\"><a class=\"markdownIt-Anchor\" href=\"#生命周期管理\">#</a> 生命周期管理</h2>\n<ul>\n<li>​按引用捕获：确保被引用的对象在  <code>Lambda</code>  执行时仍然有效，避免悬空引用。</li>\n<li>​按值捕获指针：需谨慎，可能造成内存泄漏或悬空指针。</li>\n</ul>\n<h2 id=\"性能\"><a class=\"markdownIt-Anchor\" href=\"#性能\">#</a> 性能</h2>\n<ul>\n<li>小对象按值捕获更高效，大对象（如容器）建议按引用捕获（需确保生命周期）。</li>\n</ul>\n<h2 id=\"默认捕获的风险\"><a class=\"markdownIt-Anchor\" href=\"#默认捕获的风险\">#</a> 默认捕获的风险</h2>\n<ul>\n<li>避免使用 [=] 或 [&amp;]：可能导致意外捕获不需要的变量，增加维护难度。</li>\n</ul>\n<h2 id=\"lambda-与函数对象的关系\"><a class=\"markdownIt-Anchor\" href=\"#lambda-与函数对象的关系\">#</a>  <code>Lambda</code>  与函数对象的关系</h2>\n<ul>\n<li><code>Lambda</code>  本质上是编译器生成的匿名类（闭包类型）的实例。</li>\n<li>捕获的变量会成为该匿名类的成员变量。</li>\n<li>等价转换示例</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Lambda 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> lambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 编译器生成的等价类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">__AnonymousClosure</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">__AnonymousClosure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>关键点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>​捕获列表</td>\n<td>明确指定需要捕获的变量，避免隐式捕获</td>\n</tr>\n<tr>\n<td>​参数列表</td>\n<td>与普通函数一致，支持多种传递方式</td>\n</tr>\n<tr>\n<td>​<strong>mutable</strong></td>\n<td>允许修改按值捕获的变量副本</td>\n</tr>\n<tr>\n<td>​返回类型</td>\n<td>可省略（自动推导）或显式指定</td>\n</tr>\n<tr>\n<td>​生命周期</td>\n<td>谨慎管理按引用捕获的变量，避免悬空引用</td>\n</tr>\n<tr>\n<td>​应用场景</td>\n<td>函数对象、异步回调、STL 算法等</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Lambda 表达式"
            ]
        }
    ]
}