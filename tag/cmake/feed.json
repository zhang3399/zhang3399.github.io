{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"cmake\" tag",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2025/03/12/Tool/2025-3-12-CMake%E4%BD%BF%E7%94%A8/",
            "url": "https://zhang3399.github.io/2025/03/12/Tool/2025-3-12-CMake%E4%BD%BF%E7%94%A8/",
            "title": "🚀 CMake项目构建",
            "date_published": "2025-03-12T07:26:00.000Z",
            "content_html": "<blockquote>\n<p>​<strong>编译环境</strong>：在 Wiondows 下，使用 VScode+WSL2+Ubuntu20.04+GCC 编译器</p>\n</blockquote>\n<hr>\n<h1 id=\"核心命令\"><a class=\"markdownIt-Anchor\" href=\"#核心命令\">#</a> 核心命令</h1>\n<h2 id=\"项目配置\"><a class=\"markdownIt-Anchor\" href=\"#项目配置\">#</a> 项目配置</h2>\n<ol>\n<li><strong> <code>cmake_minimum_required</code>   指定 <code>CMake</code>  的最小版本要求</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>project</code>   定义项目名称，并可以指定项目使用的编程语言、web 主页地址、项目版本号等</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>MyProject <span class=\"token property\">VERSION</span> <span class=\"token number\">1.0</span> LANGUAGES CXX<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong> <code>set</code>  设置变量</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#方式 1 各源文件剪枝空格间隔，并赋值给 SOURCE（变量名任取，不要重复即可）变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span> main.cpp foo.cpp bar.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#方式 2 各源文件 “；” 间隔</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span> main.cpp;foo.cpp;bar.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 使用变量，采用 $&#123;&#125; 方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>MyExecutable <span class=\"token punctuation\">$&#123;</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>指定使用 <code>c++</code>  标准</strong></li>\n</ol>\n<p>命令行编译时使用 c++ 标准，通过 <code>-std=c++11</code>  格式指定</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>g++  <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++11 <span class=\"token parameter variable\">-o</span> demo main.cpp</pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>通过 <code>set</code>  命令指定</strong></li>\n</ol>\n<p>CMake 文件指定 c++ 标准</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>通过 <code>project</code>  命令指定</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>MyProject <span class=\"token property\">VERSION</span> <span class=\"token number\">1.0</span> LANGUAGES CXX <span class=\"token property\">CXX_STANDARD</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><strong> <code>C++</code>  标准对应有宏 <code>-DCMAKE_CXX_STANDARD</code> ，通过 <code>cmake</code>  命令指定</strong></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">11</span> <span class=\"token punctuation\">..</span>  <span class=\"token comment\"># 注意，.. 表示上一级目录，指定到 CMakeLists.txt 所在的目录</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CMAKE_SOURCE_DIR</td>\n<td><code>CMakeLists.txt</code>  所在的目录</td>\n</tr>\n<tr>\n<td>CMAKE_BINARY_DIR</td>\n<td>构建目录</td>\n</tr>\n<tr>\n<td>CMAKE_CURRENT_SOURCE_DIR</td>\n<td>当前 <code>CMakeLists.txt</code>  所在的目录</td>\n</tr>\n<tr>\n<td>CMAKE_CURRENT_BINARY_DIR</td>\n<td>当前构建目录</td>\n</tr>\n<tr>\n<td>CMAKE_CURRENT_LIST_DIR</td>\n<td>当前 <code>CMakeLists.txt</code>  所在的目录</td>\n</tr>\n<tr>\n<td>PROJECT_SOURCE_DIR</td>\n<td>表示项目根目录</td>\n</tr>\n<tr>\n<td>PROJECT_BINARY_DIR</td>\n<td>表示项目构建目录</td>\n</tr>\n<tr>\n<td>PROJECT_NAME</td>\n<td>表示项目名称</td>\n</tr>\n<tr>\n<td>CMAKE_CXX_STANDARD</td>\n<td>表示 C++ 标准</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"文件管理\"><a class=\"markdownIt-Anchor\" href=\"#文件管理\">#</a> 文件管理</h2>\n<ol>\n<li><strong>指定输出路径</strong></li>\n</ol>\n<p>在 CMake 中指定可执行程序输出的路径，也有对应的宏，叫做 <code>EXECUTABLE_OUTPUT_PATH</code> ，可通过 <code>set</code>  命令指定，例如：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>HOME /home/zhang/Linux<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">EXECUTABLE_OUTPUT_PATH</span> <span class=\"token punctuation\">$&#123;</span>HOME<span class=\"token punctuation\">&#125;</span>/bin<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>第一行：定义一个变量存储一个路径</li>\n<li>第二行：将拼接好的路径赋值给 <code>EXECUTABLE_OUTPUT_PATH</code>  变量</li>\n</ul>\n<ol start=\"2\">\n<li><strong>搜索文件</strong></li>\n</ol>\n<p><code>aux_source_group</code>  查找 <code>某路径</code> 下的 <code>所有源文件</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">aux_source_group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Source Files\"</span> variable<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>Source Files</code> ：表示搜索的文件所在的目录名称</li>\n<li><code>variable</code> ：将 <code>Source Files</code>  目录下搜索到的源文件列表赋值给 <code>variable</code>  变量</li>\n</ul>\n<ol start=\"3\">\n<li><strong> <code>aux_source_group</code>  查找文件</strong></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># aux_source_group($&#123;PROJECT_SOURCE_DIR&#125;/src SRC_LIST)  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">aux_source_group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/src SRC_LIST<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>PROJECT_SOURCE_DIR</code> ：表示项目根目录</li>\n<li><code>CMAKE_CURRENT_SOURCE_DIR</code> ：表示当前 <code>CMakeLists.txt</code>  所在的目录<br>\n搜索 <code>CMakeLists.txt</code>  所在的目录 <code>src</code>  下所有源文件，并将结果赋值给 <code>SRC_LIST</code>  变量。</li>\n</ul>\n<ol start=\"4\">\n<li><strong> <code>file</code>  查找文件</strong><br>\n使用 <code>file</code>  命令，查找某路径下的 <code>某格式文件</code></li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">file</span><span class=\"token punctuation\">(</span>GLOB/GLOB_RECURSE 变量名 要搜索文件路径和文件类型<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>GLOB</code> ：表示搜索指定目录下所有文件，将满足条件的文件列表赋值给变量</li>\n<li><code>GLOB_RECURSE</code> ：表示递归搜索指定目录下所有文件，将满足条件的文件列表赋值给变量</li>\n</ul>\n<ol start=\"5\">\n<li><strong>包含头文件</strong><br>\n在编译项目源文件时，需要将源文件对应的头文件包含进来，cmake 提供了 <code>include_directories</code>  命令，用于指定头文件的搜索路径：</li>\n</ol>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span>headpath<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr>\n<h1 id=\"构建控制\"><a class=\"markdownIt-Anchor\" href=\"#构建控制\">#</a> 构建控制</h1>\n<h2 id=\"编译选项\"><a class=\"markdownIt-Anchor\" href=\"#编译选项\">#</a> 编译选项</h2>\n<p>在 CMake 中，可以通过 <code>option</code>  命令来定义编译选项，例如：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">option</span><span class=\"token punctuation\">(</span>USE_OPENMP <span class=\"token string\">\"Use OpenMP for parallelization\"</span> <span class=\"token boolean\">ON</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>USE_OPENMP</code> ：表示编译选项的名称</li>\n<li><code>Use OpenMP for parallelization</code> ：表示编译选项的描述</li>\n</ul>\n<h2 id=\"链接控制\"><a class=\"markdownIt-Anchor\" href=\"#链接控制\">#</a> 链接控制</h2>\n<p>在 CMake 中，可以通过 <code>target_link_libraries</code>  命令来指定链接库，例如：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>&lt;TARGET<span class=\"token punctuation\">></span>  <span class=\"token namespace\">PRIVATE</span> MyLibrary<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>TARGET</code> ：需要链接库的目标</li>\n<li><code>PRIVATE</code> ：表示链接库的作用域，可以是 <code>PRIVATE</code> 、 <code>PUBLIC</code> 、 <code>INTERFACE</code>  之一</li>\n</ul>\n<hr>\n<h1 id=\"工程实践\"><a class=\"markdownIt-Anchor\" href=\"#工程实践\">#</a> 工程实践</h1>\n<h2 id=\"标准结构\"><a class=\"markdownIt-Anchor\" href=\"#标准结构\">#</a> 标准结构</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeLists.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>MyProject LANGUAGES CXX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 添加源文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span> main.cpp foo.cpp bar.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>MyExecutable <span class=\"token punctuation\">$&#123;</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 添加头文件搜索路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 添加链接库</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>MyExecutable <span class=\"token namespace\">PRIVATE</span> MyLibrary<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"构建流程\"><a class=\"markdownIt-Anchor\" href=\"#构建流程\">#</a> 构建流程</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><hr>\n<h1 id=\"动静态库\"><a class=\"markdownIt-Anchor\" href=\"#动静态库\">#</a> 动静态库</h1>\n<h2 id=\"生成静态库\"><a class=\"markdownIt-Anchor\" href=\"#生成静态库\">#</a> 生成静态库</h2>\n<p><code>add_library</code>  命令用于创建库，其语法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 静态库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>MyLibrary <span class=\"token namespace\">STATIC</span> [源文件<span class=\"token number\">1</span>] [源文件<span class=\"token number\">2</span>]<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 动态库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>MyLibrary <span class=\"token namespace\">SHARED</span>  [源文件<span class=\"token number\">1</span>] [源文件<span class=\"token number\">2</span>]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>MyLibrary</code>  为生成 <code>动静态</code> 的 <code>库名</code> ，完整动静态文件名包含三部分： <code>lib</code> + <code>库名</code>  + <code>扩展名</code></p>\n<p><code>SHARED</code> ：表示生成动态库，动态库扩展名为 <code>.so</code> (Linux)、 <code>dll</code> (Windows)</p>\n<p><code>STATIC</code> ：表示生成静态库，静态库扩展名为 <code>.a</code> (Linux)、 <code>lib</code> (Windows)</p>\n<p><code>静态库</code> 默认不具有可执行权限，所以指定静态库路径的时候不可以使用 <code>EXECUTABLE_OUTPUT_PATH</code> ，而应该使用 <code>LIBRARY_OUTPUT_PATH</code> ，这个宏对于动态库和静态库都有效。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>类别</strong></th>\n<th style=\"text-align:center\"><strong>编译</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>静态库</strong></td>\n<td style=\"text-align:center\">编译时链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>动态库</strong></td>\n<td style=\"text-align:center\">运行时链接</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"使用动静态库\"><a class=\"markdownIt-Anchor\" href=\"#使用动静态库\">#</a> 使用动静态库</h2>\n<p>链接<strong>动静态</strong>库，需要使用 <code>link_libraries</code>  命令</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">link_libraries</span><span class=\"token punctuation\">(</span>&lt;static lib<span class=\"token punctuation\">></span> [&lt;static lib<span class=\"token punctuation\">></span>...]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>参数1</code>  指定要链接静态库的名字，可以是文件全名，也可以是文件名（不带 <code>lib</code>  前缀和扩展名 <code>.a</code> ）<br>\n <code>参数2</code>  要链接的其他静态库的名字</p>\n<p>** 注意：** 如果该静态库不是系统提供的（自己制作或第三方提供静态库）可能出现找不到的情况，需要指定静态库的路径</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">link_directories</span><span class=\"token punctuation\">(</span>&lt;path<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>参数</code>  指定静态库的路径</p>\n<p><code>target_link_libraries</code>  用于将动态库链接到目标可执行文件（因此位于 <code>add_executable</code>  或 <code>add_library</code>  命令之后）</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>&lt;target<span class=\"token punctuation\">></span> [<span class=\"token namespace\">PRIVATE</span>|<span class=\"token namespace\">PUBLIC</span>|<span class=\"token namespace\">INTERFACE</span>] &lt;item<span class=\"token punctuation\">></span>...<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>&lt;target&gt;</code> ：表示目标可执行文件或库的名称<br>\n <code>[PRIVATE|PUBLIC|INTERFACE]</code> ：表示链接库的访问权限，默认为 <code>PUBLIC</code> , 可以是 <code>PRIVATE</code> 、 <code>PUBLIC</code> 、 <code>INTERFACE</code>  之一<br>\n <code>&lt;item&gt;</code> ：表示要链接的库的名称，可以是库的名称，也可以是库的路径</p>\n<p><code>动态库</code> ：具有传递性，即链接动态库的库，也会链接动态库所依赖的动态库，例如：如果 <code>动态库A</code>  链接 <code>动态库B、C</code> ， <code>动态库D</code>  链接 <code>动态库A</code> ，此时链接 <code>动态库D</code>  相当于链接了 <code>动态库B、C</code>  中定义的方法。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>A B C<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>D A<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>权限</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>PRIVATE</code></td>\n<td style=\"text-align:center\">private 后面的库仅被 link 前面的 target 中，并且终结掉，第三方库不能感知</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>PUBLIC</code></td>\n<td style=\"text-align:center\">public 后面的库会被 link 到前面的 target 中，并且里面的符号会被导出，提供给第三方</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>INTERFACE</code></td>\n<td style=\"text-align:center\">interface 后面引入的库不会被连接到前面的 target 中，只会导出符号</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"进阶技巧\"><a class=\"markdownIt-Anchor\" href=\"#进阶技巧\">#</a> 进阶技巧</h1>\n<h2 id=\"条件判断\"><a class=\"markdownIt-Anchor\" href=\"#条件判断\">#</a> 条件判断</h2>\n<p><strong> <code>if</code> </strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EXISTS <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>elseif</code> </strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EXISTS <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>foreach</code>  命令用于循环</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span>&lt;loop_var<span class=\"token punctuation\">></span> &lt;items<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &lt;commands<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">endforeach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>&lt;loop_var&gt;</code> ：表示循环变量</p>\n<h2 id=\"日志\"><a class=\"markdownIt-Anchor\" href=\"#日志\">#</a> 日志</h2>\n<p><code>message</code>  命令用于输出日志信息，其语法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>&lt;mode<span class=\"token punctuation\">></span> <span class=\"token string\">\"message to display\"</span> ...<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>&lt;mode&gt;</code> ：表示输出信息的模式，可以是 <code>（空）</code> 、 <code>STATUS</code> 、 <code>WARNING</code> 、 <code>AUTHOR_WARNING</code> 、 <code>SEND_ERROR</code> 、 <code>FATAL_ERROR</code> 、 <code>DEPRECATION</code>  之一<br>\n <code>&quot;message to display&quot;</code> ：表示要输出的信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>模式</strong></th>\n<th style=\"text-align:center\"><strong>输出信息</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">(空)</td>\n<td style=\"text-align:center\">输出重要信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">STATUS</td>\n<td style=\"text-align:center\">输出普通信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WARNING</td>\n<td style=\"text-align:center\">输出警告信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AUTHOR_WARNING</td>\n<td style=\"text-align:center\">输出作者警告信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SEND_ERROR</td>\n<td style=\"text-align:center\">输出错误信息，继续执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FATAL_ERROR</td>\n<td style=\"text-align:center\">输出错误信息，终止执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEPRECATION</td>\n<td style=\"text-align:center\">输出弃用信息</td>\n</tr>\n</tbody>\n</table>\n<p>CMake 命令行工具会在 stdout 上显示 STATUS 消息，在 stderr 上显示其他消息。CMake GUI 工具会在消息窗口中显示所有消息。</p>\n<h2 id=\"变量操作\"><a class=\"markdownIt-Anchor\" href=\"#变量操作\">#</a> 变量操作</h2>\n<p>有时候项目源文件比较多并且不再同一目录下，这些源文件需要一起编译生成可执行文件，我们可以通过 <code>file</code>  命令对各自目录下的源文件进行搜索，最后还需要做一个字符串拼接操作，关于字符串拼接可以使用 <code>set</code>  命令也可以使用 <code>list</code>  命令。</p>\n<p><strong> <code>set</code>  命令</strong><br>\n <code>set</code>  命令用于设置变量的值，其语法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 取出 $&#123;&#125; 中变量的字符串 ---> 拼接字符串 ---> 赋值给变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>&lt;变量名<span class=\"token punctuation\">></span> <span class=\"token punctuation\">$&#123;</span>变量名<span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">$&#123;</span>变量名<span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>... <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将 string1 string2... 的字符串拼接 ---> 赋值给变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>&lt;变量名<span class=\"token punctuation\">></span> string1 string2... <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>set 实际是字符串拼接，该命令是将 <code>变量名1</code> 、 <code>变量名2</code> … 的值进行拼接并赋值给 <code>变量名</code> ，如果 <code>变量名</code> 已经存在，则覆盖其值，如果 <code>变量名</code> 不存在，则创建该变量。</p>\n<p><strong> <code>list</code>  命令</strong></p>\n<p><strong>字符串拼接</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>APPEND &lt;list<span class=\"token punctuation\">></span> [args...]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>APPEND</code> ：将 <code>args</code>  字符串依次添加到 <code>list</code>  的末尾， <code>APPEND</code>  之后写法与 <code>set</code>  一致，与 <code>set</code>  命令不同的是， <code>list</code>  命令不会覆盖 <code>list</code>  的值，而是将 <code>args</code>  字符串依次添加到 <code>list</code>  的末尾。</p>\n<p><strong>字符串移除</strong><br>\n当通过 <code>file</code>  查找某个目录下的所有源文件时，其中有些使我们不需要的，例如下面的 main.cpp</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ tree</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── add.cpp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── div.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── main.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>├── mult.cpp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>└── sub.cpp</pre></td></tr></table></figure><p>其中 <code>main</code>  是测试文件，如果我们想把计算器相关的源文件生成动态库给别人使用，只需要 <code>add.cpp</code> 、 <code>div.cpp</code> 、 <code>mult.cpp</code> 、 <code>sub.cpp</code>  这四个文件，那么我们可以通过 <code>list</code>  命令将 <code>main.cpp</code>  移除。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>REMOVE_ITEM &lt;list<span class=\"token punctuation\">></span> [value...]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>REMOVE_ITEM</code> ：将 <code>list</code>  中所有 <code>value</code>  字符串移除。</p>\n<p><strong>字符串查找</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>FIND &lt;list<span class=\"token punctuation\">></span> &lt;value<span class=\"token punctuation\">></span> &lt;variable<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>FIND</code> ：在 <code>list</code>  中查找 <code>value</code>  字符串，如果找到，则将 <code>value</code>  字符串在 <code>list</code>  中的索引赋值给 <code>variable</code> ，如果未找到，则将 <code>-1</code>  赋值给 <code>variable</code> 。</p>\n<p><strong>字符串替换</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>REPLACE &lt;list<span class=\"token punctuation\">></span> &lt;value<span class=\"token punctuation\">></span> &lt;newvalue<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>REPLACE</code> ：将 <code>list</code>  中所有 <code>value</code>  字符串替换为 <code>newvalue</code>  字符串。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>命令</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n<th style=\"text-align:center\"><strong>使用示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">APPEND</td>\n<td style=\"text-align:center\">将 args 添加到列表的末尾</td>\n<td style=\"text-align:center\"><code>list(APPEND &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APPEND_STRING</td>\n<td style=\"text-align:center\">将 args 添加到列表的末尾</td>\n<td style=\"text-align:center\"><code>list(APPEND_STRING &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APPEND_UNIQUE</td>\n<td style=\"text-align:center\">将 args 添加到列表的末尾，如果 args 已经存在，则不添加</td>\n<td style=\"text-align:center\"><code>list(APPEND_UNIQUE &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CLEAR</td>\n<td style=\"text-align:center\">清除列表</td>\n<td style=\"text-align:center\"><code>list(CLEAR &lt;list&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GET</td>\n<td style=\"text-align:center\">获取列表中的元素</td>\n<td style=\"text-align:center\"><code>list(GET &lt;list&gt; [&lt;index&gt;...]  [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INSERT</td>\n<td style=\"text-align:center\">在 <code>列表</code> 中的 <code>某一位置</code> 插入 (<em>索引前插入</em>) <code>元素</code> 得到 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(INSERT &lt;list&gt; &lt;index&gt; [&lt;index&gt;...] [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LENGTH</td>\n<td style=\"text-align:center\">获取列表的长度并赋值给 <code>变量</code></td>\n<td style=\"text-align:center\"><code>list(LENGTH &lt;list&gt; &lt;variable&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POP_BACK</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中的最后一个元素获取 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(POP_BACK &lt;list&gt; [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POP_FRONT</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中的第一个元素获取 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(POP_FRONT &lt;list&gt; [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PREPEND</td>\n<td style=\"text-align:center\">将 args 添加到列表的开头</td>\n<td style=\"text-align:center\"><code>list(PREPEND &lt;list&gt; [args...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REMOVE_AT</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中的 <code>某一位置</code> 的元素获取 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(REMOVE_AT &lt;list&gt; [&lt;index&gt;...] [&lt;output variable&gt;...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REMOVE_ITEM</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中所有 <code>value</code>  字符串</td>\n<td style=\"text-align:center\"><code>list(REMOVE_ITEM &lt;list&gt; [value...])</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REMOVE_DUPLICATES</td>\n<td style=\"text-align:center\">删除 <code>列表</code> 中重复的元素</td>\n<td style=\"text-align:center\"><code>list(REMOVE_DUPLICATES &lt;list&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JOIN</td>\n<td style=\"text-align:center\">将 <code>列表</code> 中的元素用 <code>连接符</code> 连接成一个 <code>新字符串</code></td>\n<td style=\"text-align:center\"><code>list(JOIN &lt;list&gt; &lt;glue&gt; &lt;output variable&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REVERSE</td>\n<td style=\"text-align:center\">将 <code>列表</code> 中的元素反转</td>\n<td style=\"text-align:center\"><code>list(REVERSE &lt;list&gt;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SORT</td>\n<td style=\"text-align:center\">将 <code>列表</code> 中的元素排序</td>\n<td style=\"text-align:center\"><code>list(SORT &lt;list&gt;)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"宏定义\"><a class=\"markdownIt-Anchor\" href=\"#宏定义\">#</a> 宏定义</h2>\n<p>在程序测试中，我们经常需要定义一些宏，例如 <code>DEBUG</code> ，通过这些宏来控制程序是否打印调试信息</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"debug n=\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序通过 <code>#ifdef DEBUG</code>  判断 <code>DEBUG</code>  是否被定义，如果被定义，则打印调试信息。如果没有被定义，则不打印调试信息，该端代码相当于被注释掉了，因此无法看到日志输出。</p>\n<p>为了使得 <code>c++</code>  测试更加方便，我们可以不在代码中定义宏，在 <code>g++/gcc</code>  命令中定义宏，例如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>g++ <span class=\"token parameter variable\">-DDEBUG</span> main.cpp <span class=\"token parameter variable\">-o</span> main</pre></td></tr></table></figure><p><code>g++/gcc</code>  命令通过 <code>-D</code>  指定定义宏的名字，这样在代码中就可以使用 <code>DEBUG</code>  宏了。</p>\n<p><strong> <code>CMake</code>  中使用 <code>add_definitions</code>  定义宏</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_definitions</span><span class=\"token punctuation\">(</span>-DDEBUG<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>add_definitions</code>  命令用于定义宏，其中 <code>-D</code>  是 <code>g++/gcc</code>  命令的参数， <code>DEBUG</code>  是宏的名字。</p>\n<h2 id=\"嵌套cmake\"><a class=\"markdownIt-Anchor\" href=\"#嵌套cmake\">#</a> 嵌套 CMake</h2>\n<p>在 Linux 的目录是树状结构，所以嵌套 CMake 也是树状结构，最顶层的 CMakeLists.txt 文件称为 <code>根节点</code> ，其他 CMakeLists.txt 文件称为 <code>子节点</code> 。需要了解关于 <code>CMakeLists.txt</code>  的几个信息：</p>\n<ul>\n<li>根节点的 <code>CMakeLists.txt</code>  中定义变量全局有效。</li>\n<li>父节点的 <code>CMakeLists.txt</code>  中定义的变量，子节点可以访问。</li>\n<li>子节点的 <code>CMakeLists.txt</code>  中定义的变量，父节点无法访问。</li>\n</ul>\n<p><strong>添加子目录</strong><br>\n CMake 中父子节点是如何建立的？</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_subdirectory</span><span class=\"token punctuation\">(</span>source_dir [binary_dir] [<span class=\"token property\">EXCLUDE_FROM_ALL</span>]<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>source_dir</code> : 子目录的路径，<br>\n <code>binary_dir</code> : 指定输出文件的路径，一般不需要指定，默认即可。<br>\n <code>EXCLUDE_FROM_ALL</code> : 在子路径下的目标默认不会被包含到父路径的 <code>ALL</code>  目标中，并且也会排除在 IDE 工程文件之外。用户必须显式构建在子路径下的目标。</p>\n<p><strong>获取父目录的路径</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">get_filename_component</span><span class=\"token punctuation\">(</span>PARENT_DIR <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span> PATH<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>get_filename_component</code>  命令用于获取文件路径，其中 <code>PARENT_DIR</code>  是变量名， <code>$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</code>  是当前目录的路径， <code>PATH</code>  表示获取路径。</p>\n",
            "tags": [
                "CMake"
            ]
        }
    ]
}