{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodeVortex记事本 • All posts by \"boost\" tag",
    "description": "滴答滴答滴答",
    "home_page_url": "https://zhang3399.github.io",
    "items": [
        {
            "id": "https://zhang3399.github.io/2025/03/14/C++/2025-3-14-Boost/",
            "url": "https://zhang3399.github.io/2025/03/14/C++/2025-3-14-Boost/",
            "title": "Boost",
            "date_published": "2025-03-14T10:00:00.000Z",
            "content_html": "<blockquote>\n<p><code>Boost</code>  是一个开源的 C++ 库集合，提供了许多实用的功能，如网络编程、图形界面、数学计算等。Boost 库可以与标准 C++ 库无缝集成，扩展了 C++ 的功能。</p>\n</blockquote>\n<h1 id=\"安装-boost-库\"><a class=\"markdownIt-Anchor\" href=\"#安装-boost-库\">#</a> 安装 Boost 库</h1>\n<p>通过 APT 包管理器安装 Boost 库：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 更新软件包索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 安装 Boost 核心库和开发文件（包含头文件和静态 / 动态库）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libboost-all-dev <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 验证安装（检查版本）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">boostversion</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /usr/include/boost/version.hpp <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"#define BOOST_VERSION\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $3&#125;'</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Boost 版本: <span class=\"token variable\">$boostversion</span>\"</span></pre></td></tr></table></figure><h1 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p>同步操作会阻塞当前线程，直到操作完成。异步操作则不会阻塞线程，通过回调函数在操作完成后触发。</p>\n<h2 id=\"同步\"><a class=\"markdownIt-Anchor\" href=\"#同步\">#</a> 同步</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 同步，阻塞线程 5 秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//wait () 返回，定时器资源（如系统句柄）被自动释放</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Hello,world!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>定时器</strong><br>\n <code>steady_timer</code>  是  <code>Boost.Asio</code>  提供的定时器类，用于在指定时间后执行回调函数。</p>\n<p><code>steady_timer </code> 的构造函数需要  <code>io_context</code>  参数，目的是 <strong>​显式声明</strong> 该定时器依赖 ** 的<strong>事件循环</strong>。这种设计确保类型安全，避免隐式关联导致的错误。</p>\n<p><strong>io_context 的作用</strong><br>\n <code>io_context</code>  是  <code>Boost.Asio</code>  的核心组件，负责调度以及执行所有异步（如 DNS 解析、连接、读写）和同步操作的生命周期。（如定时器、网络 I/O）。</p>\n<h2 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h2>\n<p>异步操作需要事件循环来驱动， <code>io_context::run()</code>  方法启动事件处理流程。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> a <span class=\"token comment\">/*e*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Hello,world!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    t<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 异步，不会阻塞线程，回调函数 print 会在 5 秒后执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>io.run() </code> 是异步编程的核心，负责监听操作系统异步操作（如定时器到期、网络请求完成）的完成事件，确保资源（如 <code>定时器</code> 、 <code>socket</code> ）被正确释放，并触发回调函数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">同步代码</th>\n<th style=\"text-align:center\">异步代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">​执行方式</td>\n<td style=\"text-align:center\">阻塞等待（ <code>wait()</code> ）</td>\n<td style=\"text-align:center\">非阻塞，通过回调触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​事件循环</td>\n<td style=\"text-align:center\">无需  <code>io.run()</code></td>\n<td style=\"text-align:center\">必须调用  <code>io.run()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​线程占用</td>\n<td style=\"text-align:center\">单线程阻塞</td>\n<td style=\"text-align:center\">单线程 / 多线程（由  <code>run()</code>  决定）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​适用场景</td>\n<td style=\"text-align:center\">简单、短耗时操作</td>\n<td style=\"text-align:center\">高并发、实时性要求高的场景</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>​时间点计算</strong></p>\n<ol>\n<li><strong>函数式编程</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*e*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer<span class=\"token operator\">*</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 异步等待新到期时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t<span class=\"token operator\">-></span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  t<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Final count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// Final count is 5</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>t-&gt;expires_at()</code>  返回定时器当前的到期时间点（ <code>system_clock::time_point</code>  类型）， <code>boost::asio::chrono::seconds(1)</code>  表示一个 ​时间间隔​（ <code>duration</code>  类型）。两者相加会生成新的到期时间点：</p>\n<p>这种设计允许动态调整定时器的触发时间，适用于需要重复执行任务的场景（如每隔 <code>1</code>  秒打印一次计数器）。</p>\n<p><strong>​类型匹配的底层原理</strong></p>\n<p><code>expires_at()</code>  的参数类型是  <code>system_clock::time_point</code> ，而  <code>boost::asio::chrono::seconds(1)</code>  的类型是  <code>duration</code> , 明确指定了时间单位（秒），避免了因隐式类型转换导致的单位混淆（如误用毫秒或微秒）。<br>\n <code>Boost.Asio</code>  的  <code>chrono</code>  库通过 <strong>​类型推导</strong> 和 <strong>运算符重载</strong>，自动将  <code>duration</code>  转换为  <code>time_point</code> ，确保表达式合法。<br>\n若直接使用  <code>t-&gt;expires_at(1)</code> ，编译器会报错，因为  <code>1</code>  的类型是  <code>int</code> ，无法隐式转换为  <code>time_point</code> 。</p>\n<ol start=\"2\">\n<li><strong>面向对象编程</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造函数，初始化 timer_成员和 count_成员</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">timer_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 初始化 timer_成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">count_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                                     <span class=\"token comment\">// 初始化 count_成员</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//bind () 函数将成员函数 print 绑定到当前对象上，并作为回调函数传递给 timer_.async_wait ()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        timer_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"final count is \"</span><span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count_<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 新到期时间 = 当前到期时间 + 1 秒</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            timer_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            timer_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  printer <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// final count is 5</span></pre></td></tr></table></figure><p><strong>优缺点对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">维度</th>\n<th style=\"text-align:center\">​函数式</th>\n<th style=\"text-align:center\">​面向对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">​代码简洁性</td>\n<td style=\"text-align:center\">✅ 代码简短，适合简单场景</td>\n<td style=\"text-align:center\">❌ 类定义增加代码量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​安全性</td>\n<td style=\"text-align:center\">❌ 需手动管理指针，易出错</td>\n<td style=\"text-align:center\">✅ 自动管理资源，避免悬垂指针</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​扩展性</td>\n<td style=\"text-align:center\">❌ 修改需调整参数传递链</td>\n<td style=\"text-align:center\">✅ 新增功能只需扩展类方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​异步上下文</td>\n<td style=\"text-align:center\">❌ 依赖外部变量，多线程下可能竞争</td>\n<td style=\"text-align:center\">✅ 成员变量天然隔离，适合多线程异步任务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">​性能开销</td>\n<td style=\"text-align:center\">✅ 无虚函数或类结构开销</td>\n<td style=\"text-align:center\">❌ 类实例化带来微小内存开销</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>线程安全的异步任务队列（通过 Strand 串行化）</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 通过 strand_ 序列化回调函数的执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token function\">strand_</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_strand</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 初始化 strand_成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">timer1_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始化 timer1_成员</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">timer2_</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始化 timer2_成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">count_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 使用 strand_串行化异步操作，bind_executor () 将异步操作绑定到 strand_上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Final count is \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Timer 1: \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Timer 2: \"</span> <span class=\"token operator\">&lt;&lt;</span> count_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token operator\">++</span>count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">expires_at</span><span class=\"token punctuation\">(</span>timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">expiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        timer2_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token double-colon punctuation\">::</span>print2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>strand<span class=\"token operator\">&lt;</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token double-colon punctuation\">::</span>executor_type<span class=\"token operator\">></span> strand_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer1_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>steady_timer timer2_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">int</span> count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  printer <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 创建一个新线程，执行 Lambda 表达式中的代码 (即 io.run ())</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>thread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  io<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\">// 阻塞主线程，直到 t 线程结束</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码通过多线程运行  <code>io_context </code> 的事件循环，结合  <code>strand_</code>  的序列化机制，实现了高效的事件响应与线程安全的逻辑处理。虽然有两个线程处理事件，但任务逻辑（ <code>print1</code> / <code>print2</code> ）本质上是单线程化的，因此更准确地说，这是多线程协作处理事件循环，但任务执行是序列化的。</p>\n<p><strong> <code>Lambda</code>  的捕获方式 [&amp;]</strong></p>\n<ul>\n<li>[&amp;] 表示以引用方式捕获所有外部变量。<br>\n在  <code>Lambda</code>  内部可以直接访问外部作用域的所有变量（如  <code>io</code> ），且操作的是原变量本身，而非副本。</li>\n<li>​对比其他捕获方式：<br>\n[=]：以值方式捕获（创建副本，可能影响性能）。<br>\n[io]：仅捕获 io 变量（需显式指定）。<br>\n此处 [&amp;] 简化了代码，但需确保  <code>Lambda</code>  生命周期内外部变量有效。</li>\n</ul>\n<ol>\n<li>代码的多线程机制<br>\n<strong>​线程数量与任务类型</strong><br>\n代码中通过  <code>std::thread t([&amp;]&#123; io.run(); &#125;)</code>  创建了一个工作线程，主线程也调用  <code>io.run()</code> ，因此 ​总共有两个线程运行  <code>io_context</code>  的事件循环。这两个线程会并行处理  <code>io_context</code>  中的异步操作（如定时器到期事件）。</li>\n</ol>\n<p><strong>​异步操作的并行性</strong><br>\n <code>timer1_</code>  和  <code>timer2_</code>  是独立的定时器，它们的异步等待操作会被提交到  <code>io_context</code>  的任务队列中。理论上，这两个定时器的到期事件可能被分配到不同的线程处理。但由于绑定了  <code>strand_</code> ，所有回调会被强制序列化执行，​实际表现为单线程顺序处理​。</p>\n<ol start=\"2\">\n<li>Strand 的核心作用<br>\n<strong>​线程安全与顺序保证</strong><br>\n <code>strand_ </code> 是  <code>Boost.Asio</code>  提供的一种隐式同步机制，其作用包括：</li>\n</ol>\n<p>​序列化回调执行：所有通过  <code>strand_</code>  提交的回调（如  <code>print1</code>  和  <code>print2</code> ）会按提交顺序依次执行，即使多个线程在运行  <code>io_context</code> 。<br>\n​消除数据竞争：对共享资源  <code>count_</code>  的修改（如 <code>++count_</code> ）会被限制在同一个线程上下文中，无需显式加锁。<br>\n<strong>​代码中的具体实现</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>timer1_<span class=\"token punctuation\">.</span><span class=\"token function\">async_wait</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind_executor</span><span class=\"token punctuation\">(</span>strand_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将定时器的回调函数绑定到  <code>strand_</code>  的执行器上，确保回调在  <code>strand_ </code> 的调度下运行。因此，即使两个定时器的到期事件被不同线程触发， <code>print1</code>  和  <code>print2</code>  也不会并发执行。</p>\n<ol start=\"3\">\n<li>执行流程示例<br>\n假设两个定时器同时到期：\n<ol>\n<li>​事件触发： <code>timer1_</code>  和  <code>timer2_</code>  的到期事件被提交到  <code>io_context</code> 。</li>\n<li>​线程分配：事件可能被主线程或工作线程  <code>t</code>  处理。</li>\n<li>​Strand 调度：无论哪个线程处理事件，回调函数会被  <code>strand_ </code> 序列化。例如：\n<ul>\n<li>线程 1 执行  <code>print1</code>  → 输出  <code>Timer 1: 0</code> 。</li>\n<li>线程 2 执行  <code>print2</code>  → 但需等待  <code>print1</code>  完成后才能执行，输出  <code>Timer 2: 1</code> 。</li>\n<li>最终  <code>count_</code>  会严格递增至 10，无并发问题</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h1>\n<p><strong>TCP 连接</strong></p>\n<ul>\n<li>TCP 连接是面向连接的，可靠的，基于字节流的传输层通信协议。</li>\n<li>TCP 连接需要三次握手来建立连接，四次挥手来关闭连接。</li>\n<li>TCP 连接的建立和关闭都需要消耗一定的资源，因此需要合理管理 TCP 连接。</li>\n<li>TCP 连接的建立和关闭都需要消耗一定的资源，因此需要合理管理 TCP 连接。</li>\n</ul>\n<p><strong>UDP 连接</strong></p>\n<ul>\n<li>UDP 连接是无连接的，不可靠的，基于数据报的传输层通信协议。</li>\n<li>UDP 连接不需要建立连接，只需要发送数据报即可。</li>\n<li>UDP 连接不需要关闭连接，只需要发送数据报即可。</li>\n<li>UDP 连接的建立和关闭不需要消耗资源，因此不需要管理 UDP 连接。</li>\n</ul>\n<p><strong>TCP 和 UDP 的区别</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">TCP</th>\n<th style=\"text-align:center\">UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">面向连接</td>\n<td style=\"text-align:center\">无连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可靠</td>\n<td style=\"text-align:center\">不可靠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基于字节流</td>\n<td style=\"text-align:center\">基于数据报</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要三次握手</td>\n<td style=\"text-align:center\">不需要握手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要四次挥手</td>\n<td style=\"text-align:center\">不需要挥手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建立和关闭连接需要消耗资源</td>\n<td style=\"text-align:center\">建立和关闭连接不需要消耗资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要管理连接</td>\n<td style=\"text-align:center\">不需要管理连接</td>\n</tr>\n</tbody>\n</table>\n<p><strong>TCP 和 UDP 的应用场景</strong></p>\n<ul>\n<li>TCP 连接适用于需要可靠传输的场景，如文件传输、邮件发送等。</li>\n<li>UDP 连接适用于需要快速传输的场景，如视频直播、实时游戏等。</li>\n</ul>\n<p><strong>TCP 和 UDP 的编程模型</strong></p>\n<ul>\n<li>TCP 连接的编程模型通常包括客户端和服务端两部分，客户端通过  <code>socket</code>  函数创建一个套接字，然后通过  <code>connect</code>  函数连接到服务端，然后通过  <code>send</code>  和  <code>recv</code>  函数进行数据的发送和接收，最后通过  <code>close</code>  函数关闭连接。</li>\n</ul>\n<h2 id=\"同步tcp时间服务器\"><a class=\"markdownIt-Anchor\" href=\"#同步tcp时间服务器\">#</a> 同步 TCP 时间服务器</h2>\n<ol>\n<li>命令行参数</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>argc（Argument Count）​</strong><br>\n表示命令行参数的总数量（包括程序名本身）。</p>\n<ul>\n<li>例如，若用户输入  <code>./myprogram arg1 arg2</code> ，则  <code>argc</code>  的值为 ​3​（程序名 + 2 个参数）。</li>\n</ul>\n<p>​<strong>argv[]（Argument Vector）​</strong><br>\n是一个字符串指针数组，存储所有命令行参数的具体值。</p>\n<ul>\n<li><code>argv[0]</code> ：程序自身的名称（如 “./myprogram”）。</li>\n<li><code>argv[1]</code>  ~  <code>argv[argc-1]</code> ：用户输入的其他参数。</li>\n<li><code>argv[argc]</code> ：固定为 NULL（表示数组结束）。</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数总数 argc = %d\\n\"</span><span class=\"token punctuation\">,</span> argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"argv[%d] = %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./myprogram arg1 arg2 arg3</pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数总数 argc <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ./myprogram</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arg3</pre></td></tr></table></figure><ol start=\"2\">\n<li>同步 TCP 服务端</li>\n</ol>\n<blockquote>\n<p>服务端：监听端口 13 , 发送时间数据</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>time_t now <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 格式示例: \"Wed Oct  2 00:00:00 2023\\n\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 监听端口 13 (需管理员权限) 或改用其他端口如 12345</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tcp<span class=\"token double-colon punctuation\">::</span>acceptor <span class=\"token function\">acceptor</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Daytime 服务器启动，监听端口: \"</span> <span class=\"token operator\">&lt;&lt;</span> acceptor<span class=\"token punctuation\">.</span><span class=\"token function\">local_endpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            tcp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            acceptor<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞等待客户端连接</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"客户端连接: \"</span> <span class=\"token operator\">&lt;&lt;</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">remote_endpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>string message <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code ignored_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 发送时间数据后立即关闭连接</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ignored_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"异常: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>同步 TCP 客户端</li>\n</ol>\n<blockquote>\n<p>客户端：连接服务器，发送数据，接收响应，关闭连接。</p>\n</blockquote>\n<p><strong>整体流程</strong></p>\n<ul>\n<li>**​初始化 I/O 上下文：** 创建 io_context 对象，管理所有 I/O 操作。</li>\n<li>**​解析目标地址：** 将用户输入的主机名和服务名转换为具体的网络地址列表。</li>\n<li>**​创建套接字：** 准备用于通信的套接字对象。</li>\n<li>**​连接服务器：** 按地址列表尝试连接，直到成功或全部失败。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//using 导入某个变量到当前作用域 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//tcp 命名空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">//std::cerr 通常用于输出错误信息，这些信息不会被重定向到文件或管道，而是直接显示在终端上。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Usage: client &lt;host>\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 创建解析器对象，用于将 ​主机名 和 ​服务名 / 端口号 转换为具体的网络地址（IP + 端口）。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>resolver <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//io_context：绑定到同一个 I/O 上下文，确保解析操作由该上下文管理。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>resolver<span class=\"token double-colon punctuation\">::</span>results_type endpoints <span class=\"token operator\">=</span>     </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 解析用户输入的主机名和服务名，生成可能的网络端点列表。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    tcp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 套接字绑定到同一个 I/O 上下文，确保其操作由该上下文管理。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> endpoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试连接到服务器。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token operator\">></span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">//read_some 函数用于从 TCP 连接中读取数据。buffer 函数用于创建一个缓冲区，用于存储读取的数据。size_t 类型表示读取的字节数。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      size_t len <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">read_some</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>error<span class=\"token double-colon punctuation\">::</span>eof<span class=\"token punctuation\">)</span> <span class=\"token comment\">//eof 表示连接已关闭。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Connection closed cleanly by peer.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">throw</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">system_error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Some other error.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//buf.data () 返回缓冲区的指针，len 表示读取的字节数。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><code>boost::asio::io_context io_context;</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建 I/O 上下文对象，管理所有底层 I/O 操作（如网络通信、定时器等）。<br>\n<strong>​原理：</strong></p>\n<ul>\n<li><code>io_context</code>  是  <code>Boost.Asio</code>  的 ​事件循环核心，负责调度和处理异步操作。<br>\n所有异步操作（如连接、读写）都需要通过它执行。</li>\n</ul>\n<ol start=\"2\">\n<li><code>tcp::resolver resolver(io_context);</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建解析器对象，用于将 ​主机名 和 ​服务名 / 端口号 转换为具体的网络地址（IP + 端口）。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>io_context</code> ：绑定到同一个 I/O 上下文，确保解析操作由该上下文管理。<br>\n<strong>​功能：</strong></li>\n<li>解析器 ( <code>resolver</code> ) 支持  <code>DNS</code>  查询，将域名（如  <code>&quot;example.com&quot;</code> ）解析为 IP 地址。</li>\n<li>将服务名（如  <code>&quot;http&quot;</code> ）解析为端口号（如  <code>80</code> ）。</li>\n</ul>\n<ol start=\"3\">\n<li><code>tcp::resolver::results_type endpoints = resolver.resolve(argv[1], &quot;cc&quot;);</code></li>\n</ol>\n<p><strong>​作用：</strong> 解析用户输入的主机名和服务名，生成可能的网络端点列表。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>argv[1]</code> ：命令行输入的主机名（如  <code>&quot;localhost&quot;</code>  或  <code>&quot;192.168.1.100&quot;</code> ）。</li>\n<li><code>&quot;cc&quot;</code> ：服务名或端口号。这里可能是自定义的服务名（需系统配置）或直接表示端口号（如  <code>&quot;12345&quot;</code> ）。<br>\n<strong>​返回值：</strong></li>\n<li><code>endpoints</code>  是一个端点列表，包含所有可能的 IP 地址和端口组合（例如  <code>IPv4</code>  和  <code>IPv6</code>  地址）。</li>\n</ul>\n<ol start=\"4\">\n<li><code>tcp::socket socket(io_context);</code></li>\n</ol>\n<p><strong>​作用：</strong> 创建  <code>TCP</code>  套接字对象，用于与服务器通信。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>io_context</code> ：套接字绑定到同一个 I/O 上下文，确保其操作由该上下文管理。<br>\n<strong>​功能：</strong></li>\n<li>套接字是网络通信的端点，通过它可以发送和接收数据。</li>\n</ul>\n<ol start=\"5\">\n<li><code>boost::asio::connect(socket, endpoints);</code></li>\n</ol>\n<p><strong>​作用：</strong> 尝试连接到服务器。<br>\n<strong>​参数：</strong></p>\n<ul>\n<li><code>socket</code> ：上一步创建的套接字。</li>\n<li><code>endpoints</code> ：解析得到的端点列表。<br>\n<strong>​行为：</strong></li>\n<li>按顺序尝试连接  <code>endpoints</code>  中的每一个端点（如  <code>IPv4</code>  地址优先，失败后尝试  <code>IPv6</code> ）。</li>\n<li>当某个端点连接成功时，停止尝试。</li>\n<li>如果所有端点均连接失败，抛出异常。</li>\n</ul>\n<h2 id=\"异步tcp时间服务器\"><a class=\"markdownIt-Anchor\" href=\"#异步tcp时间服务器\">#</a> 异步 TCP 时间服务器</h2>\n<ol>\n<li><strong>主函数入口</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建 IO 上下文，管理所有异步操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    tcp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 创建 TCP 服务器实例，初始化监听</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 启动事件循环，处理异步操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>io_context</code>  是 <code>Boost.Asio</code>  的核心，负责调度异步任务。</li>\n<li><code>tcp_server</code>  初始化时会开始监听连接。</li>\n<li><code>io_context.run()</code>  会阻塞主线程，持续处理异步事件，直到所有任务完成。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>​TCP 服务器初始化（tcp_server 构造函数）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定 IPv4 地址的 13 端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始异步等待客户端连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>acceptor_</code>  初始化时绑定到本地 13 端口。</li>\n<li><code>start_accept()</code>  启动异步接受连接的过程。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>异步接受连接（start_accept）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span> tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新连接对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>                       <span class=\"token comment\">// 异步接受连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接完成时调用处理函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>tcp_connection::create</code>  创建新的连接对象，其 <code>socket</code>  由 <code>io_context</code>  管理。</li>\n<li><code>async_accept</code>  异步等待客户端连接。当有连接到来时， <code>lambda</code>  被调用，传递错误码和连接对象。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>处理新连接（handle_accept）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动数据发送流程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续监听下一个连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果没有错误，调用 <code>new_connection-&gt;start()</code>  开始处理客户端请求。</li>\n<li>无论是否出错，再次调用 <code>start_accept()</code> ，形成循环监听。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>TCP 连接处理（tcp_connection::start）</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成当前时间字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">auto</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 shared_ptr，延长对象生命周期</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步发送数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      socket_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送完成后的回调</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>make_daytime_string()</code>  生成当前时间的字符串。</li>\n<li><code>shared_from_this()</code>  确保在异步操作期间对象不会被销毁。</li>\n<li><code>async_write</code>  异步发送数据，完成后调用 <code>handle_write</code> 。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>数据发送完成处理（handle_write）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span> size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 此处可添加发送完成后的逻辑，例如关闭连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当前代码未处理发送结果，但可在此处添加错误处理或资源释放逻辑。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>生成时间字符串（make_daytime_string）​</strong></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 示例输出：\"Wed May 22 15:42:36 2024\\n\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>返回的字符串末尾包含换行符，符合 Daytime 协议标准。</li>\n</ul>\n<p><strong>异步执行流程总结：​</strong></p>\n<ul>\n<li>服务器启动，监听端口 13。</li>\n<li>当客户端连接时，async_accept 完成，触发 handle_accept。</li>\n<li>无错误则调用 start () 发送时间数据。</li>\n<li>数据发送完成后，由 handle_write 处理后续逻辑（当前为空）。</li>\n<li>服务器循环调用 start_accept，持续监听新连接。</li>\n</ul>\n<p>** 关键点：**​</p>\n<ul>\n<li><strong>​生命周期管理：</strong> 通过  <code>shared_from_this()</code>  和  <code>shared_ptr</code>  确保异步操作期间对象存活。</li>\n<li><strong>​异步链式调用：</strong>  <code>async_accept</code>  → <code> handle_accept</code>  →  <code>async_write</code>  →  <code>handle_write</code>  形成异步链。</li>\n<li><strong>​端口重用：</strong> Daytime 协议使用 13 端口，需确保权限允许（Linux/Mac 可能需要 sudo 运行）。</li>\n</ul>\n<p><strong>完整代码：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 示例输出：\"Wed May 22 15:42:36 2024\\n\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_connection</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">enable_shared_from_this</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">tcp_connection</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>tcp_connection<span class=\"token operator\">></span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">static</span> pointer <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket<span class=\"token operator\">&amp;</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成当前时间字符串</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">auto</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 shared_ptr，延长对象生命周期</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步发送数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        socket_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> size_t bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送完成后的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span> size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 此处可添加发送完成后的逻辑，例如关闭连接</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string message_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_server</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token operator\">:</span><span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定 IPv4 地址的 13 端口</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始异步等待客户端连接</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span> tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建新连接对象</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 异步接受连接</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 这里的 this 指向当前 tcp_server 对象</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span> tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动数据发送流程</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续监听下一个连接</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>acceptor acceptor_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建 IO 上下文，管理所有异步操作</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    tcp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 创建 TCP 服务器实例，初始化监听</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 启动事件循环，处理异步操作</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"upd\"><a class=\"markdownIt-Anchor\" href=\"#upd\">#</a> UPD</h1>\n<h2 id=\"同步udp客户端\"><a class=\"markdownIt-Anchor\" href=\"#同步udp客户端\">#</a> 同步 UDP 客户端</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Usage: client &lt;host>\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>resolver <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>endpoint receiver_endpoint <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">*</span>resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daytime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>socket <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> send_buf  <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>send_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> receiver_endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token operator\">></span> recv_buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    udp<span class=\"token double-colon punctuation\">::</span>endpoint sender_endpoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    size_t len <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sender_endpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"异步udp服务端\"><a class=\"markdownIt-Anchor\" href=\"#异步udp服务端\">#</a> 异步 UDP 服务端</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// For time_t, time and ctime;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udp_server</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">udp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buffer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_receive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>bytes_transferred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_send<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>bytes_transferred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_send</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token comment\">/*message*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*error*/</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token comment\">/*bytes_transferred*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>endpoint remote_endpoint_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> recv_buffer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    udp_server <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"组合tcpudp\"><a class=\"markdownIt-Anchor\" href=\"#组合tcpudp\">#</a> 组合 TCP/UDP</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/asio.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>ip<span class=\"token double-colon punctuation\">::</span>udp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// For time_t, time and ctime;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_connection</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">enable_shared_from_this</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">tcp_connection</span><span class=\"token operator\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>tcp_connection<span class=\"token operator\">></span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">static</span> pointer <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket<span class=\"token operator\">&amp;</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    message_ <span class=\"token operator\">=</span> <span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">async_write</span><span class=\"token punctuation\">(</span>socket_<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>message_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tcp_connection<span class=\"token double-colon punctuation\">::</span>handle_write<span class=\"token punctuation\">,</span> <span class=\"token function\">shared_from_this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">tcp_connection</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string message_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tcp_server</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function\">tcp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">io_context_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token function\">acceptor_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>tcp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      tcp_connection<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>io_context_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    acceptor_<span class=\"token punctuation\">.</span><span class=\"token function\">async_accept</span><span class=\"token punctuation\">(</span>new_connection<span class=\"token operator\">-></span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tcp_server<span class=\"token double-colon punctuation\">::</span>handle_accept<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> new_connection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_accept</span><span class=\"token punctuation\">(</span>tcp_connection<span class=\"token double-colon punctuation\">::</span>pointer new_connection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      new_connection<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">start_accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  tcp<span class=\"token double-colon punctuation\">::</span>acceptor acceptor_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udp_server</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token function\">udp_server</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context<span class=\"token operator\">&amp;</span> io_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">socket_</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">,</span> udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>udp<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_receive_from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>recv_buffer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_receive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>placeholders<span class=\"token double-colon punctuation\">::</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> boost<span class=\"token double-colon punctuation\">::</span>system<span class=\"token double-colon punctuation\">::</span>error_code<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_daytime_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      socket_<span class=\"token punctuation\">.</span><span class=\"token function\">async_send_to</span><span class=\"token punctuation\">(</span>boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> remote_endpoint_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>udp_server<span class=\"token double-colon punctuation\">::</span>handle_send<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>      <span class=\"token function\">start_receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">handle_send</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> <span class=\"token comment\">/*message*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>socket socket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  udp<span class=\"token double-colon punctuation\">::</span>endpoint remote_endpoint_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> recv_buffer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    boost<span class=\"token double-colon punctuation\">::</span>asio<span class=\"token double-colon punctuation\">::</span>io_context io_context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    tcp_server <span class=\"token function\">server1</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    udp_server <span class=\"token function\">server2</span><span class=\"token punctuation\">(</span>io_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    io_context<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Boost"
            ]
        }
    ]
}